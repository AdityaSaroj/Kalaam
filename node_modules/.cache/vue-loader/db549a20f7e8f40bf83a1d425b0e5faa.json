{"remainingRequest":"/Users/jonny/Documents/Work/test/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jonny/Documents/Work/test/node_modules/vuetify-loader/lib/loader.js??ref--17-0!/Users/jonny/Documents/Work/test/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/jonny/Documents/Work/test/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jonny/Documents/Work/test/src/views/Documentation.vue?vue&type=template&id=939d8420&","dependencies":[{"path":"/Users/jonny/Documents/Work/test/src/views/Documentation.vue","mtime":1591618079955},{"path":"/Users/jonny/Documents/Work/test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jonny/Documents/Work/test/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/jonny/Documents/Work/test/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Users/jonny/Documents/Work/test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jonny/Documents/Work/test/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}