{"remainingRequest":"/Users/jonny/Documents/Work/test/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jonny/Documents/Work/test/src/components/HelloWorld.vue?vue&type=style&index=0&id=469af010&scoped=true&lang=css&","dependencies":[{"path":"/Users/jonny/Documents/Work/test/src/components/HelloWorld.vue","mtime":1590466795744},{"path":"/Users/jonny/Documents/Work/test/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jonny/Documents/Work/test/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/jonny/Documents/Work/test/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/jonny/Documents/Work/test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jonny/Documents/Work/test/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["HelloWorld.vue"],"names":[],"mappingsfile":"HelloWorld.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"hello\">\n   \n   <div id=\"compiler\">\n   <div id=\"textarea\">\n    <textarea v-model=\"code\" type=\"text\" name=\"code\" id=\"codearea\"></textarea>\n\n    <button id=\"subm\" @click=\"RUN()\">RUN</button>\n   \n   </div>\n\n    <div id=\"output\">\n\n<div id=\"bharatDIV\">\n        <p style=\"color:orange\" id=\"bharatP\">BH</p> <p id=\"bharatP\" style=\"color:white\">AR</p> <p id=\"bharatP\" style=\"color:green\">AT</p>  <p id=\"versionNumber\" >  v1.0</p>\n\n<p style=\"    text-align: left;\n    color: #2fff2f;\n    font-family: monospace;\n\">{{TimeTaken}}</p>\n        \n\n\n<p id=\"linebylineOutput\" v-for=\"(output,index) in this.linebylineOutput\" :key=\"index\">\n\n\n {{output}} \n\n<input v-if=\"output.includes('Enter')\"  type=\"text\" v-model=\"input\" class=\"input\"/>\n\n\n</p>\n\n</div>\n\n\n\n\n    </div>\n</div>\n    <div id=\"errorstack\">\n\n<div v-for=\"(error,index) in this.error\" :key=\"index\">\n\n{{error}}\n</div>\n\n\n    </div>\n\n    \n      \n  </div>\n</template>\n\n<script>\n    import {\n        SourceDataReplaceforEasyParsing\n    } from '../FunctionScripts/functions'\nimport * as TypeCheck from '../FunctionScripts/TypeChecking'\nimport * as AdvancedTypeCheck from '../FunctionScripts/AdvancedTypeChecking'\nimport * as BuildOperation from '../FunctionScripts/BuildOperations'\nimport {\n    PushArray,\n    PushCalculation,\n    PushConditionalKeyword,\n    PushCondition,\n    PushForLoop,\n    PushWhileLoop,\n    PushWhileLoopCondition,\n    PushForLoopAruguments,\n    PushExpression,\n    PushKeyword,\n    PushNumber,\n    PushOperator,\n    PushRealTimePrintOperation,\n    PushString,\n    PushStringandValueOperation,\n    PushVariable,\n    PushVariableValue,\n    PushFunctionData,\n    PushInput\n\n} from '../FunctionScripts/PushFunctions'\nimport {\n    RemoveBrackets,\n    ResetValue,\n    isArrayOperation,\n    CreateArrayElement,\n    CalculateValues,\n    GetArrayorStringElement,\n    SetArrayorStringElement,\n    PrintArrayElement,\n    handlemultConditions,\n    HandleBlocks,\n    SplitElementsArray,\n    SetValues,\n    PushSetArrayIndexValue,\n    PushGetArrayIndexValue,\n    UpdateUpdated_tokenswithValues,\n    GetConditionValue,\n    ForLoopArrayorStringOutput,\n    AssignorUpdateValues,\n    HandleConditions,\n    getLoopIndexStart,\n    ForLoopSetMetadata\n} from '../FunctionScripts/MiscImportantFunctions'\n\nimport Swal from 'sweetalert2'\n\n\n\nexport default {\n    name: \"HelloWorld\",\n    props: {\n        msg: String\n    },\n\n    data() {\n        return {\n            code: 'Name=\"Swanand Kadam\" Name=\"Swanand Kadam is goat\" Array=[ 20,30,\"swanand\"] Age=2020-1996 ageone=20 agetwo=30 x=ageone+agetwo City=\"Pune\" प्रिंट (x)  प्रिंट (Name)  प्रिंट (\"You live, you learn\")  प्रिंट (Age)  अगर (ageone>agetwo) {प्रिंट (\"condition worked\")} प्रिंट (Array[2] + Age + \"is young age\" + Age) अगर (ageone==20) {प्रिंट (\"condition 2 worked\") y=x+ageone प्रिंट (y) }',\n            output: '',\n            error: [],\n            OperationObjects: [],\n            linebylineOutput: '',\n            TimeTaken: '',\n            inputIndexes:[],\n            input:''\n\n        };\n    },\n\n    methods: {\n        RUN: function() {\n\n\n\nconsole.log('Swal: ', Swal);\n\nvar t0 = performance.now()\n\n            //to stop accumulating output on succesive RUN\n            this.output = ''\n            this.input='',\n            this.linebylineOutput = this.output.split(\"\\n\")\n            this.inputIndexes=[]\n            this.error = []\n            this.OperationObjects = []\n            var sourcedata = this.code;\n            var cleaned_sourcedata = []\n            var i = 0;\n            var tokens = [];\n            var mixedimpurity = []\n            var updated_tokens = []\n            var functionContextupdated_tokens=[]\n            var variables_array = []\n            var assigned_variables = []\n            var terms = []\n            var terms2 = []\n            var operation = ''\n            var CalculationStack = []\n            var foundToken = ''\n            var ReIntializedVariables = []\n\n            //emptying accumulatedvalue stored for operations like Name= Name+Array[i]\n            //See AssignorUpdateValues fuction for more\n            ResetValue()\n\n\nfunction sleep(milliseconds) {\n  const date = Date.now();\n  let currentDate = null;\n  do {\n    currentDate = Date.now();\n  } while (currentDate - date < milliseconds);\n}\n\n\n            //preparing sourcedata for easy parsing by handling new lines, enters etc.\n            //cleaning up the data to get my version of sourcedata. it's better to get version suitable for me because users can type what they wish but I need to maintain \n            //integrity of program in every possible conditio. So. I created my own condition below\n\n            function GetCleanSourcedata(sourcedata, cleaned_sourcedata, impurities) {\n\n                sourcedata = SourceDataReplaceforEasyParsing(sourcedata)\n\n                sourcedata.forEach((element, i) => {\n\n\n                    //finding the elements which has =\" in it so that to seprate them e.g. anna=\"swanand\" also finding the elements which starts with =. e.g \"=78787890\"\n\n\n\n                    if (!element.includes('==')&&(element.indexOf('=\"') > -1 || element.indexOf('=') > 0 || element.charAt(0) == \"=\") && element != '==')\n\n\n                    {\n\n\n\n                        impurities.push(element) //push such element as impurity in impurities\n\n\n\n                        let elements = element.split(\"=\")\n                        let index = cleaned_sourcedata.length\n\n\n                        cleaned_sourcedata[index] = (elements[0])\n                        cleaned_sourcedata[index + 1] = (\"=\")\n                        cleaned_sourcedata[index + 2] = (elements[1])\n\n\n\n                    }\n\n\n                    //as long as element is pure, push it to new and clean version of sourcedata\n                    if (!impurities.includes(element)) {\n\n\n\n                        cleaned_sourcedata.push(element)\n\n                    }\n\n                    //\n\n                })\n\n\n                //removing empty \"\" values for final version of sourcedata\n                //SECTION FInal sourcedata cleaning\n\n                cleaned_sourcedata = cleaned_sourcedata.filter(function(item) {\n                    \n                    return item !== \"\"\n                })\n\n\n\n                return cleaned_sourcedata;\n\n            }\n\n\n            let Result = GetCleanSourcedata(sourcedata, cleaned_sourcedata, mixedimpurity)\n\n            cleaned_sourcedata = Result\n            console.log('cleaned_sourcedata: ', cleaned_sourcedata);\n\n\n\n\n            //SECTION - Start of Bharat Parser\n\n\n            //Checking for type of characters\n\n            const isVariable = TypeCheck.isVariable()\n            const isNumber = TypeCheck.isNumber()\n\n            const isOperator = TypeCheck.isOperator()\n\n            const isKeyword = TypeCheck.isKeyword()\n            const isConditionalKeyword = TypeCheck.isConditionalKeyword()\n            const isForLoop = TypeCheck.isForLoop()\n            const isWhileLoop = TypeCheck.isWhileLoop()\n            const isFunction = TypeCheck.isFunction()\n            //needs work\n            const isExpression = TypeCheck.isExpression()\n\n            const isArray = TypeCheck.isArray()\n            const isInput = TypeCheck.isInput() \n\n            const isSetArrayIndexValue = TypeCheck.isSetArrayIndexValue()\n\n            // const isEmptyArrayInit = TypeCheck.isEmptyArrayInit()\n\n            const isString = TypeCheck.isString()\n\n            const isPureEval = AdvancedTypeCheck.isPureEval()\n\n            //if parser encounters anything like (\" or (, then that's a realtime print. \n            //buildstring will be applied now to create a string and push it into tokens\n\n            const isRealTimePrintMultipleString = AdvancedTypeCheck.isRealTimePrintMultipleString()\n\n\n\n            const isStringandValue = AdvancedTypeCheck.isStringandValue()\n\n            const isCalculation = AdvancedTypeCheck.isCalculation()\n\n            const isDirectPrintArithmetic = AdvancedTypeCheck.isDirectPrintArithmetic()\n\n\n\n\n            // to solve [a,n,n,a] into [anna]\n\n            //SECTION Build Operations \n\n            const BuildString = BuildOperation.BuildString()\n\n            const BuildArray = BuildOperation.BuildArray()\n\n            const BuildCondition = BuildOperation.BuildCondition()\n\n\n            //this function is the first step to handlle operations like अगर (ageone==10 && AverageAge<1000 && agetwo>100 || ageone==10) OR (ageone==10 )\n\n            \n\n\n            //counting how many times do we have &&, || condition present\n            function Count(item, element) {\n\n                let count = 0\n\n\n                for (let i = 0; i < element.length; i++) {\n\n                    if (element.charAt(i) == item && element.charAt(i + 1) == item) {\n\n                        count += 1\n\n\n\n                    }\n\n\n\n                }\n\n                return count;\n\n\n            }\n\n\n\n            //This will run for every print statement encountered in the program, not just for loops\n\n            function IfTokenPrint(Tokens,updated_tokens, j, global, iterator, OriginalIterator)\n            \n            \n            \n\n\n            {\n\n\n                var token = Tokens[j].value\n                \n                \n                \n\n\n                var NextTokenValue = Tokens[j + 1].value\n                NextTokenValue=NextTokenValue.replace(\"+\", ' + ')\n                \n                \n\n\n                var StringVar = []\n\n                var b = RemoveBrackets(NextTokenValue)\n                \n                \n\n\n\n                if (isVariable(b)) {\n\n                    variables_array.push(b)\n                    // \n\n                }\n\n\n                //SECTION - Outputting the code\n                // finding the relvant value and then output it as HTML\n\n                //This loop is only for printing direct values like print(name), print(array)\n\n                updated_tokens.forEach((el, i) => {\n                    \n\n\n\n\n                    //THIS IS THE REAL GAME\n\n\n\n                    if (el.name == b) {\n\n                        //for calculations like x=ageone+agetwo\n\n                        //If we have already caluculated value, use that or else move forward\n\n\n\n\n                        if (assigned_variables.includes(el)) {\n\n\n                            global.output = global.output + el.value + \"\\n\";\n                            \n\n\n                        } else {\n\n\n                            if (isNumber(el.value)) {\n\n\n\n                                global.output = global.output + el.value + \"\\n\";\n                                \n\n                                assigned_variables.push(el);\n                                \n\n\n                            }\n\n                            //operations like age=2020-1996\n\n                            else if (isPureEval(el.value)) {\n\n\n\n\n                                let outputpure = eval(el.value)\n\n\n\n                                el.value = outputpure\n\n\n                                global.output = global.output + outputpure + \"\\n\";\n\n                                assigned_variables.push(el);\n\n                            }\n\n\n\n                            //operations like name=\"swanand kadam\", variable assignments as strings\n\n                           else if (!isPureEval(el.value) && !isNumber(el.value))\n\n\n                            {\n\n\n\n\n                                if (!(el.name.includes(']') && el.name.includes('['))) {\n\n                                    global.output = global.output + el.value + \"\\n\";\n\n                                  \n\n\n                                    assigned_variables.push(el);\n                                }\n\n\n\n\n                            }\n\n\n\n\n                        }\n\n                    }\n\n\n\n\n                    // work to be continued\n                })\n\n\n                //ANCHOR - CONDITION 2\n                if (Tokens[j + 1].type == 'Array')\n\n\n\n\n                {\n\n                    //console.log('Tokens[j + 1]: ', Tokens[j + 1]);\n                    //To run only if iterator is present\n\n                    //This runs on for loop - Print(Array[a]) etc\n\n                    //this runs only if for(i) and in the loop, array[i], not on array[x]. Iterator and index should be same\n\n                    if (iterator != undefined && Tokens[j + 1].IndexInput == OriginalIterator)\n\n                    {\n\n\n\n                        let Value = NextTokenValue\n                        // console.log('Value: ', Value);\n\n                        let ArrayElement = CreateArrayElement(Value, iterator)\n\n\n                        let output = GetArrayorStringElement(ArrayElement, updated_tokens)\n\n\n\n\n                        global.output = global.output + output + \"\\n\";\n                        //console.log('output: ', output);\n\n\n                        assigned_variables.push(Tokens[j + 1]);\n\n\n                    }\n\n\n                    //This runs to Print(Array[2]) like specific array values\n                   \n                   else if (Tokens[j].IndexInput != OriginalIterator)\n\n\n                    {\n\n                       // console.log('Tokens[j]: ', Tokens[j + 1]);\n                        //\n\n                        let Value = NextTokenValue\n\n                        let IndexToChange = Tokens[j + 1].IndexInput\n\n\n                        let ArrayElement = CreateArrayElement(Value, IndexToChange)\n\n\n                        let element = ArrayElement.replace(']', '')\n\n\n                        let Split = element.split('[')\n\n\n\n\n                        if (Split[1].includes('-') || Split[1].includes('+')) {\n\n\n                            let output = CalculateValues(Split[1], j, updated_tokens)\n\n                            Split[1] = output\n\n                            Split = Split.join('[') + ']'\n                            ArrayElement = Split\n                            //console.log('ArrayElement: ', ArrayElement);\n\n\n                        }\n\n\n                        let token = updated_tokens.find(el => el.name == Split[1])\n\n                      if(token != undefined && OriginalIterator != Split[1]) {\n\n                            Split[1] = token.value\n\n                            Split = Split.join('[') + ']'\n                            ArrayElement = Split\n\n\n                        } else {\n\n                            ArrayElement = ArrayElement\n                            //console.log('ArrayElement: ', ArrayElement);\n\n                        }\n\n\n                        let output = GetArrayorStringElement(ArrayElement, updated_tokens)\n\n\n\n\n                        global.output = global.output + output + \"\\n\";\n                       // console.log('output: ', output);\n\n\n\n\n                    }\n\n\n                }\n\n\n\n\n                //printing direct numbers and direct calcultions like print(10), print(10*10)\n\n               else if (token == 'प्रिंट' && (isPureEval(NextTokenValue) || isNumber(RemoveBrackets(NextTokenValue)))) {\n\n\n                    let a = eval(NextTokenValue)\n                    console.log('NextTokenValue: ', NextTokenValue);\n\n                    global.output = global.output + \"\\n\" + a + \"\\n\"\n\n                }\n\n\n\n\n                //foroperations like print('you live, you learn')\n               else if (Tokens[j + 1].mode == \"RealTimePrint\" && !NextTokenValue.includes('+') && !NextTokenValue.includes('='))\n\n                {\n\n\n                    let output = RemoveBrackets(NextTokenValue)\n                    console.log('NextTokenValue: ', NextTokenValue);\n\n                    output = output.replace(/\"/g, '');\n                    output = output.replace(/'/g, '');\n\n\n                    global.output = global.output + \"\\n\" + output + \"\\n\"\n                    //console.log('global.output: ', global.output);\n\n\n\n                }\n\n                //operations like print(Age + 'is young age')\n\n               else if (Tokens[j + 1].mode == \"RealTimePrint\" && NextTokenValue.includes('+')) {\n\n\n\n                    let x = SplitElementsArray(NextTokenValue)\n                    console.log('x: ', x);\n                    \n                    \n\n\n                    StringVar = SetValues(x, updated_tokens)\n\n\n\n\n                    StringVar = StringVar.join('')\n                    StringVar = StringVar.split(\"+\")\n\n                    let output = StringVar.join(' ')\n                    output = RemoveBrackets(output)\n\n                    global.output = global.output + \"\\n\" + output + \"\\n\"\n\n\n\n\n                }\n\n\n               else if (isCalculation(RemoveBrackets(NextTokenValue)) && Tokens[j + 1].mode != \"RealTimePrint\")\n               \n\n                {\n\n\n                    let output = CalculateValues(NextTokenValue, j, updated_tokens)\n\n                    global.output = global.output + \"\\n\" + output + \"\\n\"\n\n\n\n                }\n                // \n\n\n\n\n            }\n\n\n            //END OF Functions and Imported Functions\n\n\n\n            //SECTION - Parsing STARTS here\n\n            //SECTION - Checking each token and adding to tokens array\n\n\n\n            let tempthis = this;\n            let variableArray = [] //TO REMOVE DUPLICATE VARIABLES, SEE 482\n\n            function Parse(cleaned_sourcedata, i) {\n\n                var element = cleaned_sourcedata[i];\n\n\n                var string = []\n\n\n\n\n                if (isVariable(element) == true) {\n\n\n                    if (cleaned_sourcedata[i + 1] == '=') {\n\n\n\n                        PushVariable(element, tokens)\n\n\n                        if (variableArray.includes(element)) {\n\n                           // let UpdateElementValue = element\n\n                            let x = tokens.find(el => el.value == element)\n\n                            let index = tokens.indexOf(x)\n\n\n\n                            //\n\n\n                            ReIntializedVariables.push({\n                                name: element\n                            })\n\n                            //\n\n                            //tokens[index+2].value= cleaned_sourcedata[i+2]\n\n\n\n                        }\n\n                        variableArray.push(element)\n\n\n\n\n                    } else if (cleaned_sourcedata[i - 1] == '=') {\n\n\n                        PushVariableValue(element, tokens)\n\n                    }\n\n                }\n\n                else if (isNumber(element) == true) {\n\n                    PushNumber(element, tokens)\n\n                }\n\n                else if(isInput(element)==true)\n                \n                {\n\n\n                    PushInput(element,tokens,cleaned_sourcedata,i)\n                    \n\n                    \n\n                }\n\n                else if (isOperator(element) == true) {\n                    PushOperator(element, tokens)\n\n                }\n\n               else if (isKeyword(element) == true) {\n\n                    PushKeyword(element, tokens)\n\n                }\n                else if (isFunction(element) == true) {\n\nPushFunctionData(element,tokens, cleaned_sourcedata,i)\n\n                }\n\n                //check if it accpets Arry[2a] as index : \n                else if (isArray(element) == true) {\n\n\n\n\n                    if (element.charAt(element.length - 1) == ']') {\n\n\n\n                        PushArray(element, tokens)\n\n                    } else {\n\n\n                        let BuiltArray = BuildArray(element, i, cleaned_sourcedata)\n\n                        PushArray(BuiltArray, tokens)\n\n\n\n                    }\n                }\n\n                //for Numbers[a]=x\n                else if (isSetArrayIndexValue(element, cleaned_sourcedata, i) == true) {\n\n\n\n\n                    PushSetArrayIndexValue(element, tokens, cleaned_sourcedata, i);\n\n\n\n                }\n\n                \n\n                //for x=Numbers[a]\n\n               else if (isSetArrayIndexValue(element, cleaned_sourcedata, i) == false) {\n\n\n\n                    PushGetArrayIndexValue(element, tokens, cleaned_sourcedata, i)\n\n\n\n\n                }\n\n                /*  if (isEmptyArrayInit(element, cleaned_sourcedata, i) == true) {\n\n\n\n                    PushEmptyArrayInit(tokens, cleaned_sourcedata, i)\n\n\n                }\n*/\n\n\n\n               else if (isConditionalKeyword(element) == true) {\n\n\n\n                    if (isWhileLoop(element) == true) {\n\n                        PushWhileLoop(element, tokens, cleaned_sourcedata, i)\n                        // PushWhileLoopCondition(element, cleaned_sourcedata, i, tokens)\n\n\n                    } else {\n\n                        PushConditionalKeyword(element, tokens)\n                    }\n\n\n                    let foundcondition = BuildCondition(element, i, cleaned_sourcedata)\n                    // console.log('foundcondition: ', foundcondition);\n\n\n\n                    PushCondition(foundcondition, tokens)\n\n\n\n\n                }\n\n\n                else if (isForLoop(element) == true) {\n\n                    PushForLoop(element, tokens)\n                    PushForLoopAruguments(element, cleaned_sourcedata, i, tokens)\n\n                    updated_tokens.push({\n\nname:cleaned_sourcedata[i+1],\nvalue:0,\ntype: 'ForLoopIterator'\n\n                    })\n\n\n                }\n\n\n\n\n              else if (isCalculation(element) == true) {\n\n\n                    let element = ''\n\n                    if (cleaned_sourcedata[i + 1] != undefined) {\n\n\n\n                        // this is to perform long operations like AverageAge=(ageone+agetwo)/2 + (ageone+agetwo)*2\n\n                        while (isCalculation(cleaned_sourcedata[i]))\n\n\n\n                        {\n\n\n                            element = element + cleaned_sourcedata[i];\n\n\n                            i++;\n\n                        }\n\n\n\n\n                    }\n\n\n                    //PushCalculation(element,tokens)\n\n\n\n\n                    //  \n                    terms = element.split('')\n\n                    //removing the \"(\"\" and \")\"\n\n                    var CleanedElement = RemoveBrackets(element)\n\n\n                    // to stop prevention of expressions like is\"+ getting added as a calculation\n                    if (!(CleanedElement.includes('\"')) && element.charAt(0) != '/' && element.charAt(0) != '*') {\n\n                        PushCalculation(element, tokens, cleaned_sourcedata, i)\n\n\n\n                    }\n\n\n                    // terms2 = CleanedElement.split(operation)\n\n                    //checkpoint: to perform calculations \n                    //I have identified the operation(seperated) and terms (seperated)\n\n\n\n                    /*      tempthis.OperationObjects.push({\n                                  terms: terms2,\n\n\n                              }\n\n\n\n                          )\n                          */\n\n\n\n\n                }\n\n                //finding operations like print(\"swanand\"). The realtimeprint operations\n\n\n\n              else  if (isRealTimePrintMultipleString(element) == true) {\n\n\n\n                    //\n                    let foundString = ''\n\n                    let k = i\n                    //  console.log('element: ', element);\n                    let conditionEnd = element.charAt(element.length - 1) + element.charAt(element.length - 2)\n\n                    //console.log('conditionEnd: ', conditionEnd);\n\n\n                    var flag = 0;\n\n\n\n\n                    for (k; k < cleaned_sourcedata.length; k++) {\n\n                        let element = cleaned_sourcedata[k]\n                        // console.log('element: ', element);\n                        let conditionEnd = element.charAt(element.length - 1) + element.charAt(element.length - 2)\n\n\n\n                        if (cleaned_sourcedata[k].includes('दुहराओ') || cleaned_sourcedata[k].includes('प्रिंट') || cleaned_sourcedata[k].includes('अगर') || cleaned_sourcedata[k + 1] == '='|| cleaned_sourcedata[k] == '}') {\n\n\n                            //foundString=foundString+  ' '+ cleaned_sourcedata[k]\n\n                            //\n                            break;\n\n\n                        }\n\n                        if (conditionEnd == ')\"')\n\n                        {\n\n                            foundString = foundString + ' ' + cleaned_sourcedata[k];\n                            break;\n\n                        }\n\n                       else if (flag == 1) {\n\n                            foundString = foundString + ' ' + cleaned_sourcedata[k]\n\n                        }\n\n                        else if (flag == 0) {\n\n                            foundString = cleaned_sourcedata[k];\n\n                            flag = 1;\n\n                        }\n\n\n\n\n                    }\n\n\n\n                    if ((!foundString.includes(\">\")) && (!foundString.includes('/')) && (!foundString.includes('*')) && (!foundString.includes('<')) && (!foundString.includes('==')))\n\n\n                    {\n\n                        //console.log('foundString: ', foundString);\n                        PushRealTimePrintOperation(foundString, tokens)\n\n                    }\n\n\n\n\n                }\n\n\n                \n\n\n\n\n                //storing only the string values to tokens ( not the strings in print statements)\n\n               else if (isString(element))\n\n\n                {\n\n\n\n                    let calculatedString = BuildString(element, i, cleaned_sourcedata)\n\n\n\n                    calculatedString = calculatedString.replace(/['\"]+/g, '')\n\n                    if (!(calculatedString.includes(\"प्रिंट\")))\n\n                        PushString(calculatedString, tokens)\n\n                    //\n\n\n\n                }\n\n\n\n\n                //Found Solution using regexp- print(a) without space is getting accepted as expression\n\n\n               else if (/^(?=.*?प्रिंट)(?=.*[a-z])/.test(element)) {\n\n                    PushKeyword(element.slice(0, 6), tokens); //Pushing print keyword only\n\n\n                    PushExpression(element.slice(6), tokens) //Pushing remaining expression like (a), (gagaks) etc\n                }\n\n\n                //error prone change made here\n\n             else   if (isExpression(element) == true && !isCalculation(element) && !element.includes('[') && !element.includes(']') && (!isConditionalKeyword(cleaned_sourcedata[i - 1])) && (cleaned_sourcedata[i - 1] != 'मे' && cleaned_sourcedata[i - 1] != 'कार्य'  )) {\n\n\n\nif(element.charAt(0)!='(')\n{\n\nlet CheckFunctionExpression= element.split('(')\n\n\nlet passedValues=RemoveBrackets(CheckFunctionExpression[1])\npassedValues=passedValues.split(',')\nlet token= tokens.find(el=> el.value==CheckFunctionExpression[0])\n\n\nif(token!=undefined)\n{\n\n\n\ntoken.FunctionInvocationExists=true\ntoken.ExecutionIndex=i-1\ntoken.passedValues=passedValues\n\n\n\n}\n\n}\n\n                    PushExpression(element, tokens)\n                    \n\n\n\n                }\n             else   if (isExpression(element) == true && element.includes('[') && element.includes(']')) {\n\n                    PushArray(element, tokens)\n\n                }\n\n\n             else   if (!isKeyword(element) && !isNumber(element) && !isVariable(element) && !isExpression(element) && !isOperator(element)) {\n\n\n                    //ANCHOR \n                    /*Hnadling Impurity error-The main problem is figuring out how to solve \"=7000\" like things\n                    instead asking developers to add space manually\n                    Handling Alphanumeric strings to solve issues like ' anna=2362934'\n\n                    let impurity = element.split('=')\n\n                    let findString = impurity[1]\n\n\n                    //to accept long numbers i.e a=749374593745937\n\n                    if (isVariable(impurity[0]) && isNumber(impurity[1])) {\n\n\n                        impurity[2] = impurity[1];\n                        impurity[1] = '=';\n\n                    }\n\n                    //to accept a=STRING\n                    if (isVariable(impurity[0]) && isVariable(impurity[1])) {\n\n\n                        impurity[2] = impurity[1];\n                        impurity[1] = '=';\n\n                    }\n\n\n\n                    impurity.forEach((element, i) => {\n\n                        if (isVariable(element) == true) {\n\n\n\n                            PushVariable(element, tokens)\n\n\n                            //continue;\n                        }\n\n                        // ANCHOR \n\n                        //Issue: Right now, only isNumber is resolved, a=, =23828qw aren't resolved.\n                        //Solution: Work on all the modules\n\n\n                        if (isNumber(element) == true) {\n\n\n                            PushNumber(element, tokens)\n\n                        }\n\n                        //ANCHOR \n                        //You might have to remove this extra filters since you are only working on numbers (Future Issue)\n                        if (isOperator(element) == true) {\n                            PushOperator(element, token)\n\n                        }\n\n\n\n                        if (isKeyword(element) == true) {\n\n                            PushKeyword(element)\n\n                        }\n\n                        if (isExpression(element) == true) {\n\n\n                            PushExpression(element, tokens)\n\n                        }\n\n\n\n\n                    })\n */\n\n                }\n               \n\n\n\n            }\n\n            //SECTION - Checking each token and adding to tokens array\n            // PARSING INITIATION\n\n\n            for (i; i < cleaned_sourcedata.length; i++) {\n\n\n                Parse(cleaned_sourcedata, i)\n            }\n\n            //ANCHOR \n            //CLEANING UP THE TOKENS ARRAY\n            //Removing tokens with value = '', It was generated due to \" cleaned_sourcedata = cleaned_sourcedata.replace(/(;|\\n|\\r)/gm, \" \").split(' ')\"\n            tokens = tokens.filter(el => el.value != '')\n            console.log('tokens: ', tokens);\n\n\n\n\n            //To find undefined variables\n            let difference = variables_array.filter(x => !assigned_variables.includes(x))\n\n            //\n\n            if (difference.length > 0)\n\n            {\n                this.error.push(' Variable ' + difference.toString().split(',') + ' is undefined ')\n\n            }\n\n\n\n\n            //SECTION - Printing Outputs, considering conditions, finding values in updated_tokens\n\n\n\n\n            for (var j = 0; j < tokens.length; j++) {\n\n                // Checking for assignment operators\n\n               \n                let mutable_tokens = tokens\n                var token = mutable_tokens[j].value\n                let tokenType = mutable_tokens[j].type\n\n\n\n                var StringVar = []\n\n                let VarWithoutbrackets = RemoveBrackets(mutable_tokens[j].value)\n\n                VarWithoutbrackets = VarWithoutbrackets.replace(/ /g, '')\n\n\n                if (mutable_tokens[j].type == \"SetArrayIndexValue\")\n\n\n\n                {\n\n                    let ValueToSet = mutable_tokens[j].ValueToSet\n\n\n                    //For Numbers[a]=ageone+100 like calculations\n\n                    if (isCalculation(ValueToSet)) {\n\n                        ValueToSet = CalculateValues(ValueToSet, j, updated_tokens)\n\n\n                        GetArrayorStringElement(mutable_tokens[j].value, updated_tokens, ValueToSet)\n\n\n                    }\n                    //For Numbers[a]=ageone , direct setting\n                    else {\n\n\n                        GetArrayorStringElement(mutable_tokens[j].value, updated_tokens, ValueToSet)\n\n                    }\n\n\n\n\n                }\n\n              else if (mutable_tokens[j].value == '=') {\n\n                    //assigning values to variables\n\n                    let variable = mutable_tokens[j - 1].value\n\n\n\n\n                    //\n                    let varvalue = mutable_tokens[j + 1].value\n\n\n                    //\n\n                    //finding if elements is already assgined in updated tokens\n                    //to solve name='swanand' and name= 'other swanand'\n                    //both shpuld be printed accordinggly\n\n\n\n                    let m = updated_tokens.find((el, i) => el.name == varvalue)\n\n                    varvalue = m != undefined ? m.value : varvalue\n\n\n\n\n                    let n = updated_tokens.find((el, i) => el.name == variable)\n\n\n\n\n                    // \n\n\n\n                    if (n == undefined) {\n\n\n\n                        //to check if the assigned value needs to be calculated. this is futher diveded in two types\n                        if (isCalculation(varvalue))\n\n\n                        {\n\n\n                            //type 1- Age= 2020-2000 \n                            if (isPureEval(varvalue))\n\n\n\n                            {\n\n\n                                let value = eval(varvalue)\n\n                                //write function for this, so repeatable\n                                updated_tokens.push({\n                                    name: variable,\n\n                                    value: value,\n\n                                    identifier: j,\n                                    type: mutable_tokens[j + 1].type\n                                })\n\n\n                            }\n\n                            //type 2- X= ageone+agetwo\n                            else {\n\n\n                                //performing the calculation\n                                // \n                                let value = CalculateValues(varvalue, j, updated_tokens)\n\n\n\n\n                                updated_tokens.push({\n                                    name: variable,\n\n                                    value: value,\n\n                                    identifier: j,\n                                    type: mutable_tokens[j + 1].type\n                                })\n\n\n\n                            }\n\n\n\n                        }\n\n\n                        //if there is no need to calculate, push values as it is\n                        else {\n\n                            updated_tokens.push({\n                                name: variable,\n\n                                value: varvalue,\n\n                                identifier: j,\n                                type: mutable_tokens[j + 1].type\n                            })\n\n\n                        }\n\n\n                    }\n\n\n\n\n                    //if it's already assgined, reassign it with updated value\n                    else {\n\n                        if (isCalculation(varvalue)) {\n\n                            let NewValue = CalculateValues(varvalue, j, updated_tokens)\n                            n.value = NewValue\n\n\n                        } else {\n\n                            n.value = varvalue\n                        }\n\n\n\n\n                    }\n                    //\n                    //\n\n                    // \n\n\n                }\n\n\n\n                else if(tokenType=='AcceptInput')\n                {\n\nlet SetInputValueAs= mutable_tokens[j].AcceptAs\n\n\n\n\n                                    var value=prompt('Enter Value for' + SetInputValueAs)\n                                    console.log('value: ', value);\n\n\n                                       updated_tokens.push({\n                                    name: SetInputValueAs,\n\n                                    value: value,\n\n                                    \n                                })\n\n\n        \n                                   const value2 = this.$Swal.fire({\n  title: 'Input email address',\n  input: 'email',\n  inputPlaceholder: 'Enter your email address'\n})\n\nif (value) {\n  Swal.fire(`Entered email: ${value}`)\n}\n\n\n\n\n\n                                   \n                                   \n\n\n                }\n\n\n\n\n\n\n                    else if (tokenType=='function')\n{\n\n//checking if function is invoked somewhere later in the program\nlet functionInvocation=mutable_tokens[j].FunctionInvocationExists\n\n\n\n  if(functionInvocation)\n  {\nlet functionSourceData=[]\n\n let result = HandleBlocks(mutable_tokens, j, functionSourceData )\n\n functionSourceData=result.StoreResult\n\nlet functionArguments=mutable_tokens[j].arguments\nlet functionName=mutable_tokens[j].value\n\nlet passedValues=mutable_tokens[j].passedValues\n\n\n\n//Creating a seperate execution context and setting fucntion context name:value pair in 'functionContextupdated_tokens'\nfunctionArguments.forEach((el,index) => {\n\n\n   let val= passedValues[index]\n   val = val.replace(/\"/g, \"\");\n                    val = val.replace(/'/g, \"\");\n\n                    passedValues[index]=val\n    \nfunctionContextupdated_tokens.push({\n    \n    \n\n\n\n                                    name: el,\n\n                                    value: passedValues[index],\n\n                                    identifier: j+index,\n                                    type: 'value',\n                                    context:'FunctionExecutionContext'\n                            \n\n\n\n})\n\n\n\n\n});\n\n\nvar CompleteTokenValueList=[...updated_tokens,...functionContextupdated_tokens]\nconsole.log('CompleteTokenValueList: ', CompleteTokenValueList);\n\n\nfor(let i=1;i<functionSourceData.length;i++)\n\n{\n\n\nlet el=functionSourceData[i]\n\n\n\n\n\nif(el.value=='प्रिंट')\n\n{\n\n\n IfTokenPrint(mutable_tokens,functionContextupdated_tokens, j+i, this) \n\n\n}\n\nelse  if (el.type== 'condition')\n\n                {\n\n\n\n\n                    let element = functionSourceData[i].value\n\n                    //this function is the first step to calculate value of operations like अगर (ageone==10 && AverageAge<1000 && agetwo>100 || ageone==10) OR (ageone==10 )\n\n                    let ConditionValue = GetConditionValue(element, CompleteTokenValueList, i)\n                    //  console.log('j: ',j);\n\n\n\n\n                    //if value is false, just skip the if loop context, if not it will be ran in final print module\n\n                    if (ConditionValue == false) {\n\n                        let InitializeLoop = tokens.indexOf(functionSourceData[i])\n\n                        //Handle Blocks is a function which takes care of nested block by taking care of nested { and } brackets\n                        //it uses the stack to push and pop brackets to accurately identify start and the end of the block\n                        let Returnvalue = HandleBlocks(functionSourceData, i)\n\n                        i = Returnvalue.i\n                    }\n\n\n\n\n                }\n\n\n\n  \n\n\n                            //Handling set array element statements in for loop\n                          else  if (functionSourceData[i].type == \"SetArrayIndexValue\")\n\n\n\n\n                            {\n\n                                let Value = functionSourceData[i].value\n                                //console.log('SourcedataTokens: ', SourcedataTokens);\n                                //                              console.log('Value: ', Value,i);\n\n                                let ValueToSet = functionSourceData[i].ValueToSet\n\n                                let element = RemoveBrackets(Value);\n\n                                var ArrayElement = ''\n\n\n                                //Seprating out index identifier. xyz from Array[xyz]\n\n                                element = element.replace(']', '')\n\n\n                                let Split = element.split('[')\n\n\n\n                                // run if we need to set direct Array element value. like Array[2]= xyx                    \n                                if (isNumber(Split[1])) {\n\n                                    Split = Split.join('[')\n                                    //\n\n                                    Split = Split + ']'\n\n\n                                    ArrayElement = Split\n                                    // console.log('ValueToSet: ', ValueToSet);\n\n                                    NewValueToSet = CalculateValues(ValueToSet, j, CompleteTokenValueList )\n                                    console.log('NewValueToSet: ', NewValueToSet);\n\n\n\n                                    SetArrayorStringElement(ArrayElement, CompleteTokenValueList, false, NewValueToSet, tokens)\n\n\n\n\n                                }\n\n                                // run if we need to dynamically set Array element value. like Array[i]= xyx\n                                //CreateArrayElement function will create dynamic Array values. like Array[0], Array[1] etc.                    \n                                else {\n\n\n                                    let index = Split[1]\n\n\n                                    // setting iterator as per user input \n                                    //for iterator like count=count + 1, Array[count]\n\n                                    let newInterator = 0\n                                    let token = CompleteTokenValueList.find(el => el.name == index)\n\n                                    if (token != undefined) {\n\n                                        newInterator = token.value\n\n                                    } else {\n\n                                        newInterator = iterator\n                                    }\n\n\n\n                                    ArrayElement = CreateArrayElement(Value, newInterator)\n\n\n\n\n                                }\n\n\n                                // this code is written to find operations like Array[a]= a*100+age*a. notice a\n                                //find a way to simplify this in long term\n\n                                let data = ValueToSet\n\n\n                                data = data.split('*').toString();\n                                data = data.split('+').toString();\n                                data = data.split('-').toString();\n                                data = data.split('/').toString();\n                                data = data.split(',')\n                                //console.log('data: ', ArrayElement, data, Split);\n\n\n\n\n                                //building a new value to convert a*100+age*a into 5*100+age*a and then sending it to CalculateValues()\n                                let NewValueToSet = ''\n\n                                // \n\n\n                                if (data.includes(Split[1]) && data.length > 1)\n\n                                {\n\n\n                                    //we have operations like Array[a]= a*100+age*a. notice a\n\n                                    for (let m = 0; m < ValueToSet.length; m++)\n\n                                    {\n\n                                        if (ValueToSet[m] == Split[1] && !(/^[a-z]+$/i.test(ValueToSet[m + 1])))\n\n                                        {\n\n\n\n                                            // value is been set . replacing index value a with iteartor value 0,1,2, etc.   \n                                            NewValueToSet = NewValueToSet + iterator\n\n                                        } else {\n\n                                            NewValueToSet = NewValueToSet + ValueToSet[m]\n\n\n\n                                        }\n\n\n\n                                    }\n\n                                    let iterat = false\n                                    //gave it a different name so it would not fuck up with for loop iterator\n\n                                    NewValueToSet = CalculateValues(NewValueToSet, j, CompleteTokenValueList, )\n\n\n\n\n                                    // \n\n                                    SetArrayorStringElement(ArrayElement, CompleteTokenValueList, iterat, NewValueToSet, tokens)\n\n\n\n\n                                }\n\n\n                                // this condition enables program to only run  Array[a]= xyz when iterator is a. It disallows running Array[blablabla]=xyz\n                                if (OriginalIterator == Split[1]) {\n\n\n\n                                    //  console.log('ValueToSet: ', ValueToSet);\n\n                                    if (Split[1] == ValueToSet) {\n\n\n                                        let iterator = true\n\n                                        SetArrayorStringElement(ArrayElement, CompleteTokenValueList, iterator, ValueToSet, tokens)\n\n\n\n                                    }\n\n                                    // for operations like Array[a]=ageone*100\n\n\n                                    if (!data.includes(Split[1]) && OriginalIterator == Split[1]) {\n\n\n\n                                        let iterator = false\n\n                                        ValueToSet = CalculateValues(ValueToSet, j, CompleteTokenValueList)\n                                        // console.log('ValueToSet: ', ValueToSet);\n\n                                        // \n\n                                        SetArrayorStringElement(ArrayElement, CompleteTokenValueList, iterator, ValueToSet, tokens)\n\n\n\n                                    }\n\n\n\n\n                                    //SetArrayorStringElement(ArrayElement,CompleteTokenValueList, iterator, ValueToSet, tokens)\n\n\n\n                                }\n\n\n                                //might have to add more conditions in the future\n                                else {\n\n                                    let iterator = false\n\n                                    ValueToSet = CalculateValues(ValueToSet, j, CompleteTokenValueList)\n                                    //   console.log('ValueToSet: ', ValueToSet);\n\n                                    // \n\n                                    SetArrayorStringElement(ArrayElement, CompleteTokenValueList, iterator, ValueToSet, tokens)\n\n\n\n\n                                }\n\n\n\n\n                            }\n\n\n\n\n else  if (functionSourceData[i].type == 'ForLoopStart')\n\n\n\n                {\n\n  var FlagPrimalLoop = 0\n                   \n                    var SourcedataTokens = []\n\n     \n//console.log('updated_tokens: ', updated_tokens);\n\n     let ForLoopMetaData= ForLoopSetMetadata(functionSourceData,i,CompleteTokenValueList)\n     \n\nvar ForLoopSourcedataIndexStart=ForLoopMetaData.ForLoopSourcedataIndexStart\nvar Cycle=ForLoopMetaData.Cycle\nvar OriginalIterator=ForLoopMetaData.OriginalIterator\nvar IterationStart=ForLoopMetaData.IterationStart\nvar iterator=ForLoopMetaData.iterator\nvar element=ForLoopMetaData.element\nvar elementValue=ForLoopMetaData.elementValue\n\n                    function getSourcedata(startIndex, functionSourceData, check, StoreResult) {\n                        //console.log('startIndex, functionSourceData, check, StoreResult: ', startIndex, functionSourceData, check, StoreResult);\n\n\n\n                        let Returnvalue = HandleBlocks(functionSourceData, startIndex, StoreResult)\n                        StoreResult = Returnvalue.StoreResult\n\n\n                        return StoreResult\n\n\n                    }\n\n\n\n\n                    ForLoopSourcedataIndexStart = getLoopIndexStart(functionSourceData, i, '{', ForLoopSourcedataIndexStart)\n                    \n                    //\n\n                    SourcedataTokens = getSourcedata(ForLoopSourcedataIndexStart, functionSourceData, '}', SourcedataTokens)\n                    \n                    \n                    \n                    SourcedataTokens.forEach(el=>{\n\nel.isNestedLoop=false\n\n                    })\n\n\n                    let FindNestedLoop= SourcedataTokens.find(el=> el.type=='ForLoopStart')\n                   if(FindNestedLoop!=undefined)\n                   {\n  \n                       let NestedLoopindex=SourcedataTokens.indexOf(FindNestedLoop)+2\n                       let NestedLooplength=(SourcedataTokens[NestedLoopindex].EndIndex-SourcedataTokens[NestedLoopindex].startIndex)+1\n\n                       \n                       for(let x=NestedLoopindex;x<NestedLoopindex+NestedLooplength;x++)\n                       {\n\n\n                            SourcedataTokens[x].isNestedLoop=true\n\n                       }\n\n\n                   }\n\n\n\n                  \n\n\n\n\n                    if (element.includes('(') && element.includes(','))\n                    \n\n                    {\n\n                        FlagPrimalLoop = 1\n\n\n                    }\n\n\n\n                 \n               // console.log('Cycle: ', Cycle,IterationStart);\n\n\n                    //Iterating over forloop sourcedata\n                    //this line 'iterator <= Cycle' determines start of the loop and the duration of the loop\n\n                    for (iterator = IterationStart; iterator <= Cycle; iterator++) {\n                        \n\n\n                        let forloopindex = CompleteTokenValueList.find(el => el.name == OriginalIterator)\n                        \n                        \n\n\n\n                        forloopindex.value = iterator\n\n                        //console.log('CompleteTokenValueList: ', CompleteTokenValueList);\n\n                        //flag to avoid running this code if loop is primal because the payload needs to be compeltely different\n                        if (FlagPrimalLoop = 0) {\n                            ForLoopArrayorStringOutput(elementValue, iterator, CompleteTokenValueList, this)\n\n                        }\n\n\n                        for (let i = 0; i < SourcedataTokens.length; i++)\n\n\n                        {\n\n\nlet isNested=SourcedataTokens[i].isNestedLoop\n\n\n\n\nif (SourcedataTokens[i].type == 'ForLoopStart') {\n\n                           var NestedFlagPrimalLoop = 0\n                   \n                    var NestedSourcedataTokens = []      \n\n                    let NestedForLoopMetaData= ForLoopSetMetadata(SourcedataTokens,i,CompleteTokenValueList)\n     \n   //  console.log('NestedForLoopMetaData: ', NestedForLoopMetaData);\n\nvar NestedForLoopSourcedataIndexStart=NestedForLoopMetaData.ForLoopSourcedataIndexStart\nvar NestedCycle=NestedForLoopMetaData.Cycle+1\nvar NestedOriginalIterator=NestedForLoopMetaData.OriginalIterator\nvar NestedIterationStart=NestedForLoopMetaData.IterationStart\nvar Nestediterator=NestedForLoopMetaData.iterator\nvar Nestedelement=NestedForLoopMetaData.element\nvar NestedelementValue=NestedForLoopMetaData.elementValue\n\n                   \n                    function getSourcedata(startIndex, SourcedataTokens, check, StoreResult) {\n                        //console.log('startIndex, SourcedataTokens, check, StoreResult: ', startIndex, SourcedataTokens, check, StoreResult);\n\n\n\n                        let Returnvalue = HandleBlocks(SourcedataTokens, startIndex, StoreResult)\n                        StoreResult = Returnvalue.StoreResult\n\n\n                        return StoreResult\n\n\n                    }\n\n\n\n\n                    NestedForLoopSourcedataIndexStart = getLoopIndexStart(SourcedataTokens, i, '{', NestedForLoopSourcedataIndexStart)\n                    //console.log('ForLoopSourcedataIndexStart: ', ForLoopSourcedataIndexStart);\n                    \n                    \n\n                   NestedSourcedataTokens = getSourcedata(NestedForLoopSourcedataIndexStart, SourcedataTokens, '}', NestedSourcedataTokens)\n                   //console.log('NestedSourcedataTokens: ', NestedSourcedataTokens);\n                   \n\n                          \n                   \n                   \n for (Nestediterator = 0; Nestediterator <NestedCycle; Nestediterator++) {\n{\n\nlet y = Nestediterator\n\n\nlet Nestedforloopindex = CompleteTokenValueList.find(el => el.name == NestedOriginalIterator)\n                        //console.log('forloopindex: ', forloopindex);\n\n\n\n                        Nestedforloopindex.value = y\n\n\nfor(let index=0;index<NestedSourcedataTokens.length;index++)\n{\n\n\nlet el= NestedSourcedataTokens[index]\n\nif(el.value== 'प्रिंट')\n\n{\n\n\n\nIfTokenPrint(NestedSourcedataTokens,CompleteTokenValueList, index, this, y, NestedOriginalIterator)\n\n\n}\n\n else if (el.value == '=' && el.isNestedLoop==true) {\n     \n\n                                //assigning values to variables\n                           \n\n                                AssignorUpdateValues(NestedSourcedataTokens, index, CompleteTokenValueList, y, NestedOriginalIterator)\n\n                            }\n\n\n                            else  if (el.type == 'condition' && el.isNestedLoop==true)\n\n\n\n                            {\n\n\n\n\n                                //console.log('SourcedataTokens[i]: ', SourcedataTokens[i],i);\n\n                                let ConditionStartIndex = index\n                                let condition = NestedSourcedataTokens[index].value\n                                //HandleConditions evaluates condition and return the index of from where printing should resume\n                                //value of i depends on the conditions\n\n                                if (condition.includes('||') || condition.includes('&&'))\n\n                                {\n\n\n                                    let value = GetConditionValue(condition, CompleteTokenValueList, index)\n                                    \n\n\n\n                                    if (value == false) {\n\n\n\n                                        let BlockLength = 0\n                                        let BlockStart = 0\n\n                                        while (NestedSourcedataTokens[index].value != '{')\n\n                                        {\n\n                                            if (NestedSourcedataTokens[index + 1].value == '{')\n\n                                            {\n\n\n                                                BlockLength = NestedSourcedataTokens[index + 1].EndIndex - NestedSourcedataTokens[index + 1].startIndex\n\n                                                index = BlockLength + index + 1\n\n\n\n\n                                                break;\n\n                                            }\n\n\n\n                                            index++\n                                        }\n\n                                    } else {\n\n\n                                        index = index\n\n\n                                    }\n\n\n\n\n                                } else {\nconsole.log('NestedSourcedataTokens: ', NestedSourcedataTokens);\n                                console.log('index : ', index );\n\n\n                                    let x= HandleConditions(NestedSourcedataTokens, index, CompleteTokenValueList);\n                                    console.log('x: ', x);\n                                    \n\n\n\n                                    if (x != undefined) {\n\n\n                                        index = x\n                                        \n\n\n                                    } else {\n                                        index = ConditionStartIndex\n                                        //console.log('i: ', i);\n                                    }\n\n                                }\n\n                                console.log('index : ', index );\n\n\n\n\n                            }\n\n\n                        \n                    //console.log('i: ', i);\n\n                   // i = i + NestedSourcedataTokens.length\n                    //console.log('i: ', i);\n\n\n else  if (el.type == \"SetArrayIndexValue\" && el.isNestedLoop==true)\n\n\n\n\n                            {\n\n                                let Value = el.value\n                                //console.log('SourcedataTokens: ', SourcedataTokens);\n                                //                              console.log('Value: ', Value,i);\n\n                                let ValueToSet = el.ValueToSet\n\n                                let element = RemoveBrackets(Value);\n\n                                var ArrayElement = ''\n\n\n                                //Seprating out index identifier. xyz from Array[xyz]\n\n                                element = element.replace(']', '')\n\n\n                                let Split = element.split('[')\n                                \n\n\n\n                                // run if we need to set direct Array element value. like Array[2]= xyx                    \n                                if (isNumber(Split[1])) {\n\n                                    Split = Split.ioin('[')\n                                    \n                                    //\n\n                                    Split = Split + ']'\n\n\n                                    ArrayElement = Split\n                                    // console.log('ValueToSet: ', ValueToSet);\n\n                                    NewValueToSet = CalculateValues(ValueToSet, index, updated_tokens)\n\n\n\n                                    SetArrayorStringElement(ArrayElement, updated_tokens, false, NewValueToSet, tokens)\n\n\n\n\n                                }\n\n                                // run if we need to dynamically set Array element value. like Array[i]= xyx\n                                //CreateArrayElement function will create dynamic Array values. like Array[0], Array[1] etc.                    \n                                else {\n\n\n                                    let index = Split[1]\n\n\n                                    // setting iterator as per user input \n                                    //for iterator like count=count + 1, Array[count]\n\n                                    let newInterator = 0\n                                    let token = updated_tokens.find(el => el.name == index)\n\n                                    if (token != undefined) {\n\n                                        newInterator = token.value\n\n                                    } else {\n\n                                        newInterator = iterator\n                                    }\n\n\n\n                                    ArrayElement = CreateArrayElement(Value, newInterator)\n\n\n\n\n                                }\n\n\n                                // this code is written to find operations like Array[a]= a*100+age*a. notice a\n                                //find a way to simplify this in long term\n\n                                let data = ValueToSet\n\n\n                                data = data.split('*').toString();\n                                data = data.split('+').toString();\n                                data = data.split('-').toString();\n                                data = data.split('/').toString();\n                                data = data.split(',')\n                                //console.log('data: ', ArrayElement, data, Split);\n\n\n\n\n                                //building a new value to convert a*100+age*a into 5*100+age*a and then sending it to CalculateValues()\n                                let NewValueToSet = ''\n\n                                // \n\n\n                                if (data.includes(Split[1]) && data.length > 1)\n\n                                {\n\n\n                                    //we have operations like Array[a]= a*100+age*a. notice a\n\n                                    for (let m = 0; m < ValueToSet.length; m++)\n\n                                    {\n\n                                        if (ValueToSet[m] == Split[1] && !(/^[a-z]+$/i.test(ValueToSet[m + 1])))\n\n                                        {\n\n\n\n                                            // value is been set . replacing index value a with iteartor value 0,1,2, etc.   \n                                            NewValueToSet = NewValueToSet + iterator\n\n                                        } else {\n\n                                            NewValueToSet = NewValueToSet + ValueToSet[m]\n\n\n\n                                        }\n\n\n\n                                    }\n\n                                    let iterat = false\n                                    //gave it a different name so it would not fuck up with for loop iterator\n\n                                    NewValueToSet = CalculateValues(NewValueToSet, j, updated_tokens, )\n\n\n\n\n                                    // \n\n                                    SetArrayorStringElement(ArrayElement, updated_tokens, iterat, NewValueToSet, tokens)\n\n\n\n\n                                }\n\n\n                                // this condition enables program to only run  Array[a]= xyz when iterator is a. It disallows running Array[blablabla]=xyz\n                                if (OriginalIterator == Split[1]) {\n\n\n\n                                    //  console.log('ValueToSet: ', ValueToSet);\n\n                                    if (Split[1] == ValueToSet) {\n\n\n                                        let iterator = true\n\n                                        SetArrayorStringElement(ArrayElement, updated_tokens, iterator, ValueToSet, tokens)\n\n\n\n                                    }\n\n                                    // for operations like Array[a]=ageone*100\n\n\n                                    if (!data.includes(Split[1]) && OriginalIterator == Split[1]) {\n\n\n\n                                        let iterator = false\n\n                                        ValueToSet = CalculateValues(ValueToSet, j, updated_tokens)\n                                        // console.log('ValueToSet: ', ValueToSet);\n\n                                        // \n\n                                        SetArrayorStringElement(ArrayElement, updated_tokens, iterator, ValueToSet, tokens)\n\n\n\n                                    }\n\n\n\n\n                                    //SetArrayorStringElement(ArrayElement,updated_tokens, iterator, ValueToSet, tokens)\n\n\n\n                                }\n\n\n                                //might have to add more conditions in the future\n                                else {\n\n                                    let iterator = false\n\n                                    ValueToSet = CalculateValues(ValueToSet, j, updated_tokens)\n                                    //   console.log('ValueToSet: ', ValueToSet);\n\n                                    // \n\n                                    SetArrayorStringElement(ArrayElement, updated_tokens, iterator, ValueToSet, tokens)\n\n\n\n\n                                }\n\n\n\n\n                            }\n\n\n\n\n\n\n\n\n}\n\n\n\n\n\n\n\n}\n\n\n\n\n\n\n                            }\n\n\n\n\n}\n\n\n\n\n\n\n\n                            else if (SourcedataTokens[i].value == '='  && isNested==false) {\n                                \n\n                                //assigning values to variables\n\n\n                                AssignorUpdateValues(SourcedataTokens, i, CompleteTokenValueList, iterator, OriginalIterator)\n                                \n\n\n\n                            }\n\n\n\n\n                            //Handling print statements in for loop\n\n                          else  if (SourcedataTokens[i].value == 'प्रिंट' && isNested==false)\n\n\n\n\n                            {\n\n\n                                //for operations like print(array[3])\n\n                                // console.log('for looop prints: ', functionSourceData[i],i);\n\n\n                                IfTokenPrint(SourcedataTokens,CompleteTokenValueList, i, this, iterator, OriginalIterator)\n\n                                //\n\n\n                            }\n\n\n\n                            //Handling set array element statements in for loop\n                          else  if (SourcedataTokens[i].type == \"SetArrayIndexValue\")\n\n\n\n\n                            {\n\n                                let Value = SourcedataTokens[i].value\n                                //console.log('SourcedataTokens: ', SourcedataTokens);\n                                //                              console.log('Value: ', Value,i);\n\n                                let ValueToSet = SourcedataTokens[i].ValueToSet\n\n                                let element = RemoveBrackets(Value);\n\n                                var ArrayElement = ''\n\n\n                                //Seprating out index identifier. xyz from Array[xyz]\n\n                                element = element.replace(']', '')\n\n\n                                let Split = element.split('[')\n\n\n\n                                // run if we need to set direct Array element value. like Array[2]= xyx                    \n                                if (isNumber(Split[1])) {\n\n                                    Split = Split.join('[')\n                                    //\n\n                                    Split = Split + ']'\n\n\n                                    ArrayElement = Split\n                                    // console.log('ValueToSet: ', ValueToSet);\n\n                                    NewValueToSet = CalculateValues(ValueToSet, j, updated_tokens, )\n\n\n\n                                    SetArrayorStringElement(ArrayElement, updated_tokens, false, NewValueToSet, tokens)\n\n\n\n\n                                }\n\n                                // run if we need to dynamically set Array element value. like Array[i]= xyx\n                                //CreateArrayElement function will create dynamic Array values. like Array[0], Array[1] etc.                    \n                                else {\n\n\n                                    let index = Split[1]\n\n\n                                    // setting iterator as per user input \n                                    //for iterator like count=count + 1, Array[count]\n\n                                    let newInterator = 0\n                                    let token = updated_tokens.find(el => el.name == index)\n\n                                    if (token != undefined) {\n\n                                        newInterator = token.value\n\n                                    } else {\n\n                                        newInterator = iterator\n                                    }\n\n\n\n                                    ArrayElement = CreateArrayElement(Value, newInterator)\n\n\n\n\n                                }\n\n\n                                // this code is written to find operations like Array[a]= a*100+age*a. notice a\n                                //find a way to simplify this in long term\n\n                                let data = ValueToSet\n\n\n                                data = data.split('*').toString();\n                                data = data.split('+').toString();\n                                data = data.split('-').toString();\n                                data = data.split('/').toString();\n                                data = data.split(',')\n                                //console.log('data: ', ArrayElement, data, Split);\n\n\n\n\n                                //building a new value to convert a*100+age*a into 5*100+age*a and then sending it to CalculateValues()\n                                let NewValueToSet = ''\n\n                                // \n\n\n                                if (data.includes(Split[1]) && data.length > 1)\n\n                                {\n\n\n                                    //we have operations like Array[a]= a*100+age*a. notice a\n\n                                    for (let m = 0; m < ValueToSet.length; m++)\n\n                                    {\n\n                                        if (ValueToSet[m] == Split[1] && !(/^[a-z]+$/i.test(ValueToSet[m + 1])))\n\n                                        {\n\n\n\n                                            // value is been set . replacing index value a with iteartor value 0,1,2, etc.   \n                                            NewValueToSet = NewValueToSet + iterator\n\n                                        } else {\n\n                                            NewValueToSet = NewValueToSet + ValueToSet[m]\n\n\n\n                                        }\n\n\n\n                                    }\n\n                                    let iterat = false\n                                    //gave it a different name so it would not fuck up with for loop iterator\n\n                                    NewValueToSet = CalculateValues(NewValueToSet, j, updated_tokens, )\n\n\n\n\n                                    // \n\n                                    SetArrayorStringElement(ArrayElement, updated_tokens, iterat, NewValueToSet, tokens)\n\n\n\n\n                                }\n\n\n                                // this condition enables program to only run  Array[a]= xyz when iterator is a. It disallows running Array[blablabla]=xyz\n                                if (OriginalIterator == Split[1]) {\n\n\n\n                                    //  console.log('ValueToSet: ', ValueToSet);\n\n                                    if (Split[1] == ValueToSet) {\n\n\n                                        let iterator = true\n\n                                        SetArrayorStringElement(ArrayElement, updated_tokens, iterator, ValueToSet, tokens)\n\n\n\n                                    }\n\n                                    // for operations like Array[a]=ageone*100\n\n\n                                    if (!data.includes(Split[1]) && OriginalIterator == Split[1]) {\n\n\n\n                                        let iterator = false\n\n                                        ValueToSet = CalculateValues(ValueToSet, j, updated_tokens)\n                                        // console.log('ValueToSet: ', ValueToSet);\n\n                                        // \n\n                                        SetArrayorStringElement(ArrayElement, updated_tokens, iterator, ValueToSet, tokens)\n\n\n\n                                    }\n\n\n\n\n                                    //SetArrayorStringElement(ArrayElement,updated_tokens, iterator, ValueToSet, tokens)\n\n\n\n                                }\n\n\n                                //might have to add more conditions in the future\n                                else {\n\n                                    let iterator = false\n\n                                    ValueToSet = CalculateValues(ValueToSet, j, updated_tokens)\n                                    //   console.log('ValueToSet: ', ValueToSet);\n\n                                    // \n\n                                    SetArrayorStringElement(ArrayElement, updated_tokens, iterator, ValueToSet, tokens)\n\n\n\n\n                                }\n\n\n\n\n                            }\n\n\n\n                            // Handling CONDITIONAL statements in for loop\n\n                          else  if (SourcedataTokens[i].type == 'condition')\n\n\n\n                            {\n\n\n\n\n                                //console.log('SourcedataTokens[i]: ', SourcedataTokens[i],i);\n\n                                let ConditionStartIndex = i\n                                let condition = SourcedataTokens[i].value\n                                //HandleConditions evaluates condition and return the index of from where printing should resume\n                                //value of i depends on the conditions\n\n                                if (condition.includes('||') || condition.includes('&&'))\n\n                                {\n\n\n                                    let value = GetConditionValue(condition, updated_tokens, i)\n                                    \n\n\n\n                                    if (value == false) {\n\n\n\n                                        let BlockLength = 0\n                                        let BlockStart = 0\n\n                                        while (SourcedataTokens[i].value != '{')\n\n                                        {\n\n                                            if (SourcedataTokens[i + 1].value == '{')\n\n                                            {\n\n\n                                                BlockLength = SourcedataTokens[i + 1].EndIndex - SourcedataTokens[i + 1].startIndex\n\n                                                i = BlockLength + i + 1\n\n\n\n\n                                                break;\n\n                                            }\n\n\n\n                                            i++\n                                        }\n\n                                    } else {\n\n\n                                        i = i\n\n\n                                    }\n\n\n\n\n                                } else {\n\n\n                                    i = HandleConditions(SourcedataTokens, i, CompleteTokenValueList);\n\n\n\n                                    if (i != undefined) {\n\n\n                                        i = i\n\n\n                                    } else {\n                                        i = ConditionStartIndex\n                                        //console.log('i: ', i);\n                                    }\n\n                                }\n\n\n\n\n                            }\n\n\n                        }\n\n\n\n                    }\n                    //console.log('j: ', j);\n\n                    i = i + SourcedataTokens.length\n                    //console.log('j: ', j);\n\n\n                }\n\n\n\n\n\n\n\n\n\n\n                                           else  if (functionSourceData[i].type == \"SetArrayIndexValue\")\n\n\n\n\n                            {\n\n                                let Value = functionSourceData[i].value\n                                \n                                //console.log('SourcedataTokens: ', SourcedataTokens);\n                                //                              console.log('Value: ', Value,i);\n\n                                let ValueToSet = functionSourceData[i].ValueToSet\n\n                                let element = RemoveBrackets(Value);\n\n                                var ArrayElement = ''\n\n\n                                //Seprating out index identifier. xyz from Array[xyz]\n\n                                element = element.replace(']', '')\n\n\n                                let Split = element.split('[')\n\n\n\n                                // run if we need to set direct Array element value. like Array[2]= xyx                    \n                                if (isNumber(Split[1])) {\n\n                                    Split = Split.join('[')\n                                    //\n\n                                    Split = Split + ']'\n\n\n                                    ArrayElement = Split\n                                    // console.log('ValueToSet: ', ValueToSet);\n\n                                    NewValueToSet = CalculateValues(ValueToSet, i, CompleteTokenValueList, )\n\n\n\n                                    SetArrayorStringElement(ArrayElement, CompleteTokenValueList, false, NewValueToSet, tokens)\n\n\n\n\n                                }\n\n                                // run if we need to dynamically set Array element value. like Array[i]= xyx\n                                //CreateArrayElement function will create dynamic Array values. like Array[0], Array[1] etc.                    \n                                else {\n\n\n                                    let index = Split[1]\n\n\n                                    // setting iterator as per user input \n                                    //for iterator like count=count + 1, Array[count]\n\n                                    let newInterator = 0\n                                    let token = CompleteTokenValueList.find(el => el.name == index)\n\n                                    if (token != undefined) {\n\n                                        newInterator = token.value\n\n                                    } else {\n\n                                        newInterator = iterator\n                                    }\n\n\n\n                                    ArrayElement = CreateArrayElement(Value, newInterator)\n                                    console.log('ArrayElement: ', ArrayElement);\n\n\n\n\n                                }\n\n\n                                // this code is written to find operations like Array[a]= a*100+age*a. notice a\n                                //find a way to simplify this in long term\n\n                                let data = ValueToSet\n\n\n                                data = data.split('*').toString();\n                                data = data.split('+').toString();\n                                data = data.split('-').toString();\n                                data = data.split('/').toString();\n                                data = data.split(',')\n                                //console.log('data: ', ArrayElement, data, Split);\n\n\n\n\n                                //building a new value to convert a*100+age*a into 5*100+age*a and then sending it to CalculateValues()\n                                let NewValueToSet = ''\n\n                                // \n\n\n                                if (data.includes(Split[1]) && data.length > 1)\n\n                                {\n\n\n                                    //we have operations like Array[a]= a*100+age*a. notice a\n\n                                    for (let m = 0; m < ValueToSet.length; m++)\n\n                                    {\n\n                                        if (ValueToSet[m] == Split[1] && !(/^[a-z]+$/i.test(ValueToSet[m + 1])))\n\n                                        {\n\n\n\n                                            // value is been set . replacing index value a with iteartor value 0,1,2, etc.   \n                                            NewValueToSet = NewValueToSet + iterator\n\n                                        } else {\n\n                                            NewValueToSet = NewValueToSet + ValueToSet[m]\n\n\n\n                                        }\n\n\n\n                                    }\n\n                                    let iterat = false\n                                    //gave it a different name so it would not fuck up with for loop iterator\n\n                                    NewValueToSet = CalculateValues(NewValueToSet, i, CompleteTokenValueList, )\n\n\n\n\n                                    // \n\n                                    SetArrayorStringElement(ArrayElement, CompleteTokenValueList, iterat, NewValueToSet, tokens)\n\n\n\n\n                                }\n\n\n                                // this condition enables program to only run  Array[a]= xyz when iterator is a. It disallows running Array[blablabla]=xyz\n                                if (OriginalIterator == Split[1]) {\n\n\n\n                                    //  console.log('ValueToSet: ', ValueToSet);\n\n                                    if (Split[1] == ValueToSet) {\n\n\n                                        let iterator = true\n\n                                        SetArrayorStringElement(ArrayElement, CompleteTokenValueList, iterator, ValueToSet, tokens)\n\n\n\n                                    }\n\n                                    // for operations like Array[a]=ageone*100\n\n\n                                    if (!data.includes(Split[1]) && OriginalIterator == Split[1]) {\n\n\n\n                                        let iterator = false\n\n                                        ValueToSet = CalculateValues(ValueToSet, i, CompleteTokenValueList)\n                                        // console.log('ValueToSet: ', ValueToSet);\n\n                                        // \n\n                                        SetArrayorStringElement(ArrayElement, CompleteTokenValueList, iterator, ValueToSet, tokens)\n\n\n\n                                    }\n\n\n\n\n                                    //SetArrayorStringElement(ArrayElement,CompleteTokenValueList, iterator, ValueToSet, tokens)\n\n\n\n                                }\n\n\n                                //might have to add more conditions in the future\n                                else {\n\n                                    let iterator = false\n\n                                    ValueToSet = CalculateValues(ValueToSet, i, CompleteTokenValueList)\n                                    //   console.log('ValueToSet: ', ValueToSet);\n\n                                    // \n\n                                    SetArrayorStringElement(ArrayElement, CompleteTokenValueList, iterator, ValueToSet, tokens)\n\n\n\n\n                                }\n\n\n\n\n                            }\n\n\n\n\n\n\n else if (functionSourceData[i].type == 'WhileLoopStart') {\n     console.log('functionSourceData: ', functionSourceData);\n\n\n                    let TokensCurrentIndex = i + 3\n\n                    \n\n                    let ConditionValue = false\n\n                    let element = functionSourceData[i + 1].value\n\n                    let ExtratcedVariable = []\n\n                    let variable = ''\n                    let WhileLoopSourcedataIndexStart = 0\n                    let WhileLoopSourcedataTokens = []\n\n\n\n                    for (let i = 0; i < element.length; i++) {\n                        let x = element.charAt(i)\n\n\n                        if (isVariable(x))\n\n                        {\n\n                            variable = variable + x\n\n\n\n                        }\n                        if (!isVariable(element.charAt(i + 1)) && isVariable(x)) {\n\n                            let token = CompleteTokenValueList.find(el => el.name == variable)\n\n                            ExtratcedVariable.push({\n                                variable: variable,\n                                value: token.value\n\n                            })\n\n\n                            variable = ''\n\n\n                        }\n\n                    }\n\n\n\n\n                    function getWhileLoopSourcedata(startIndex, functionSourceData, check, StoreResult) {\n\n\n\n                        StoreResult = HandleBlocks(functionSourceData, startIndex, StoreResult)\n\n\n\n                        return StoreResult\n\n\n\n\n                    }\n\n\n\n\n                    WhileLoopSourcedataIndexStart = getLoopIndexStart(functionSourceData, i, '{', WhileLoopSourcedataIndexStart)\n                    console.log('WhileLoopSourcedataIndexStart: ', WhileLoopSourcedataIndexStart);\n                    //\n                    WhileLoopSourcedataTokens = getWhileLoopSourcedata(WhileLoopSourcedataIndexStart, functionSourceData, '}', WhileLoopSourcedataTokens).StoreResult\n                    console.log('WhileLoopSourcedataTokens: ', WhileLoopSourcedataTokens.length);\n\n\n\n\n                    //constantly accessing the conditionvalue\n\n                    while (GetConditionValue(element, CompleteTokenValueList, j + 1)) {\n\n                        for (let i = 0; i < WhileLoopSourcedataTokens.length; i++) {\n                           \n\n\n\n\n                            //SECTION while loop context\n\n                            if (WhileLoopSourcedataTokens[i].value == '=') {\n\n\n\n\n                                AssignorUpdateValues(WhileLoopSourcedataTokens, i, CompleteTokenValueList)\n\n                                //\n\n                                // \n\n\n                            }\n\n\n\n                            // Handling CONDITIONAL statements in for loop\n\n                        else if (WhileLoopSourcedataTokens[i].type == 'condition')\n\n                            {\n\n\n\n\n                               let index= HandleConditions(WhileLoopSourcedataTokens, i, CompleteTokenValueList)\n                             \n                             if(index!=undefined)\n                             {\ni=index\n\n\n                             }\n\n\n\n                             else{\n                                 i=i\n                             }\n                               \n                              \n\n                                 \n                                   \n                     \n\n\n                                }\n\n\n                           \n                        \n\n\n\n\n                        else  if (WhileLoopSourcedataTokens[i].value == 'प्रिंट')\n                          \n                          \n\n\n\n                            {\n\n\n                                IfTokenPrint(WhileLoopSourcedataTokens,CompleteTokenValueList, i, this) //for operations like print(array[3])\n\n\n\n\n                            }\n\n\n\n                                           else  if (WhileLoopSourcedataTokens[i].type == \"SetArrayIndexValue\")\n\n\n\n\n                            {\n\n                                let Value = WhileLoopSourcedataTokens[i].value\n                                \n                                //console.log('SourcedataTokens: ', SourcedataTokens);\n                                //                              console.log('Value: ', Value,i);\n\n                                let ValueToSet = WhileLoopSourcedataTokens[i].ValueToSet\n\n                                let element = RemoveBrackets(Value);\n\n                                var ArrayElement = ''\n\n\n                                //Seprating out index identifier. xyz from Array[xyz]\n\n                                element = element.replace(']', '')\n\n\n                                let Split = element.split('[')\n\n\n\n                                // run if we need to set direct Array element value. like Array[2]= xyx                    \n                                if (isNumber(Split[1])) {\n\n                                    Split = Split.join('[')\n                                    //\n\n                                    Split = Split + ']'\n\n\n                                    ArrayElement = Split\n                                    // console.log('ValueToSet: ', ValueToSet);\n\n                                    NewValueToSet = CalculateValues(ValueToSet, i, CompleteTokenValueList, )\n\n\n\n                                    SetArrayorStringElement(ArrayElement, CompleteTokenValueList, false, NewValueToSet, tokens)\n\n\n\n\n                                }\n\n                                // run if we need to dynamically set Array element value. like Array[i]= xyx\n                                //CreateArrayElement function will create dynamic Array values. like Array[0], Array[1] etc.                    \n                                else {\n\n\n                                    let index = Split[1]\n\n\n                                    // setting iterator as per user input \n                                    //for iterator like count=count + 1, Array[count]\n\n                                    let newInterator = 0\n                                    let token = CompleteTokenValueList.find(el => el.name == index)\n\n                                    if (token != undefined) {\n\n                                        newInterator = token.value\n\n                                    } else {\n\n                                        newInterator = iterator\n                                    }\n\n\n\n                                    ArrayElement = CreateArrayElement(Value, newInterator)\n                                    console.log('ArrayElement: ', ArrayElement);\n\n\n\n\n                                }\n\n\n                                // this code is written to find operations like Array[a]= a*100+age*a. notice a\n                                //find a way to simplify this in long term\n\n                                let data = ValueToSet\n\n\n                                data = data.split('*').toString();\n                                data = data.split('+').toString();\n                                data = data.split('-').toString();\n                                data = data.split('/').toString();\n                                data = data.split(',')\n                                //console.log('data: ', ArrayElement, data, Split);\n\n\n\n\n                                //building a new value to convert a*100+age*a into 5*100+age*a and then sending it to CalculateValues()\n                                let NewValueToSet = ''\n\n                                // \n\n\n                                if (data.includes(Split[1]) && data.length > 1)\n\n                                {\n\n\n                                    //we have operations like Array[a]= a*100+age*a. notice a\n\n                                    for (let m = 0; m < ValueToSet.length; m++)\n\n                                    {\n\n                                        if (ValueToSet[m] == Split[1] && !(/^[a-z]+$/i.test(ValueToSet[m + 1])))\n\n                                        {\n\n\n\n                                            // value is been set . replacing index value a with iteartor value 0,1,2, etc.   \n                                            NewValueToSet = NewValueToSet + iterator\n\n                                        } else {\n\n                                            NewValueToSet = NewValueToSet + ValueToSet[m]\n\n\n\n                                        }\n\n\n\n                                    }\n\n                                    let iterat = false\n                                    //gave it a different name so it would not fuck up with for loop iterator\n\n                                    NewValueToSet = CalculateValues(NewValueToSet, i, CompleteTokenValueList, )\n\n\n\n\n                                    // \n\n                                    SetArrayorStringElement(ArrayElement, CompleteTokenValueList, iterat, NewValueToSet, tokens)\n\n\n\n\n                                }\n\n\n                                // this condition enables program to only run  Array[a]= xyz when iterator is a. It disallows running Array[blablabla]=xyz\n                                if (OriginalIterator == Split[1]) {\n\n\n\n                                    //  console.log('ValueToSet: ', ValueToSet);\n\n                                    if (Split[1] == ValueToSet) {\n\n\n                                        let iterator = true\n\n                                        SetArrayorStringElement(ArrayElement, CompleteTokenValueList, iterator, ValueToSet, tokens)\n\n\n\n                                    }\n\n                                    // for operations like Array[a]=ageone*100\n\n\n                                    if (!data.includes(Split[1]) && OriginalIterator == Split[1]) {\n\n\n\n                                        let iterator = false\n\n                                        ValueToSet = CalculateValues(ValueToSet, i, CompleteTokenValueList)\n                                        // console.log('ValueToSet: ', ValueToSet);\n\n                                        // \n\n                                        SetArrayorStringElement(ArrayElement, CompleteTokenValueList, iterator, ValueToSet, tokens)\n\n\n\n                                    }\n\n\n\n\n                                    //SetArrayorStringElement(ArrayElement,CompleteTokenValueList, iterator, ValueToSet, tokens)\n\n\n\n                                }\n\n\n                                //might have to add more conditions in the future\n                                else {\n\n                                    let iterator = false\n\n                                    ValueToSet = CalculateValues(ValueToSet, i, CompleteTokenValueList)\n                                    //   console.log('ValueToSet: ', ValueToSet);\n\n                                    // \n\n                                    SetArrayorStringElement(ArrayElement, CompleteTokenValueList, iterator, ValueToSet, tokens)\n\n\n\n\n                                }\n\n\n\n\n                            }\n\n\n                     \n                        }\n\n\n                    }\n\n                   i=i+1+WhileLoopSourcedataTokens.length+1\n                   console.log('j: ', i);\n                }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n}\n\n\n\n\n\n  }                     \n\n\n//skipping parsing index so that function context is run by single entity and global execution doesn't run this code too\n    j=mutable_tokens[j+1].EndIndex\n\n\n\n\n\n}\n\n              else  if (tokenType == 'condition')\n\n                {\n\n\n\n\n                    let element = mutable_tokens[j].value\n\n                    //this function is the first step to calculate value of operations like अगर (ageone==10 && AverageAge<1000 && agetwo>100 || ageone==10) OR (ageone==10 )\n\n                    let ConditionValue = GetConditionValue(element, updated_tokens, j)\n                    // console.log('ConditionValue: ', ConditionValue);\n                    //  console.log('j: ',j);\n\n\n\n\n                    //if value is false, just skip the if loop context, if not it will be ran in final print module\n\n                    if (ConditionValue == false) {\n\n                        let InitializeLoop = tokens.indexOf(mutable_tokens[j])\n\n                        //Handle Blocks is a function which takes care of nested block by taking care of nested { and } brackets\n                        //it uses the stack to push and pop brackets to accurately identify start and the end of the block\n                        let Returnvalue = HandleBlocks(mutable_tokens, j)\n\n                        j = Returnvalue.j\n                    }\n\n\n\n\n                }\n\n               else if (token == 'प्रिंट')\n\n\n                {\n\n                    //console.log('normal prints', mutable_tokens[j+1]);\n                    IfTokenPrint(mutable_tokens,updated_tokens, j, this) //for operations like print(array[3])\n\n\n\n\n                }\n\n               else if (tokenType == 'WhileLoopStart') {\n\n\n                    let TokensCurrentIndex = j + 3\n\n                    let ConditionValue = false\n\n                    let element = mutable_tokens[j + 1].value\n\n                    let ExtratcedVariable = []\n\n                    let variable = ''\n                    let WhileLoopSourcedataIndexStart = 0\n                    let WhileLoopSourcedataTokens = []\n\n\n\n                    for (let i = 0; i < element.length; i++) {\n                        let x = element.charAt(i)\n\n\n                        if (isVariable(x))\n\n                        {\n\n                            variable = variable + x\n\n\n\n                        }\n                        if (!isVariable(element.charAt(i + 1)) && isVariable(x)) {\n\n                            let token = updated_tokens.find(el => el.name == variable)\n\n                            ExtratcedVariable.push({\n                                variable: variable,\n                                value: token.value\n\n                            })\n\n\n                            variable = ''\n\n\n                        }\n\n                    }\n\n\n\n\n                    function getWhileLoopSourcedata(startIndex, mutable_tokens, check, StoreResult) {\n\n\n\n                        StoreResult = HandleBlocks(mutable_tokens, startIndex, StoreResult)\n\n\n\n                        return StoreResult\n\n\n\n\n                    }\n\n\n\n\n                    WhileLoopSourcedataIndexStart = getLoopIndexStart(mutable_tokens, j, '{', WhileLoopSourcedataIndexStart)\n                    //\n                    WhileLoopSourcedataTokens = getWhileLoopSourcedata(WhileLoopSourcedataIndexStart, mutable_tokens, '}', WhileLoopSourcedataTokens).StoreResult\n\n\n\n\n                    //constantly accessing the conditionvalue\n\n                    while (GetConditionValue(element, updated_tokens, j + 1)) {\n\n                        for (let i = 0; i < WhileLoopSourcedataTokens.length; i++) {\n                           \n\n\n\n\n                            //SECTION while loop context\n\n                            if (WhileLoopSourcedataTokens[i].value == '=') {\n\n\n\n\n                                AssignorUpdateValues(WhileLoopSourcedataTokens, i, updated_tokens)\n\n                                //\n\n                                // \n\n\n                            }\n\n\n\n                            // Handling CONDITIONAL statements in for loop\n\n                        else if (WhileLoopSourcedataTokens[i].type == 'condition')\n\n                            {\n\n\n\n\n                               let index= HandleConditions(WhileLoopSourcedataTokens, i, updated_tokens)\n                               console.log('index: ', index);\n                             \n                             if(index!=undefined)\n                             {\ni=index\n\n\n                             }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                             else{\n                                 i=i\n                             }\n                               \n                              \n\n                                 \n                                   \n                     \n\n\n                                }\n\n\n                           \n                        \n\n\n\n\n                        else  if (WhileLoopSourcedataTokens[i].value == 'प्रिंट')\n                          \n                          \n\n\n\n                            {\n\n\n                                IfTokenPrint(WhileLoopSourcedataTokens,updated_tokens, i, this) //for operations like print(array[3])\n\n\n\n\n                            }\n\n\n\n                                           else  if (WhileLoopSourcedataTokens[i].type == \"SetArrayIndexValue\")\n\n\n\n\n                            {\n\n                                let Value = WhileLoopSourcedataTokens[i].value\n                                \n                                //console.log('SourcedataTokens: ', SourcedataTokens);\n                                //                              console.log('Value: ', Value,i);\n\n                                let ValueToSet = WhileLoopSourcedataTokens[i].ValueToSet\n\n                                let element = RemoveBrackets(Value);\n\n                                var ArrayElement = ''\n\n\n                                //Seprating out index identifier. xyz from Array[xyz]\n\n                                element = element.replace(']', '')\n\n\n                                let Split = element.split('[')\n\n\n\n                                // run if we need to set direct Array element value. like Array[2]= xyx                    \n                                if (isNumber(Split[1])) {\n\n                                    Split = Split.join('[')\n                                    //\n\n                                    Split = Split + ']'\n\n\n                                    ArrayElement = Split\n                                    // console.log('ValueToSet: ', ValueToSet);\n\n                                    NewValueToSet = CalculateValues(ValueToSet, j, updated_tokens, )\n\n\n\n                                    SetArrayorStringElement(ArrayElement, updated_tokens, false, NewValueToSet, tokens)\n\n\n\n\n                                }\n\n                                // run if we need to dynamically set Array element value. like Array[i]= xyx\n                                //CreateArrayElement function will create dynamic Array values. like Array[0], Array[1] etc.                    \n                                else {\n\n\n                                    let index = Split[1]\n\n\n                                    // setting iterator as per user input \n                                    //for iterator like count=count + 1, Array[count]\n\n                                    let newInterator = 0\n                                    let token = updated_tokens.find(el => el.name == index)\n\n                                    if (token != undefined) {\n\n                                        newInterator = token.value\n\n                                    } else {\n\n                                        newInterator = iterator\n                                    }\n\n\n\n                                    ArrayElement = CreateArrayElement(Value, newInterator)\n                                    console.log('ArrayElement: ', ArrayElement);\n\n\n\n\n                                }\n\n\n                                // this code is written to find operations like Array[a]= a*100+age*a. notice a\n                                //find a way to simplify this in long term\n\n                                let data = ValueToSet\n\n\n                                data = data.split('*').toString();\n                                data = data.split('+').toString();\n                                data = data.split('-').toString();\n                                data = data.split('/').toString();\n                                data = data.split(',')\n                                //console.log('data: ', ArrayElement, data, Split);\n\n\n\n\n                                //building a new value to convert a*100+age*a into 5*100+age*a and then sending it to CalculateValues()\n                                let NewValueToSet = ''\n\n                                // \n\n\n                                if (data.includes(Split[1]) && data.length > 1)\n\n                                {\n\n\n                                    //we have operations like Array[a]= a*100+age*a. notice a\n\n                                    for (let m = 0; m < ValueToSet.length; m++)\n\n                                    {\n\n                                        if (ValueToSet[m] == Split[1] && !(/^[a-z]+$/i.test(ValueToSet[m + 1])))\n\n                                        {\n\n\n\n                                            // value is been set . replacing index value a with iteartor value 0,1,2, etc.   \n                                            NewValueToSet = NewValueToSet + iterator\n\n                                        } else {\n\n                                            NewValueToSet = NewValueToSet + ValueToSet[m]\n\n\n\n                                        }\n\n\n\n                                    }\n\n                                    let iterat = false\n                                    //gave it a different name so it would not fuck up with for loop iterator\n\n                                    NewValueToSet = CalculateValues(NewValueToSet, j, updated_tokens, )\n\n\n\n\n                                    // \n\n                                    SetArrayorStringElement(ArrayElement, updated_tokens, iterat, NewValueToSet, tokens)\n\n\n\n\n                                }\n\n\n                                // this condition enables program to only run  Array[a]= xyz when iterator is a. It disallows running Array[blablabla]=xyz\n                                if (OriginalIterator == Split[1]) {\n\n\n\n                                    //  console.log('ValueToSet: ', ValueToSet);\n\n                                    if (Split[1] == ValueToSet) {\n\n\n                                        let iterator = true\n\n                                        SetArrayorStringElement(ArrayElement, updated_tokens, iterator, ValueToSet, tokens)\n\n\n\n                                    }\n\n                                    // for operations like Array[a]=ageone*100\n\n\n                                    if (!data.includes(Split[1]) && OriginalIterator == Split[1]) {\n\n\n\n                                        let iterator = false\n\n                                        ValueToSet = CalculateValues(ValueToSet, j, updated_tokens)\n                                        // console.log('ValueToSet: ', ValueToSet);\n\n                                        // \n\n                                        SetArrayorStringElement(ArrayElement, updated_tokens, iterator, ValueToSet, tokens)\n\n\n\n                                    }\n\n\n\n\n                                    //SetArrayorStringElement(ArrayElement,updated_tokens, iterator, ValueToSet, tokens)\n\n\n\n                                }\n\n\n                                //might have to add more conditions in the future\n                                else {\n\n                                    let iterator = false\n\n                                    ValueToSet = CalculateValues(ValueToSet, j, updated_tokens)\n                                    //   console.log('ValueToSet: ', ValueToSet);\n\n                                    // \n\n                                    SetArrayorStringElement(ArrayElement, updated_tokens, iterator, ValueToSet, tokens)\n\n\n\n\n                                }\n\n\n\n\n                            }\n\n\n                     \n                        }\n\n\n                    }\n                }\n\n\n\n\n              else  if (tokenType == 'ForLoopStart')\n\n\n\n                {\n\n  var FlagPrimalLoop = 0\n                   \n                    var SourcedataTokens = []\n\n     \n//console.log('updated_tokens: ', updated_tokens);\n\n     let ForLoopMetaData= ForLoopSetMetadata(mutable_tokens,j,updated_tokens)\n     \n     //console.log('ForLoopMetaData: ', ForLoopMetaData);\n\nvar ForLoopSourcedataIndexStart=ForLoopMetaData.ForLoopSourcedataIndexStart\nvar Cycle=ForLoopMetaData.Cycle\nvar OriginalIterator=ForLoopMetaData.OriginalIterator\nvar IterationStart=ForLoopMetaData.IterationStart\nvar iterator=ForLoopMetaData.iterator\nvar element=ForLoopMetaData.element\nvar elementValue=ForLoopMetaData.elementValue\n\n                    function getSourcedata(startIndex, mutable_tokens, check, StoreResult) {\n                        //console.log('startIndex, mutable_tokens, check, StoreResult: ', startIndex, mutable_tokens, check, StoreResult);\n\n\n\n                        let Returnvalue = HandleBlocks(mutable_tokens, startIndex, StoreResult)\n                        StoreResult = Returnvalue.StoreResult\n\n\n                        return StoreResult\n\n\n                    }\n\n\n\n\n                    ForLoopSourcedataIndexStart = getLoopIndexStart(mutable_tokens, j, '{', ForLoopSourcedataIndexStart)\n                    \n                    //\n\n                    SourcedataTokens = getSourcedata(ForLoopSourcedataIndexStart, mutable_tokens, '}', SourcedataTokens)\n                    //console.log('SourcedataTokens: ', SourcedataTokens);\n                    \n                    \n                    \n                    SourcedataTokens.forEach(el=>{\n\nel.isNestedLoop=false\n\n                    })\n\n\n                    let FindNestedLoop= SourcedataTokens.find(el=> el.type=='ForLoopStart')\n                   if(FindNestedLoop!=undefined)\n                   {\n  \n                       let NestedLoopindex=SourcedataTokens.indexOf(FindNestedLoop)+2\n                       let NestedLooplength=(SourcedataTokens[NestedLoopindex].EndIndex-SourcedataTokens[NestedLoopindex].startIndex)+1\n\n                       \n                       for(let x=NestedLoopindex;x<NestedLoopindex+NestedLooplength;x++)\n                       {\n\n\n                            SourcedataTokens[x].isNestedLoop=true\n\n                       }\n\n\n                   }\n\n\n\n                  \n\n\n\n\n                    if (element.includes('(') && element.includes(','))\n                    \n\n                    {\n\n                        FlagPrimalLoop = 1\n\n\n                    }\n\n\n\n                 \n               // console.log('Cycle: ', Cycle,IterationStart);\n\n\n                    //Iterating over forloop sourcedata\n                    //this line 'iterator <= Cycle' determines start of the loop and the duration of the loop\n\n                    for (iterator = IterationStart; iterator <= Cycle; iterator++) {\n                        \n\n\n                        let forloopindex = updated_tokens.find(el => el.name == OriginalIterator)\n                        \n\n\n\n                        forloopindex.value = iterator\n\n                        //console.log('updated_tokens: ', updated_tokens);\n\n                        //flag to avoid running this code if loop is primal because the payload needs to be compeltely different\n                        if (FlagPrimalLoop = 0) {\n                            ForLoopArrayorStringOutput(elementValue, iterator, updated_tokens, this)\n\n                        }\n\n\n                        for (let i = 0; i < SourcedataTokens.length; i++)\n\n\n                        {\n\n\nlet isNested=SourcedataTokens[i].isNestedLoop\n\n\nif (SourcedataTokens[i].type == 'ForLoopStart') {\n\n                           var NestedFlagPrimalLoop = 0\n                   \n                    var NestedSourcedataTokens = []      \n\n                    let NestedForLoopMetaData= ForLoopSetMetadata(SourcedataTokens,i,updated_tokens)\n     \n   //  console.log('NestedForLoopMetaData: ', NestedForLoopMetaData);\n\nvar NestedForLoopSourcedataIndexStart=NestedForLoopMetaData.ForLoopSourcedataIndexStart\nvar NestedCycle=NestedForLoopMetaData.Cycle+1\nvar NestedOriginalIterator=NestedForLoopMetaData.OriginalIterator\nvar NestedIterationStart=NestedForLoopMetaData.IterationStart\nvar Nestediterator=NestedForLoopMetaData.iterator\nvar Nestedelement=NestedForLoopMetaData.element\nvar NestedelementValue=NestedForLoopMetaData.elementValue\n\n                   \n                    function getSourcedata(startIndex, SourcedataTokens, check, StoreResult) {\n                        //console.log('startIndex, SourcedataTokens, check, StoreResult: ', startIndex, SourcedataTokens, check, StoreResult);\n\n\n\n                        let Returnvalue = HandleBlocks(SourcedataTokens, startIndex, StoreResult)\n                        StoreResult = Returnvalue.StoreResult\n\n\n                        return StoreResult\n\n\n                    }\n\n\n\n\n                    NestedForLoopSourcedataIndexStart = getLoopIndexStart(SourcedataTokens, i, '{', NestedForLoopSourcedataIndexStart)\n                    //console.log('ForLoopSourcedataIndexStart: ', ForLoopSourcedataIndexStart);\n                    \n                    \n\n                   NestedSourcedataTokens = getSourcedata(NestedForLoopSourcedataIndexStart, SourcedataTokens, '}', NestedSourcedataTokens)\n                   //console.log('NestedSourcedataTokens: ', NestedSourcedataTokens);\n                   \n\n                          \n                   \n                   \n for (Nestediterator = 0; Nestediterator <NestedCycle; Nestediterator++) {\n{\n\nlet y = Nestediterator\n\n\nlet Nestedforloopindex = updated_tokens.find(el => el.name == NestedOriginalIterator)\n                        //console.log('forloopindex: ', forloopindex);\n\n\n\n                        Nestedforloopindex.value = y\n\n\nfor(let index=0;index<NestedSourcedataTokens.length;index++)\n{\n\n\nlet el= NestedSourcedataTokens[index]\n\nif(el.value== 'प्रिंट')\n\n{\n\n\n\nIfTokenPrint(NestedSourcedataTokens,updated_tokens, index, this, y, NestedOriginalIterator)\n\n\n}\n\n else if (el.value == '=' && el.isNestedLoop==true) {\n     \n\n                                //assigning values to variables\n                           \n\n                                AssignorUpdateValues(NestedSourcedataTokens, index, updated_tokens, y, NestedOriginalIterator)\n\n                            }\n\n\n                            else  if (el.type == 'condition' && el.isNestedLoop==true)\n\n\n\n                            {\n\n\n\n\n                                //console.log('SourcedataTokens[i]: ', SourcedataTokens[i],i);\n\n                                let ConditionStartIndex = index\n                                let condition = NestedSourcedataTokens[index].value\n                                //HandleConditions evaluates condition and return the index of from where printing should resume\n                                //value of i depends on the conditions\n\n                                if (condition.includes('||') || condition.includes('&&'))\n\n                                {\n\n\n                                    let value = GetConditionValue(condition, updated_tokens, index)\n                                    \n\n\n\n                                    if (value == false) {\n\n\n\n                                        let BlockLength = 0\n                                        let BlockStart = 0\n\n                                        while (NestedSourcedataTokens[index].value != '{')\n\n                                        {\n\n                                            if (NestedSourcedataTokens[index + 1].value == '{')\n\n                                            {\n\n\n                                                BlockLength = NestedSourcedataTokens[index + 1].EndIndex - NestedSourcedataTokens[index + 1].startIndex\n\n                                                index = BlockLength + index + 1\n\n\n\n\n                                                break;\n\n                                            }\n\n\n\n                                            index++\n                                        }\n\n                                    } else {\n\n\n                                        index = index\n\n\n                                    }\n\n\n\n\n                                } else {\nconsole.log('NestedSourcedataTokens: ', NestedSourcedataTokens);\n                                console.log('index : ', index );\n\n\n                                    let x= HandleConditions(NestedSourcedataTokens, index, updated_tokens);\n                                    console.log('x: ', x);\n                                    \n\n\n\n                                    if (x != undefined) {\n\n\n                                        index = x\n                                        \n\n\n                                    } else {\n                                        index = ConditionStartIndex\n                                        //console.log('i: ', i);\n                                    }\n\n                                }\n\n                                console.log('index : ', index );\n\n\n\n\n                            }\n\n\n                        \n                    //console.log('j: ', j);\n\n                   // i = i + NestedSourcedataTokens.length\n                    //console.log('i: ', i);\n\n\n else  if (el.type == \"SetArrayIndexValue\" && el.isNestedLoop==true)\n\n\n\n\n                            {\n\n                                let Value = el.value\n                                //console.log('SourcedataTokens: ', SourcedataTokens);\n                                //                              console.log('Value: ', Value,i);\n\n                                let ValueToSet = el.ValueToSet\n\n                                let element = RemoveBrackets(Value);\n\n                                var ArrayElement = ''\n\n\n                                //Seprating out index identifier. xyz from Array[xyz]\n\n                                element = element.replace(']', '')\n\n\n                                let Split = element.split('[')\n                                \n\n\n\n                                // run if we need to set direct Array element value. like Array[2]= xyx                    \n                                if (isNumber(Split[1])) {\n\n                                    Split = Split.join('[')\n                                    \n                                    //\n\n                                    Split = Split + ']'\n\n\n                                    ArrayElement = Split\n                                    // console.log('ValueToSet: ', ValueToSet);\n\n                                    NewValueToSet = CalculateValues(ValueToSet, index, updated_tokens)\n\n\n\n                                    SetArrayorStringElement(ArrayElement, updated_tokens, false, NewValueToSet, tokens)\n\n\n\n\n                                }\n\n                                // run if we need to dynamically set Array element value. like Array[i]= xyx\n                                //CreateArrayElement function will create dynamic Array values. like Array[0], Array[1] etc.                    \n                                else {\n\n\n                                    let index = Split[1]\n\n\n                                    // setting iterator as per user input \n                                    //for iterator like count=count + 1, Array[count]\n\n                                    let newInterator = 0\n                                    let token = updated_tokens.find(el => el.name == index)\n\n                                    if (token != undefined) {\n\n                                        newInterator = token.value\n\n                                    } else {\n\n                                        newInterator = iterator\n                                    }\n\n\n\n                                    ArrayElement = CreateArrayElement(Value, newInterator)\n\n\n\n\n                                }\n\n\n                                // this code is written to find operations like Array[a]= a*100+age*a. notice a\n                                //find a way to simplify this in long term\n\n                                let data = ValueToSet\n\n\n                                data = data.split('*').toString();\n                                data = data.split('+').toString();\n                                data = data.split('-').toString();\n                                data = data.split('/').toString();\n                                data = data.split(',')\n                                //console.log('data: ', ArrayElement, data, Split);\n\n\n\n\n                                //building a new value to convert a*100+age*a into 5*100+age*a and then sending it to CalculateValues()\n                                let NewValueToSet = ''\n\n                                // \n\n\n                                if (data.includes(Split[1]) && data.length > 1)\n\n                                {\n\n\n                                    //we have operations like Array[a]= a*100+age*a. notice a\n\n                                    for (let m = 0; m < ValueToSet.length; m++)\n\n                                    {\n\n                                        if (ValueToSet[m] == Split[1] && !(/^[a-z]+$/i.test(ValueToSet[m + 1])))\n\n                                        {\n\n\n\n                                            // value is been set . replacing index value a with iteartor value 0,1,2, etc.   \n                                            NewValueToSet = NewValueToSet + iterator\n\n                                        } else {\n\n                                            NewValueToSet = NewValueToSet + ValueToSet[m]\n\n\n\n                                        }\n\n\n\n                                    }\n\n                                    let iterat = false\n                                    //gave it a different name so it would not fuck up with for loop iterator\n\n                                    NewValueToSet = CalculateValues(NewValueToSet, j, updated_tokens, )\n\n\n\n\n                                    // \n\n                                    SetArrayorStringElement(ArrayElement, updated_tokens, iterat, NewValueToSet, tokens)\n\n\n\n\n                                }\n\n\n                                // this condition enables program to only run  Array[a]= xyz when iterator is a. It disallows running Array[blablabla]=xyz\n                                if (OriginalIterator == Split[1]) {\n\n\n\n                                    //  console.log('ValueToSet: ', ValueToSet);\n\n                                    if (Split[1] == ValueToSet) {\n\n\n                                        let iterator = true\n\n                                        SetArrayorStringElement(ArrayElement, updated_tokens, iterator, ValueToSet, tokens)\n\n\n\n                                    }\n\n                                    // for operations like Array[a]=ageone*100\n\n\n                                    if (!data.includes(Split[1]) && OriginalIterator == Split[1]) {\n\n\n\n                                        let iterator = false\n\n                                        ValueToSet = CalculateValues(ValueToSet, j, updated_tokens)\n                                        // console.log('ValueToSet: ', ValueToSet);\n\n                                        // \n\n                                        SetArrayorStringElement(ArrayElement, updated_tokens, iterator, ValueToSet, tokens)\n\n\n\n                                    }\n\n\n\n\n                                    //SetArrayorStringElement(ArrayElement,updated_tokens, iterator, ValueToSet, tokens)\n\n\n\n                                }\n\n\n                                //might have to add more conditions in the future\n                                else {\n\n                                    let iterator = false\n\n                                    ValueToSet = CalculateValues(ValueToSet, j, updated_tokens)\n                                    //   console.log('ValueToSet: ', ValueToSet);\n\n                                    // \n\n                                    SetArrayorStringElement(ArrayElement, updated_tokens, iterator, ValueToSet, tokens)\n\n\n\n\n                                }\n\n\n\n\n                            }\n\n\n\n\n\n\n\n\n}\n\n\n\n\n\n\n\n}\n\n\n\n\n\n\n                            }\n\n\n\n\n}\n\n\n\n\n\n\n\n\n                            else if (SourcedataTokens[i].value == '='  && isNested==false) {\n\n                                //assigning values to variables\n\n                                AssignorUpdateValues(SourcedataTokens, i, updated_tokens, iterator, OriginalIterator)\n\n                            }\n\n\n\n\n                            //Handling print statements in for loop\n\n                          else  if (SourcedataTokens[i].value == 'प्रिंट' && isNested==false)\n\n\n\n\n                            {\n\n                                //for operations like print(array[3])\n\n                                // console.log('for looop prints: ', SourcedataTokens[i],i);\n\n\n                                IfTokenPrint(SourcedataTokens,updated_tokens, i, this, iterator, OriginalIterator)\n\n                                //\n\n\n                            }\n\n\n\n                            //Handling set array element statements in for loop\n                          else  if (SourcedataTokens[i].type == \"SetArrayIndexValue\")\n\n\n\n\n                            {\n\n                                let Value = SourcedataTokens[i].value\n                                //console.log('SourcedataTokens: ', SourcedataTokens);\n                                //                              console.log('Value: ', Value,i);\n\n                                let ValueToSet = SourcedataTokens[i].ValueToSet\n\n                                let element = RemoveBrackets(Value);\n\n                                var ArrayElement = ''\n\n\n                                //Seprating out index identifier. xyz from Array[xyz]\n\n                                element = element.replace(']', '')\n\n\n                                let Split = element.split('[')\n\n\n\n                                // run if we need to set direct Array element value. like Array[2]= xyx                    \n                                if (isNumber(Split[1])) {\n\n                                    Split = Split.join('[')\n                                    //\n\n                                    Split = Split + ']'\n\n\n                                    ArrayElement = Split\n                                    // console.log('ValueToSet: ', ValueToSet);\n\n                                    NewValueToSet = CalculateValues(ValueToSet, j, updated_tokens, )\n\n\n\n                                    SetArrayorStringElement(ArrayElement, updated_tokens, false, NewValueToSet, tokens)\n\n\n\n\n                                }\n\n                                // run if we need to dynamically set Array element value. like Array[i]= xyx\n                                //CreateArrayElement function will create dynamic Array values. like Array[0], Array[1] etc.                    \n                                else {\n\n\n                                    let index = Split[1]\n\n\n                                    // setting iterator as per user input \n                                    //for iterator like count=count + 1, Array[count]\n\n                                    let newInterator = 0\n                                    let token = updated_tokens.find(el => el.name == index)\n\n                                    if (token != undefined) {\n\n                                        newInterator = token.value\n\n                                    } else {\n\n                                        newInterator = iterator\n                                    }\n\n\n\n                                    ArrayElement = CreateArrayElement(Value, newInterator)\n\n\n\n\n                                }\n\n\n                                // this code is written to find operations like Array[a]= a*100+age*a. notice a\n                                //find a way to simplify this in long term\n\n                                let data = ValueToSet\n\n\n                                data = data.split('*').toString();\n                                data = data.split('+').toString();\n                                data = data.split('-').toString();\n                                data = data.split('/').toString();\n                                data = data.split(',')\n                                //console.log('data: ', ArrayElement, data, Split);\n\n\n\n\n                                //building a new value to convert a*100+age*a into 5*100+age*a and then sending it to CalculateValues()\n                                let NewValueToSet = ''\n\n                                // \n\n\n                                if (data.includes(Split[1]) && data.length > 1)\n\n                                {\n\n\n                                    //we have operations like Array[a]= a*100+age*a. notice a\n\n                                    for (let m = 0; m < ValueToSet.length; m++)\n\n                                    {\n\n                                        if (ValueToSet[m] == Split[1] && !(/^[a-z]+$/i.test(ValueToSet[m + 1])))\n\n                                        {\n\n\n\n                                            // value is been set . replacing index value a with iteartor value 0,1,2, etc.   \n                                            NewValueToSet = NewValueToSet + iterator\n\n                                        } else {\n\n                                            NewValueToSet = NewValueToSet + ValueToSet[m]\n\n\n\n                                        }\n\n\n\n                                    }\n\n                                    let iterat = false\n                                    //gave it a different name so it would not fuck up with for loop iterator\n\n                                    NewValueToSet = CalculateValues(NewValueToSet, j, updated_tokens, )\n\n\n\n\n                                    // \n\n                                    SetArrayorStringElement(ArrayElement, updated_tokens, iterat, NewValueToSet, tokens)\n\n\n\n\n                                }\n\n\n                                // this condition enables program to only run  Array[a]= xyz when iterator is a. It disallows running Array[blablabla]=xyz\n                                if (OriginalIterator == Split[1]) {\n\n\n\n                                    //  console.log('ValueToSet: ', ValueToSet);\n\n                                    if (Split[1] == ValueToSet) {\n\n\n                                        let iterator = true\n\n                                        SetArrayorStringElement(ArrayElement, updated_tokens, iterator, ValueToSet, tokens)\n\n\n\n                                    }\n\n                                    // for operations like Array[a]=ageone*100\n\n\n                                    if (!data.includes(Split[1]) && OriginalIterator == Split[1]) {\n\n\n\n                                        let iterator = false\n\n                                        ValueToSet = CalculateValues(ValueToSet, j, updated_tokens)\n                                        // console.log('ValueToSet: ', ValueToSet);\n\n                                        // \n\n                                        SetArrayorStringElement(ArrayElement, updated_tokens, iterator, ValueToSet, tokens)\n\n\n\n                                    }\n\n\n\n\n                                    //SetArrayorStringElement(ArrayElement,updated_tokens, iterator, ValueToSet, tokens)\n\n\n\n                                }\n\n\n                                //might have to add more conditions in the future\n                                else {\n\n                                    let iterator = false\n\n                                    ValueToSet = CalculateValues(ValueToSet, j, updated_tokens)\n                                    //   console.log('ValueToSet: ', ValueToSet);\n\n                                    // \n\n                                    SetArrayorStringElement(ArrayElement, updated_tokens, iterator, ValueToSet, tokens)\n\n\n\n\n                                }\n\n\n\n\n                            }\n\n\n\n                            // Handling CONDITIONAL statements in for loop\n\n                          else  if (SourcedataTokens[i].type == 'condition')\n\n\n\n                            {\n\n\n\n\n                                //console.log('SourcedataTokens[i]: ', SourcedataTokens[i],i);\n\n                                let ConditionStartIndex = i\n                                let condition = SourcedataTokens[i].value\n                                //HandleConditions evaluates condition and return the index of from where printing should resume\n                                //value of i depends on the conditions\n\n                                if (condition.includes('||') || condition.includes('&&'))\n\n                                {\n\n\n                                    let value = GetConditionValue(condition, updated_tokens, i)\n\n\n\n                                    if (value == false) {\n\n\n\n                                        let BlockLength = 0\n                                        let BlockStart = 0\n\n                                        while (SourcedataTokens[i].value != '{')\n\n                                        {\n\n                                            if (SourcedataTokens[i + 1].value == '{')\n\n                                            {\n\n\n                                                BlockLength = SourcedataTokens[i + 1].EndIndex - SourcedataTokens[i + 1].startIndex\n\n                                                i = BlockLength + i + 1\n\n\n\n\n                                                break;\n\n                                            }\n\n\n\n                                            i++\n                                        }\n\n                                    } else {\n\n\n                                        i = i\n\n\n                                    }\n\n\n\n\n                                } else {\n\n\n                                    i = HandleConditions(SourcedataTokens, i, updated_tokens);\n\n\n\n                                    if (i != undefined) {\n\n\n                                        i = i\n\n\n                                    } else {\n                                        i = ConditionStartIndex\n                                        //console.log('i: ', i);\n                                    }\n\n                                }\n\n\n\n\n                            }\n\n\n                        }\n\n\n\n                    }\n                    //console.log('j: ', j);\n\n                    j = j + SourcedataTokens.length\n                    //console.log('j: ', j);\n\n\n                }\n\n                //END FOR LOOP EXECUTION\n\n\n\n\n            }\n\n\n\n\n\n\n\n            var t1 = performance.now()\n            if (this.output != '') {\n                this.TimeTaken = \"Compiled Succesfully in \" + (t1 - t0).toPrecision(4) + \" ms.\"\n\n            }\n\n\n\n            this.linebylineOutput = this.output.split('\\n')\n\n\n            this.linebylineOutput = this.linebylineOutput.filter(function(item) {\n                return item !== \"\"\n            })\n\n\n\n\n\n\n\n            //SECTION - Calculating remaining values\n\n\n            //so that replace x with values\n\n            /*\n                        updated_tokens.forEach((el, i) => {\n                            \n\n\n                            let element = el.value\n\n\n                            //removing the \"(\"\" and \")\"\n\n\n                            var CleanedElement = RemoveBrackets(element)\n\n                            operation = ''\n\n\n\n                            //why pureeval?\n                            // operations like 50+60 were set as [5,0,+,6,0] instead of [50,+,60]. basically direct calculation was not working\n                            //pureeval finds such pure operations and then calculate them to directly set their value\n                            //this shit is only for pureoperations\n                            let pureval = /^([-+]?[0-9]*\\.?[0-9]+[\\/\\+\\-\\*])+([-+]?[0-9]*\\.?[0-9]+)*$/gm.test(CleanedElement)\n\n                            if (pureval == true) {\n\n\n\n                                updated_tokens[i].value = eval(updated_tokens[i].value)\n\n\n                            }\n\n\n\n\n                            if (isCalculation(CleanedElement) == true && !pureval) {\n\n                                terms = CleanedElement.split('')\n\n\n\n                            }\n\n\n\n\n                        })\n\n\n\n\n                        //\n\n                        // performing calculations\n\n\n\n\n                        updated_tokens.forEach((el, i) => {\n\n                            var indextoChange = '' //to know which value to replace like \"anna+dada-bad\" with \"5+6-7\"\n\n\n\n                            let element = el.value // reading the current value, for lon string variable names it's still like \"anna+dada-bad\"\n                            element = element.toString()\n                            var StringVar = []\n                            // \n\n                            let pureval = /^([-+]?[a-z]*\\.?[a-z]+[\\/\\+\\-\\*])+([-+]?[a-z]*\\.?[a-z]+)*$/gm.test(element)\n\n\n\n                            if (element.includes('>') || element.includes('<') || element.includes('==')) {\n\n\n\n                                StringVar = SplitElementsArray(element)\n\n\n\n                                StringVar = SetValues(StringVar, updated_tokens)\n\n\n                                UpdateUpdated_tokenswithValues(StringVar, i, updated_tokens)\n\n\n\n\n                            }\n\n\n                            //finding operations like a+b-c\n                            if (pureval == true || element.charAt(0) == \"(\") {\n\n                                // \n\n\n                                StringVar = SplitElementsArray(element)\n                                StringVar = SetValues(StringVar, updated_tokens)\n                                UpdateUpdated_tokenswithValues(StringVar, i, updated_tokens)\n\n\n                            }\n\n\n\n\n                        })\n\n\n\n\n                        /*\n                         ReIntializedVariables.forEach(el=>{\n\n                        let flag=0\n                        let SkipIndex=0\n\n                        for(let m=0;m<updated_tokens.length;m++)\n                        {\n                            \n                        if(el.name==updated_tokens[m].name && flag==0)\n                        {\n\n\n                        if(el.value.charAt(0)=='\"')\n                        {\n\n\n                            let BuiltString= BuildString(el.value, )\n\n                            \n                        }\n                        flag=1;\n                        updated_tokens[m].value=el.value;\n\n\n                        \n\n                        SkipIndex=m\n\n\n                        }\n\n                        //\n\n                        if( m!=SkipIndex && flag==1 && el.name==updated_tokens[m].name)\n\n                        {\n\n                        updated_tokens.splice(m,1)\n\n                        }\n\n\n                        }\n\n\n\n\n                        })\n                        */\n\n\n\n\n            //SECTION - Iterating over tokens and then PRINTING FINAL using values stored in updated tokens\n\n            /*        \n\n            for (var j = 0; j < tokens.length; j++) {\n\n\n                var mutable_tokens = tokens\n                var token = mutable_tokens[j].value\n             \n\n                if (token == 'प्रिंट' )\n\n                {\n\n                    var b = RemoveBrackets(mutable_tokens[j+1].value)\n\n\n\n\n                    variables_array.push(b)\n\n                    \n\n                 \n                    //SECTION - Outputting the code\n                    // finding the relvant value and then output it as HTML\n                    updated_tokens.forEach((el, i) => {\n\n                        if (el.name == b ) {\n\n\n\n                            this.output = this.output + el.value + \"\\n\";\n\n                            assigned_variables.push(el.name);\n\n                           \n\n\n                        }\n\n\n\n                        // work to be continued\n\n                    })\n\n                    \n\n                    \n\n                }\n\n\n                //Handling Conditions\n\n                if(mutable_tokens[j].type==\"condition\")\n                {\n\n\n\n                   \n\n                    let token= updated_tokens.find(el=> el.originalvalue==mutable_tokens[j].value)\n\n\n\n                    let ConditionValue=token.value\n\n                  \n\n                   if(ConditionValue==false)\n                   {\n\nlet InitializeLoop= tokens.indexOf(mutable_tokens[j])\n\n\n\n\n\nwhile(mutable_tokens[j+1].value!='}' )\n{\n\n\n\n    let x= mutable_tokens[j+1].value.length\n    \n    \ntokens.splice(j+1, 1);\n \n\n    j++;\n\n\n}\n\n\n\n\n                   }\n\n\n                }\n\n\n                if(token == 'प्रिंट' && /^([-+]?[0-9]*\\.?[0-9]+[\\/\\+\\-\\*])+([-+]?[0-9]*\\.?[0-9]+)*$/gm.test(mutable_tokens[j+1].value) )\n                {\n \n                let a= eval(mutable_tokens[j+1].value)\n\n                this.output = this.output + \"\\n\" + a + \"\\n\"\n\n                }\n\n                \n\n        \n              \n\n\n\n\n      // this is to handle प्रिंट (\"Age is\"+ Age) etc.\n\n                if(isStringandValue(mutable_tokens[j].value))\n{\n\n\n        \n\n                    let x=mutable_tokens[j].value\n                    let string=''\n                    let newel=''\n\n                    x=RemoveBrackets(x)\n\n                    \n                    //x = x.replace(/ /g,'')\n\n                    x=x.split(\"+\")\n\n                    \n\n                    x.forEach(element => {\n                        \n\n                        \n                        if(element.charAt(0)== \" \" || element.charAt(element.length-1)==\" \" && !(element.includes('\"'))){\n\n                          \n                       newel= element.replace(/\\s/g, '');\n\n                        \n\n\n                        }\n                        else{\n\n                            newel=element\n                        }\n\n                       let y= updated_tokens.find(el=> el.name== newel)\n\n                      \n                       \n//\n                       if(y!=undefined)\n                       {\n\n\n\n                       string=string + ' ' + y.value\n                       //\n\n\n                       }\n                       else{\n\n                           \n                           element= element.replace(/\"/g, '');\n                           string=string+ ' ' + element\n                       }\n                       \n\n                       \n\n                    });\n\n\n\n                        this.output = this.output + \"\\n\" + string + \"\\n\"\n}\n\n\n//THIS IS to handle operations like प्रिंट (\"Name is GOAT\"), प्रिंट (\"Goodbye\")\n\nelse{\n\n\n\n                  let value= RemoveBrackets(mutable_tokens[j].value)\n                 // \n\n                  \n\n                   let CleanedValue = value.replace(/ /g,'')\n\n                    \n\n\n                   if(/^([-+]?[0-9]*\\.?[0-9]+[\\/\\+\\-\\*])+([-+]?[0-9]*\\.?[0-9]+)*$/gm.test(CleanedValue)!=true)\n\n                   {\n\n                 // \n\n                    value = value.replace(/\"/g, \"\");\n                    value = value.replace(/'/g, \"\");\n\n\n\n                        this.output = this.output + \"\\n\" + value + \"\\n\" \n }\n                        \n\n}\n\n\n            }\n\n\n           \n            })\n\n        }\n        */\n\n\n        }\n\n    }\n\n}; \n</script>\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n\n#bharatP{\n\n\ntext-align: left;\n  display: table-cell;\n    font-family: monospace\n}\n#versionNumber{\n\n\ntext-align: left;\n  display: table-cell;\n    font-family: monospace;\n    padding-left: 6%\n}\n\n#bharatDIV{\n\n    padding-top: 2%;\n    padding-left: 2%\n\n}\n\n#linebylineOutput\n{\n\n\n\nheight: 10px;\n    text-align: left;\n    \n\n\n}\n#errorstack{\n\ntext-align: left;\npadding-left: 2.5%;\npadding-top: 6%;\nfont-weight: bold;\ncolor:rgb(231, 83, 83);\n\n}\n\n#compiler{\n\n  display: flex;\n}\n\n#textarea{\n\n  width: 50%\n}\n#output{\n\n  height: 400px;\n  width: 50%;\n  background-color: black;\n    color: white;\n    overflow: auto\n  \n}\nh3 {\n  margin: 40px 0 0;\n}\n\nul {\n  list-style-type: none;\n  padding: 0;\n}\n\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\n\na {\n  color: #42b983;\n}\n\n.hello {\n  display: grid;\n}\n\n#codearea {\n  width: 90%;\n  height: 400px;\n  background-color: whitesmoke;\n    font-family: monospace;\n    font-size: medium;\n    border: none\n}\n\n#subm {\n  width: 10%;\n  height: 50px;\n}\n</style>"]}]}