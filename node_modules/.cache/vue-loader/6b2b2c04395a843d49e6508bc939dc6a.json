{"remainingRequest":"/Users/jonny/Documents/Work/test/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jonny/Documents/Work/test/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/jonny/Documents/Work/test/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jonny/Documents/Work/test/src/views/Examples.vue?vue&type=template&id=2fae6203&scoped=true&","dependencies":[{"path":"/Users/jonny/Documents/Work/test/src/views/Examples.vue","mtime":1591414341863},{"path":"/Users/jonny/Documents/Work/test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jonny/Documents/Work/test/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/jonny/Documents/Work/test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jonny/Documents/Work/test/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}