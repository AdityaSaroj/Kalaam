{"remainingRequest":"/Users/jonny/Documents/Work/test/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jonny/Documents/Work/test/node_modules/vuetify-loader/lib/loader.js??ref--17-0!/Users/jonny/Documents/Work/test/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/jonny/Documents/Work/test/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jonny/Documents/Work/test/src/views/Documentation.vue?vue&type=template&id=939d8420&scoped=true&","dependencies":[{"path":"/Users/jonny/Documents/Work/test/src/views/Documentation.vue","mtime":1592713682800},{"path":"/Users/jonny/Documents/Work/test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jonny/Documents/Work/test/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/jonny/Documents/Work/test/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Users/jonny/Documents/Work/test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jonny/Documents/Work/test/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jonny/Documents/Work/test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jonny/Documents/Work/test/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/jonny/Documents/Work/test/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Users/jonny/Documents/Work/test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jonny/Documents/Work/test/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgImRpdiIsCiAgICB7IHN0YXRpY0NsYXNzOiAiYWJvdXQiIH0sCiAgICBbCiAgICAgIF9jKCJIZWFkZXIiKSwKICAgICAgX2MoCiAgICAgICAgImRpdiIsCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJidXR0b24iLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjb2xsYXBzaWJsZSIsCiAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogImJ1dHRvbiIgfSwKICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICBfdm0uc2hvd1N0YXIwID0gIV92bS5zaG93U3RhcjAKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIuCkquCljeCksOCkv+CkguCknygpIildCiAgICAgICAgICApLAogICAgICAgICAgX2MoInRyYW5zaXRpb24iLCB7IGF0dHJzOiB7IG5hbWU6ICJzbGlkZS1mYWRlIiB9IH0sIFsKICAgICAgICAgICAgX3ZtLnNob3dTdGFyMAogICAgICAgICAgICAgID8gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250ZW50IiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImgyIiwgW192bS5fdigiVXNhZ2UiKV0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJoNSIsIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiIFByaW50IGNoYXJhY3RlcnMgb24gdGhlIG91dHB1dCBzY3JlZW4iKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJoMiIsIFtfdm0uX3YoIkltcGxlbWVudGF0aW9uIildKSwKICAgICAgICAgICAgICAgICAgICBfYygiaDQiLCBbX3ZtLl92KCIxOiBQcmludCBhIERlY2xhcmVkIFZhcmlhYmxlICIpXSksCiAgICAgICAgICAgICAgICAgICAgX2MoInAiLCBbX3ZtLl92KCdOYW1lPSJIZWxsbyBXb3JsZCIgJyldKSwKICAgICAgICAgICAgICAgICAgICBfYygicCIsIFtfdm0uX3YoIuCkquCljeCksOCkv+CkguCknyhOYW1lKSAiKV0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJwIiksCiAgICAgICAgICAgICAgICAgICAgX2MoImg0IiwgW192bS5fdigiMjogUHJpbnQgYSBEaXJlY3QgU3RyaW5nICIpXSksCiAgICAgICAgICAgICAgICAgICAgX2MoInAiLCBbX3ZtLl92KCfgpKrgpY3gpLDgpL/gpILgpJ8oIkhlbGxvIFdvcmxkIiknKV0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgW192bS5fdigi4KSq4KWN4KSw4KS/4KSC4KSfKDAwNykiKV0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJoNCIsIFtfdm0uX3YoIjM6IFByaW50IGEgTXVsdGkvQ29uY2F0ZW5hdGVkIFN0cmluZyAiKV0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgW192bS5fdignTmFtZT0iS2FsYW0iICcpXSksCiAgICAgICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICfgpKrgpY3gpLDgpL/gpILgpJ8oIkhlbGxvIFdvcmxkLCIgKyAiTXkgTmFtZSBpcyIgKyBOYW1lICsgIiEiKScKICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIFsKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJidXR0b24iLAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBpZDogIlRyeUNvZGVidG4iIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5Db3B5Q29kZSgiQ29kZUlEMSIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiUGxheSB3aXRoIHRoZSBDb2RlIildCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICBfYygicCIsIHsgYXR0cnM6IHsgaWQ6ICJDb2RlUGFyYSIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygicHJlIiwgeyBhdHRyczogeyBpZDogIkNvZGVJRDEiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgJ1xuXG4jUFJJTlQgQSBERUNMQVJFRCBWQVJJQUJMRVxuXG5OYW1lPSJIZWxsbyBXb3JsZCIgICBcbuCkquCljeCksOCkv+CkguCknyhOYW1lKSAgIFxuXG4jUFJJTlQgQSBESVJFQ1QgU1RSSU5HXG5cbuCkquCljeCksOCkv+CkguCknygiVGljIFRhYyBUb2UiKSBcbuCkquCljeCksOCkv+CkguCknygwMDcpIFxuXG4jUFJJTlQgQSBNVUxUSS9DT05DQU5BVEVEIFNUUklOR1xuXG5OYW1lPSJLYWxhbSIgIFxu4KSq4KWN4KSw4KS/4KSC4KSfKCJIZWxsbyBXb3JsZCwiICsgIk15IE5hbWUgaXMiICsgTmFtZSArICIhIikgXG5cblxuIFxuXG4nCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgOiBfdm0uX2UoKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImNvbGxhcHNpYmxlIiwKICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiAiYnV0dG9uIiB9LAogICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgIF92bS5zaG93U3RhcjEgPSAhX3ZtLnNob3dTdGFyMQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigi4KSw4KSa4KSo4KS+IildCiAgICAgICAgICApLAogICAgICAgICAgX2MoInRyYW5zaXRpb24iLCB7IGF0dHJzOiB7IG5hbWU6ICJzbGlkZS1mYWRlIiB9IH0sIFsKICAgICAgICAgICAgX3ZtLnNob3dTdGFyMQogICAgICAgICAgICAgID8gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250ZW50IiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImgyIiwgW192bS5fdigiVXNhZ2UiKV0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJoNSIsIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgIiBSZXVzYWJsZSBjb2RlIHdyYXBwZWQgaW5zaWRlIGEgYmxvY2ssIGFsc28ga25vd24gYXMgYSBmdW5jdGlvbi4iCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX2MoImgyIiwgW192bS5fdigiSW1wbGVtZW50YXRpb24iKV0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJoNCIsIFtfdm0uX3YoIjE6IERlZmluZSBhIEZ1bmN0aW9uICIpXSksCiAgICAgICAgICAgICAgICAgICAgX2MoImgzIiwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCLgpLDgpJrgpKjgpL4gIiksCiAgICAgICAgICAgICAgICAgICAgICBfYygiaSIsIFtfdm0uX3YoIkZ1bmN0aW9uTmFtZSIpXSksCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiAoIiksCiAgICAgICAgICAgICAgICAgICAgICBfYygiaSIsIFtfdm0uX3YoImFyZ3VtZW50MSIpXSksCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiAsIiksCiAgICAgICAgICAgICAgICAgICAgICBfYygiaSIsIFtfdm0uX3YoImFyZ3VtZW50MiIpXSksCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiApICIpCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX2MoImg1IiwgW19jKCJiIiwgW192bS5fdigiRnVuY3Rpb24gTmFtZSIpXSldKSwKICAgICAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgIkZ1bmN0aW9uIG5hbWVzIGFyZSBjYXNlIHNlbnNpdGl2ZSBhbmQgc2hvdWxkIGNvbnRhaW4gb25seSBhbHBoYWJldCBsZXR0ZXJzICIKICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygiaDUiLCBbX2MoImIiLCBbX3ZtLl92KCJGdW5jdGlvbiBBcmd1bWVudHMiKV0pXSksCiAgICAgICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICJGdW5jdGlvbiBBcmd1bWVudHMgc2V0IHRoZW1zZWx2ZXMgd2l0aCB0ZW1wb3JhcnkgdmFsdWVzIHRoYXQgYXJlIHBhc3NlZCBpbnNpZGUgYSBmdW5jdGlvbiB3aGVuIGEgZnVuY3Rpb24gaXMgY2FsbGVkLiAiCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICJBcmd1bWVudHMgbmFtZXMgYXJlIGFsc28gY2FzZSBzZW5zaXRpdmUgQXJndW1lbnQgbmFtZXMgYXJlIHlvdXIgY2hvaWNlIGJ1dCBzaG91bGQgY29udGFpbiBvbmx5IGFscGhhYmV0IGxldHRlcnMuIgogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJoNCIsIFtfdm0uX3YoIjI6IENhbGxpbmcgYSBGdW5jdGlvbiAiKV0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJoMyIsIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJpIiwgW192bS5fdigiRnVuY3Rpb25OYW1lIildKSwKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiICgiKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJpIiwgW192bS5fdigiYXJndW1lbnQxIildKSwKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiICwiKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJpIiwgW192bS5fdigiYXJndW1lbnQyIildKSwKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiICkgIikKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygiaDUiLCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiYiIsIFtfdm0uX3YoIkZ1bmN0aW9uIE5hbWUtIFByaW50RnVsbE5hbWUiKV0pCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICJXaGlsZSBjYWxsaW5nIGZ1bmN0aW9uLCBtYWtlIHN1cmUgdGhhdCB0aGUgRnVuY3Rpb24gbmFtZSBkZWNsYXJhdGlvbiBpcyBzYW1lIGFzIGEgZnVuY3Rpb24gY2FsbC4gIgogICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgRm9yIGUuZyBQcmludEZ1bGxOYW1l4omgcHJpbnRmdWxsbmFtZSAiKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJoMiIsIFtfdm0uX3YoIiBFeGFtcGxlIildKSwKICAgICAgICAgICAgICAgICAgICBfYygiaDUiLCBbX2MoImIiLCBbX3ZtLl92KCJEZWZpbmUgVmFyaWFibGVzIildKV0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJoNSIsIFtfdm0uX3YoIkZpcnN0TmFtZS0gJ1NhY2hpbicgIildKSwKICAgICAgICAgICAgICAgICAgICBfYygiaDUiLCBbX3ZtLl92KCJMYXN0TmFtZS0gJ1RlbmR1bGthcicgIildKSwKICAgICAgICAgICAgICAgICAgICBfYygiaDUiLCBbX2MoImIiLCBbX3ZtLl92KCIgRnVuY3Rpb24gZGVjbGFyYXRpb24iKV0pXSksCiAgICAgICAgICAgICAgICAgICAgX2MoImg1IiwgW192bS5fdigiUHJpbnRGdWxsTmFtZSAoeCwgeSkgIildKSwKICAgICAgICAgICAgICAgICAgICBfYygiaDUiLCBbX2MoImIiLCBbX3ZtLl92KCIgRnVuY3Rpb24gQm9keSIpXSldKSwKICAgICAgICAgICAgICAgICAgICBfYygiaDUiLCBbX3ZtLl92KCJ7IildKSwKICAgICAgICAgICAgICAgICAgICBfYygiaDUiLCBbX3ZtLl92KCLgpKrgpY3gpLDgpL/gpILgpJ8oIHggKyB5ICkgIildKSwKICAgICAgICAgICAgICAgICAgICBfYygiaDUiLCBbX3ZtLl92KCJ9IildKSwKICAgICAgICAgICAgICAgICAgICBfYygiaDUiLCBbX2MoImIiLCBbX3ZtLl92KCJGdW5jdGlvbiBjYWxsIildKV0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJoNSIsIFtfdm0uX3YoIlByaW50RnVsbE5hbWUoRmlyc3ROYW1lLExhc3ROYW1lKSIpXSksCiAgICAgICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICJXaGlsZSBjYWxsaW5nIGZ1bmN0aW9uLCBtYWtlIHN1cmUgdGhhdCB0aGUgRnVuY3Rpb24gbmFtZSBkZWNsYXJhdGlvbiBpcyBzYW1lIGFzIGEgZnVuY3Rpb24gY2FsbC4gIgogICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgRm9yIGUuZyBQcmludEZ1bGxOYW1l4omgcHJpbnRmdWxsbmFtZSAiKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJoNSIsIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJiIiwgWwogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgIkZ1bmN0aW9uIEFyZ3VtZW50IFZhbHVlcyBQYXNzZWQtICgnU2FjaGluJywnVGVuZHVsa2FyJykiCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICJBcyBwZXIgdGhlIGdyYW1tZXIgc2V0IHVuZGVyIHRoZSBob29kIG9mIHRoaXMgcHJvZ3JhbW1pbmcgbGFuZ3VhZ2UsICggeCAsIHkgKSB3aWxsIGJlY29tZSAoJ1NhY2hpbicsJ1RlbmR1bGthcicpLiAiCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoInggd2lsbCB0YWtlIGEgdGVtcG9yYXJ5IHZhbHVlIG9mICdTYWNoaW4nIikKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigieSB3aWxsIHRha2UgYSB0ZW1wb3JhcnkgdmFsdWUgb2YgJ1RlbmR1bGthciciKQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgWwogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAiVHJ5Q29kZWJ0biIgfSwKICAgICAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLkNvcHlDb2RlKCJDb2RlSUQyIikKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCJQbGF5IHdpdGggdGhlIENvZGUiKV0KICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBhdHRyczogeyBpZDogIkNvZGVQYXJhIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJwcmUiLCB7IGF0dHJzOiB7IGlkOiAiQ29kZUlEMiIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAiXG5cblxuI1lPVSBDQU4gUFJFIERFRklORSBUSEUgVkFSSUFCTEVTXG4jWU9VIENBTiBBTFNPIEFDQ0VQVCBUSEVNIEFTIElOUFVUICBcblxuRmlyc3ROYW1lPSdTYWNoaW4nXG5cbkxhc3ROYW1lPSdUZW5kdWxrYXInXG5cbk5ld0ZpcnN0TmFtZT0nU3VuaWwnXG5cbk5ld0xhc3ROYW1lPSdDaGV0cmknXG5cbiNGVU5DVElPTiBERUNMQVJBVElPTi0gTkFNRSBZT1VSIEZVTkNUSU9OIEFORCBBUkdVTUVOVFNcblxu4KSw4KSa4KSo4KS+IFByaW50RnVsbE5hbWUoRmlyc3QsTGFzdClcblxue1xuXG7gpKrgpY3gpLDgpL/gpILgpJ8oRmlyc3QgKyBMYXN0KVxuXG5cblxufVxuXG4jRlVOQ1RJT04gRVhFQ1VUSU9OIEVYQU1QTEVTLSBQQVNTIFRIRSBESUZGRVJFTlQgREVTSVJFRCBWQUxVRVMgQVMgQVJHVU1FTlRTXG5cblByaW50RnVsbE5hbWUoRmlyc3ROYW1lLExhc3ROYW1lKVxuXG5QcmludEZ1bGxOYW1lKE5ld0ZpcnN0TmFtZSxOZXdMYXN0TmFtZSlcblxuXG5cbiNGVU5DVElPTiBFWEFNUExFIDJcblxuSm9iPSdEb2N0b3InXG5DaXR5PSdQdW5lJ1xuXG4jRlVOQ1RJT04gREVDTEFSQVRJT04tIE5BTUUgWU9VUiBGVU5DVElPTiBBTkQgQVJHVU1FTlRTXG5cbuCksOCkmuCkqOCkviBBYm91dE1lKHgseSlcblxue1xuXG5cblxu4KSq4KWN4KSw4KS/4KSC4KSfKFwiSSBhbSBhXCIgKyB4ICsgXCJpblwiICsgeSlcblxuXG59XG5cbiNGVU5DVElPTiBFWEVDVVRJT05cblxuXG5BYm91dE1lKEpvYixDaXR5KVxuXG5cbiAjRXhhbXBsZSAzXG5cblxuTnVtYmVyT25lPTIwXG5OdW1iZXJUd289NDBcblxu4KSw4KSa4KSo4KS+IEFkZChhLGIpXG57XG5cbmM9YStiXG5cbuCkquCljeCksOCkv+CkguCknyhjKVxuXG5cbn1cblxuXG5BZGQoTnVtYmVyT25lLE51bWJlclR3bylcblxuXG4gXG5cbiBcblxuXG5cblxuIFxuXG4gXG5cbiIKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICA6IF92bS5fZSgpCiAgICAgICAgICBdKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfYygKICAgICAgICAiYnV0dG9uIiwKICAgICAgICB7CiAgICAgICAgICBzdGF0aWNDbGFzczogImNvbGxhcHNpYmxlIiwKICAgICAgICAgIGF0dHJzOiB7IHR5cGU6ICJidXR0b24iIH0sCiAgICAgICAgICBvbjogewogICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgX3ZtLnNob3dTdGFyMiA9ICFfdm0uc2hvd1N0YXIyCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIFtfdm0uX3YoIuCkh+CkqOCkquClgeCknygpIildCiAgICAgICksCiAgICAgIF9jKCJ0cmFuc2l0aW9uIiwgeyBhdHRyczogeyBuYW1lOiAic2xpZGUtZmFkZSIgfSB9LCBbCiAgICAgICAgX3ZtLnNob3dTdGFyMgogICAgICAgICAgPyBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRlbnQiIH0sIFsKICAgICAgICAgICAgICBfYygiZGl2IiwgWwogICAgICAgICAgICAgICAgX2MoImgyIiwgW192bS5fdigiVXNhZ2UiKV0pLAogICAgICAgICAgICAgICAgX2MoImg1IiwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoIiBBY2NlcHQgYW4gSW5wdXQgYW5kIHNldCBpdCB0byBhIFZhcmlhYmxlICIpCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJoMiIsIFtfdm0uX3YoIkltcGxlbWVudGF0aW9uIildKSwKICAgICAgICAgICAgICAgIF9jKCJoNCIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCIxOiBQYXNzIGEgVmFyaWFibGUgaW5zaWRlICIpLAogICAgICAgICAgICAgICAgICBfYygiaSIsIFtfdm0uX3YoIiDgpIfgpKjgpKrgpYHgpJ8oKSAiKV0pCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJoNSIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCLgpIfgpKjgpKrgpYHgpJ8oIiksCiAgICAgICAgICAgICAgICAgIF9jKCJpIiwgW192bS5fdigiIFlvdXJWYXJpYWJsZSAiKV0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoIikiKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfYygiaDIiLCBbX3ZtLl92KCIgRXhhbXBsZSIpXSksCiAgICAgICAgICAgICAgICBfYygiaDUiLCBbX3ZtLl92KCLgpIfgpKjgpKrgpYHgpJ8oTmFtZSkiKV0pLAogICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiSWYgeW91IGhhdmUgZW50ZXJlZCAiKSwKICAgICAgICAgICAgICAgICAgX2MoImkiLCBbX3ZtLl92KCJLYWxhbSIpXSksCiAgICAgICAgICAgICAgICAgIF92bS5fdigiIGFzIGlucHV0IHRoZW4gY29tcGxpZXIgd2lsbCBzZXQgIiksCiAgICAgICAgICAgICAgICAgIF9jKCJiIiwgW192bS5fdignIE5hbWU9IkthbGFtIi4nKV0pCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIk9uY2UgdGhlIHZhbHVlIGlzIHNldCwgeW91IGNhbiB1c2UgdGhhdCB2YXJpYWJsZSB2YWx1ZSB0aHJvdWdob3V0IHRoZSBwcm9ncmFtLiAiCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImRpdiIsIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiYnV0dG9uIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAiVHJ5Q29kZWJ0biIgfSwKICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLkNvcHlDb2RlKCJDb2RlSUQxIikKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIlBsYXkgd2l0aCB0aGUgQ29kZSIpXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBhdHRyczogeyBpZDogIkNvZGVQYXJhIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgX2MoInByZSIsIHsgYXR0cnM6IHsgaWQ6ICJDb2RlSUQxIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAiXG5cbiNQQVNTIEEgVkFSSUFCTEUgVE8gR1JBQiBUSEUgVkFMVUVcblxu4KSH4KSo4KSq4KWB4KSfKE5hbWUpXG5cbiNDSEVDSyBUSEUgQUNDRVBURUQgVkFSSUFCTEUgVkFMVUVcbiBcbuCkquCljeCksOCkv+CkguCknyhOYW1lKVxuXG5cbiBcblxuIgogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIDogX3ZtLl9lKCkKICAgICAgXSksCiAgICAgIF9jKAogICAgICAgICJidXR0b24iLAogICAgICAgIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY29sbGFwc2libGUiLAogICAgICAgICAgYXR0cnM6IHsgdHlwZTogImJ1dHRvbiIgfSwKICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICBfdm0uc2hvd1N0YXIzID0gIV92bS5zaG93U3RhcjMKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgW192bS5fdigi4KSF4KSX4KSwKCkiKV0KICAgICAgKSwKICAgICAgX2MoInRyYW5zaXRpb24iLCB7IGF0dHJzOiB7IG5hbWU6ICJzbGlkZS1mYWRlIiB9IH0sIFsKICAgICAgICBfdm0uc2hvd1N0YXIzCiAgICAgICAgICA/IF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGVudCIgfSwgWwogICAgICAgICAgICAgIF9jKCJkaXYiLCBbCiAgICAgICAgICAgICAgICBfYygiaDIiLCBbX3ZtLl92KCJVc2FnZSIpXSksCiAgICAgICAgICAgICAgICBfYygiaDUiLCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiIEFsbG93IGNvZGUgZXhlY3V0aW9uIG9uIGEgY2VydGFpbiBjb25kaXRpb24uIEV2YWx1YXRlcyB0byBUUlVUSCBvciBGYWxzZSAiCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoImgyIiwgW192bS5fdigiSW1wbGVtZW50YXRpb24iKV0pLAogICAgICAgICAgICAgICAgX2MoImg0IiwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoIjE6IFBhc3MgYSBTaW5nbGUgQ29uZGl0aW9uIHRvIEV2YWx1YXRlIGluIOCkheCkl+CksCgpICIpCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJoNSIsIFtfdm0uX3YoIiDgpIXgpJfgpLAgKExhbmd1YWdlPT0na2FsYW0nKSAiKV0pLAogICAgICAgICAgICAgICAgX2MoImg1IiwgW192bS5fdigiIOCkheCkl+CksCAoQWdlID4gMTgpICIpXSksCiAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgX2MoImIiLCBbX3ZtLl92KCIgVGhlIGFjY2VwdGVkIGNvbXBhcmlzb24gb3BlcmF0b3JzIGFyZTogIildKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfYygicCIsIFtfYygiYiIsIFtfdm0uX3YoIj4iKV0pLCBfdm0uX3YoIiAtIEdyZWF0ZXIgdGhhbiIpXSksCiAgICAgICAgICAgICAgICBfYygicCIsIFtfYygiYiIsIFtfdm0uX3YoIjwiKV0pLCBfdm0uX3YoIiAtIExlc3MgdGhhbiIpXSksCiAgICAgICAgICAgICAgICBfYygicCIsIFtfYygiYiIsIFtfdm0uX3YoIj09IildKSwgX3ZtLl92KCIgLSBpcyBFcXVhbCB0byIpXSksCiAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgX2MoImIiLCBbX3ZtLl92KCIhPSIpXSksCiAgICAgICAgICAgICAgICAgIF92bS5fdigiIC0gaXMgTm90IEVxdWFsIHRvIikKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoImg0IiwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoIjI6IFBhc3MgYSBNdWx0aSBDb25kaXRpb24gdG8gRXZhbHVhdGUgaW4g4KSF4KSX4KSwKCkgIikKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoImg1IiwgW192bS5fdigi4KSF4KSX4KSwIChBZ2U+MTYgJiYgRWR1Y2F0aW9uID09J3NzYycpIildKSwKICAgICAgICAgICAgICAgIF9jKCJoNSIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCLgpIXgpJfgpLAgKENvdW50cnk9PSdpbmRpYScgfHwgTGFuZ3VhZ2U9PSdoaW5kaScpIikKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgIF9jKCJiIiwgW192bS5fdigiIFRoZSBhY2NlcHRlZCBjb21wYXJpc29uIG9wZXJhdG9ycyBhcmU6ICIpXSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgIF9jKCJiIiwgW192bS5fdigiJiYiKV0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIiAtIElmIEJPVEggb2YgdGhlIGNvbmRpdGlvbnMgYXJlIHRydWUsIGV2YWx1YXRlcyB0byBUUlVFIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgICBfYygiYiIsIFtfdm0uX3YoInx8IildKSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIgLSBJZiBPTkUgb2YgdGhlIGNvbmRpdGlvbnMgaXMgdHJ1ZSwgZXZhbHVhdGVzIHRvIFRSVUUiCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImRpdiIsIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiYnV0dG9uIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAiVHJ5Q29kZWJ0biIgfSwKICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLkNvcHlDb2RlKCJDb2RlSUQxIikKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIlBsYXkgd2l0aCB0aGUgQ29kZSIpXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBhdHRyczogeyBpZDogIkNvZGVQYXJhIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgX2MoInByZSIsIHsgYXR0cnM6IHsgaWQ6ICJDb2RlSUQxIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAiXG4jQUNDRVBUIEFOIElOUFVUXG5cbuCkh+CkqOCkquClgeCknyhsYW5ndWFnZSlcblxuI0VWQUxVQVRFIFRIRSBDT05ESVRJT05cblxu4KSF4KSX4KSwKGxhbmd1YWdlPT0na2FsYW0nKVxuXG57XG5cbiNJRiBDT05ESVRJT04gSVMgVFJVRSwgUlVOIFRISVMuXG5cbuCkquCljeCksOCkv+CkguCknygnQWxyaWdodCwgdGhhdCdzIGNvb2whJylcblxuXG59XG5cblxuRVhBTVBMRSAyXG5cbiNBQ0NFUFQgSU5QVVRTXG5cbuCkh+CkqOCkquClgeCknyhsYW5ndWFnZSlcblxu4KSH4KSo4KSq4KWB4KSfKGNvdW50cnkpXG5cbiNFVkFMVUFURSBUSEUgQ09ORElUSU9OXG5cbuCkheCkl+CksChsYW5ndWFnZT09J2thbGFtJyB8fCBjb3VudHJ5PT0naW5kaWEnKVxue1xuXG4jSUYgT05FIE9GIFRIRSBDT05ESVRJT04gSVMgVFJVRSwgUlVOIFRISVNcblxuXG7gpKrgpY3gpLDgpL/gpILgpJ8oJ1RoYXQgd29ya3MgdG9vLicpXG5cblxufVxuXG5cblxuIFxuXG4iCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgOiBfdm0uX2UoKQogICAgICBdKSwKICAgICAgX2MoCiAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgewogICAgICAgICAgc3RhdGljQ2xhc3M6ICJjb2xsYXBzaWJsZSIsCiAgICAgICAgICBhdHRyczogeyB0eXBlOiAiYnV0dG9uIiB9LAogICAgICAgICAgb246IHsKICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgIF92bS5zaG93U3RhcjggPSAhX3ZtLnNob3dTdGFyOAogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBbX3ZtLl92KCLgpIXgpKjgpY3gpK/gpKXgpL4iKV0KICAgICAgKSwKICAgICAgX2MoInRyYW5zaXRpb24iLCB7IGF0dHJzOiB7IG5hbWU6ICJzbGlkZS1mYWRlIiB9IH0sIFsKICAgICAgICBfdm0uc2hvd1N0YXI4CiAgICAgICAgICA/IF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGVudCIgfSwgWwogICAgICAgICAgICAgIF9jKCJkaXYiLCBbCiAgICAgICAgICAgICAgICBfYygiaDIiLCBbX3ZtLl92KCJVc2FnZSIpXSksCiAgICAgICAgICAgICAgICBfYygiaDUiLCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiIFJ1biBhIGJsb2NrIG9mIGNvZGUgaWYgbm9uZSBvZiB0aGUgY29uZGl0aW9ucyBhcmUgc2F0aXNmaWVkIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJoMiIsIFtfdm0uX3YoIkltcGxlbWVudGF0aW9uIildKSwKICAgICAgICAgICAgICAgIF9jKCJoNCIsIFtfdm0uX3YoIjE6IERlZmluZSAiKV0pLAogICAgICAgICAgICAgICAgX2MoImg1IiwgW192bS5fdigi4KSF4KSo4KWN4KSv4KSl4KS+ICIpXSksCiAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIgUGxlYXNlIG5vdGUgdGhhdCDgpIXgpKjgpY3gpK/gpKXgpL4gZG9lcyBub3QgdGFrZSBhbnkgYXJndW1lbnRzIGV2ZW4gaWYgaXQgaGFzIG9wZW4gYnJhY2tldHMuICIKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICJJIGp1c3QgZGlkbid0IHdhbnQgdG8gc25hdGNoIHRoYXQgc3VwZXJwb3dlciBhd2F5IGZvbSBoZXIuIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJkaXYiLCBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBpZDogIlRyeUNvZGVidG4iIH0sCiAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5Db3B5Q29kZSgiQ29kZUlEMSIpCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbX3ZtLl92KCJQbGF5IHdpdGggdGhlIENvZGUiKV0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygicCIsIHsgYXR0cnM6IHsgaWQ6ICJDb2RlUGFyYSIgfSB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJwcmUiLCB7IGF0dHJzOiB7IGlkOiAiQ29kZUlEMSIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgIlxuXG4jQUNDRVBUIEFOIElOUFVUXG5cbmxhbmd1YWdlPSdrYWxhbSdcblxuI0VWQUxVQVRFIFRIRSBDT05ESVRJT05cblxu4KSF4KSX4KSwKGxhbmd1YWdlPT0na2FsYW0nKVxuXG57XG5cbiNJRiBDT05ESVRJT04gSVMgVFJVRSwgUlVOIFRISVMuXG5cbuCkquCljeCksOCkv+CkguCknygnQWxyaWdodCwgdGhhdCdzIGNvb2whJylcblxuXG59XG5cbiNJRiBOT05FIE9GIFRIRSBDT05ESVRJT05TIEFSRSBTQVRJU0ZJRUQsIFJVTiBUSElTLlxuXG7gpIXgpKjgpY3gpK/gpKXgpL5cbntcblxu4KSq4KWN4KSw4KS/4KSC4KSfKCdTb3JyeSwgdGhhdCBkaWQgbm90IHdvcmtlZCEnKVxuXG5cblxufVxuXG5cblxuIFxuXG4iCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgOiBfdm0uX2UoKQogICAgICBdKSwKICAgICAgX2MoCiAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgewogICAgICAgICAgc3RhdGljQ2xhc3M6ICJjb2xsYXBzaWJsZSIsCiAgICAgICAgICBhdHRyczogeyB0eXBlOiAiYnV0dG9uIiB9LAogICAgICAgICAgb246IHsKICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgIF92bS5zaG93U3RhcjQgPSAhX3ZtLnNob3dTdGFyNAogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBbX3ZtLl92KCLgpKbgpYHgpLngpLDgpL7gpJMgeCDgpJXgpYsgeSDgpK7gpYciKV0KICAgICAgKSwKICAgICAgX2MoInRyYW5zaXRpb24iLCB7IGF0dHJzOiB7IG5hbWU6ICJzbGlkZS1mYWRlIiB9IH0sIFsKICAgICAgICBfdm0uc2hvd1N0YXI0CiAgICAgICAgICA/IF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGVudCIgfSwgWwogICAgICAgICAgICAgIF9jKCJkaXYiLCBbCiAgICAgICAgICAgICAgICBfYygiaDIiLCBbX3ZtLl92KCJVc2FnZSIpXSksCiAgICAgICAgICAgICAgICBfYygiaDUiLCBbX3ZtLl92KCIgUnVuIGEgcGFydGljdWxhciBjb2RlIG11bHRpcGxlIHRpbWVzIildKSwKICAgICAgICAgICAgICAgIF9jKCJoMiIsIFtfdm0uX3YoIkltcGxlbWVudGF0aW9uIildKSwKICAgICAgICAgICAgICAgIF9jKCJoNCIsIFtfdm0uX3YoIjE6IERlZmluZSB0aGUgbG9vcCAiKV0pLAogICAgICAgICAgICAgICAgX2MoImg1IiwgW19jKCJiIiwgW192bS5fdigiIOCkpuClgeCkueCksOCkvuCkkyB4IOCkleCliyB5IOCkruClhyAiKV0pXSksCiAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIgSGVyZSB5IGlzIGEgcmFuZ2UgYW5kIGNhbiBiZSBkZWZpbmVkIGFzICgwLDEwKSwgKDUsMTAwKSBldGMuICIKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICIgSGVyZSB4IGlzIGFuIGluZGV4IG9yIGl0ZXJhdG9yLiBGb3IgZS5nIHggdGFrZXMgdmFsdWVzIGZyb20gMSBhbmQgMTAgKGJvdGggaW5jbHVzaXZlKSBpbiAoMCwxMCkgIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJoNSIsIFtfYygiYiIsIFtfdm0uX3YoIiDgpKbgpYHgpLngpLDgpL7gpJMgeCDgpJXgpYsgQ2l0eSDgpK7gpYcgIildKV0pLAogICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiSGVyZSBpbnN0ZWFkIG9mIGEgY3VzdG9tIHJhbmdlIHdlIGl0ZXJhdGUgaXQgb3ZlciB0aGUgbGVuZ3RoIG9mIHZhcmlhYmxlLiIKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICJCYXNpY2FsbHksIGlmIENpdHk9J1B1c2FkJywgdGhlIHJhbmdlIHdpbGwgYmUgYXV0b21hdGljYWxseSBzZXQgYXMgKDAsNSkgYmVjYXVzZSBsZW5ndGggb2YgJ1B1c2FkJyBpcyA1LiAiCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoInAiKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJkaXYiLCBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBpZDogIlRyeUNvZGVidG4iIH0sCiAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5Db3B5Q29kZSgiQ29kZUlEMSIpCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbX3ZtLl92KCJQbGF5IHdpdGggdGhlIENvZGUiKV0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygicCIsIHsgYXR0cnM6IHsgaWQ6ICJDb2RlUGFyYSIgfSB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJwcmUiLCB7IGF0dHJzOiB7IGlkOiAiQ29kZUlEMSIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgJ1xuI0VYQU1QTEUgMSAgXG5cbiNERUZJTkUgQSBSQU5HRSBBTkQgQU4gSVRFUkFUT1Jcblxu4KSm4KWB4KS54KSw4KS+4KSTIHgg4KSV4KWLICgwLDEwKSDgpK7gpYdcblxue1xuXG52YWx1ZT0geCo1XG5cbuCkquCljeCksOCkv+CkguCknyh2YWx1ZSlcblxufVxuXG5cbiNFWEFNUExFIDIgIFxuXG4jREVGSU5FIEEgVkFSSUFCTEUgQU5EIEFOIElURVJBVE9SXG5cbk5hbWU9IkhBTEYgQ09PS0VEIFJJQ0UiXG5cbuCkpuClgeCkueCksOCkvuCkkyB5IOCkleCliyBOYW1lIOCkruClh1xuXG57XG5cbnZhbHVlPU5hbWVbeV1cblxu4KSq4KWN4KSw4KS/4KSC4KSfKHZhbHVlICsgeSlcblxufVxuXG5cblxuXG5cbiBcblxuJwogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIDogX3ZtLl9lKCkKICAgICAgXSksCiAgICAgIF9jKAogICAgICAgICJidXR0b24iLAogICAgICAgIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY29sbGFwc2libGUiLAogICAgICAgICAgYXR0cnM6IHsgdHlwZTogImJ1dHRvbiIgfSwKICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICBfdm0uc2hvd1N0YXI1ID0gIV92bS5zaG93U3RhcjUKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgW192bS5fdigi4KSc4KSs4KSk4KSVKCkiKV0KICAgICAgKSwKICAgICAgX2MoInRyYW5zaXRpb24iLCB7IGF0dHJzOiB7IG5hbWU6ICJzbGlkZS1mYWRlIiB9IH0sIFsKICAgICAgICBfdm0uc2hvd1N0YXI1CiAgICAgICAgICA/IF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGVudCIgfSwgWwogICAgICAgICAgICAgIF9jKCJkaXYiLCBbCiAgICAgICAgICAgICAgICBfYygiaDIiLCBbX3ZtLl92KCJVc2FnZSIpXSksCiAgICAgICAgICAgICAgICBfYygiaDUiLCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiUnVuIGEgcGFydGljdWxhciBjb2RlIHVudGlsIGEgY2VydGFpbiBjb25kaXRpb24gaXMgbWV0IgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJoMiIsIFtfdm0uX3YoIkltcGxlbWVudGF0aW9uIildKSwKICAgICAgICAgICAgICAgIF9jKCJoNCIsIFtfdm0uX3YoIjE6IERlZmluZSAiKV0pLAogICAgICAgICAgICAgICAgX2MoImg1IiwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoIuCknOCkrOCkpOCklSgiKSwKICAgICAgICAgICAgICAgICAgX2MoImkiLCBbX3ZtLl92KCJZb3VyQ29uZGl0aW9uIildKSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgKSAiKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgX2MoImIiLCBbX3ZtLl92KCIgVGhlIGFjY2VwdGVkIGNvbXBhcmlzb24gb3BlcmF0b3JzIGFyZTogIildKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfYygicCIsIFtfYygiYiIsIFtfdm0uX3YoIj4iKV0pLCBfdm0uX3YoIiAtIEdyZWF0ZXIgdGhhbiIpXSksCiAgICAgICAgICAgICAgICBfYygicCIsIFtfYygiYiIsIFtfdm0uX3YoIjwiKV0pLCBfdm0uX3YoIiAtIExlc3MgdGhhbiIpXSksCiAgICAgICAgICAgICAgICBfYygicCIsIFtfYygiYiIsIFtfdm0uX3YoIj09IildKSwgX3ZtLl92KCIgLSBpcyBFcXVhbCB0byIpXSksCiAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgX2MoImIiLCBbX3ZtLl92KCIhPSIpXSksCiAgICAgICAgICAgICAgICAgIF92bS5fdigiIC0gaXMgTm90IEVxdWFsIHRvIikKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoImgyIiwgW192bS5fdigiIEV4YW1wbGUiKV0pLAogICAgICAgICAgICAgICAgX2MoImg1IiwgW19jKCJiIiwgW192bS5fdigi4KSc4KSs4KSk4KSVKGNvdW50PDI1KSIpXSldKSwKICAgICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIlRoZSBjb2RlIHdpbGwgcnVuIHVudGlsIHRoZSBjb25kaXRpb24gZXZhbHVhdGVzIGl0c2VsZiB0byB0cnVlLiAiCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAiV2hlbiB0aGUgdmFsdWUgb2YgY291bnQgcmVhY2hlcyAyNiwgY29kZSBleGVjdXRpb24gd2lsbCBzdG9wLiAiCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImRpdiIsIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiYnV0dG9uIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAiVHJ5Q29kZWJ0biIgfSwKICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLkNvcHlDb2RlKCJDb2RlSUQxIikKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIlBsYXkgd2l0aCB0aGUgQ29kZSIpXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBhdHRyczogeyBpZDogIkNvZGVQYXJhIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgX2MoInByZSIsIHsgYXR0cnM6IHsgaWQ6ICJDb2RlSUQxIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAiXG5cblxuY291bnQ9MFxuXG4jRVZBTFVBVEUgVEhFIENPTkRJVElPTi4gSUYgVFJVRSwgS0VFUCBPTiBSVU5OSU5HLlxuXG7gpJzgpKzgpKTgpJUoY291bnQ8MjUpXG57XG5cbuCkquCljeCksOCkv+CkguCknyhjb3VudClcblxuI1VQREFURSBUSEUgVkFMVUUgT0YgQ09VTlQgT04gRUFDSCBJVEVSQVRJT05cblxuY291bnQ9Y291bnQrMVxuXG5cbn1cblxuXG5cblxuXG4gXG5cbiIKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICA6IF92bS5fZSgpCiAgICAgIF0pLAogICAgICBfYygKICAgICAgICAiYnV0dG9uIiwKICAgICAgICB7CiAgICAgICAgICBzdGF0aWNDbGFzczogImNvbGxhcHNpYmxlIiwKICAgICAgICAgIGF0dHJzOiB7IHR5cGU6ICJidXR0b24iIH0sCiAgICAgICAgICBvbjogewogICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgX3ZtLnNob3dTdGFyNiA9ICFfdm0uc2hvd1N0YXI2CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIFtfdm0uX3YoIi7gpLjgpILgpJbgpY3gpK/gpL4oKSIpXQogICAgICApLAogICAgICBfYygidHJhbnNpdGlvbiIsIHsgYXR0cnM6IHsgbmFtZTogInNsaWRlLWZhZGUiIH0gfSwgWwogICAgICAgIF92bS5zaG93U3RhcjYKICAgICAgICAgID8gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250ZW50IiB9LCBbCiAgICAgICAgICAgICAgX2MoImRpdiIsIFsKICAgICAgICAgICAgICAgIF9jKCJoMiIsIFtfdm0uX3YoIlVzYWdlIildKSwKICAgICAgICAgICAgICAgIF9jKCJoNSIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgRGlyZWN0bHkgZmluZCBvdXQgdGhlIGxlbmd0aCBvZiBhIFN0cmluZyBvciBBcnJheSIpCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJoMiIsIFtfdm0uX3YoIkltcGxlbWVudGF0aW9uIildKSwKICAgICAgICAgICAgICAgIF9jKCJoNCIsIFtfdm0uX3YoIjE6IERlZmluZSIpXSksCiAgICAgICAgICAgICAgICBfYygiaDUiLCBbCiAgICAgICAgICAgICAgICAgIF9jKCJpIiwgW192bS5fdigiWW91clZhcmlhYmxlIildKSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KCIu4KS44KSC4KSW4KWN4KSv4KS+KCkgIikKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoImgyIiwgW192bS5fdigiIEV4YW1wbGUiKV0pLAogICAgICAgICAgICAgICAgX2MoImg1IiwgW19jKCJiIiwgW192bS5fdigiQ2l0eS7gpLjgpILgpJbgpY3gpK/gpL4oKSIpXSldKSwKICAgICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIklmIENpdHk9J0Jhbmdsb3JlJyB0aGVuIENpdHku4KS44KSC4KSW4KWN4KSv4KS+KCkgd2lsbCBvdXRwdXQgdGhlIHZhbHVlICIKICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgX2MoImIiLCBbX3ZtLl92KCI4IildKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICJJZiBDaXR5PVsnUHVzYWQnLCdQdW5lJywnTXVtYmFpJywnRGVsaGknXSB0aGVuIENpdHku4KS44KSC4KSW4KWN4KSv4KS+KCkgd2lsbCBvdXRwdXQgdGhlIHZhbHVlICIKICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgX2MoImIiLCBbX3ZtLl92KCI0IildKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiZGl2IiwgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJidXR0b24iLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJUcnlDb2RlYnRuIiB9LAogICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uQ29weUNvZGUoIkNvZGVJRDEiKQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigiUGxheSB3aXRoIHRoZSBDb2RlIildCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoInAiLCB7IGF0dHJzOiB7IGlkOiAiQ29kZVBhcmEiIH0gfSwgWwogICAgICAgICAgICAgICAgICBfYygicHJlIiwgeyBhdHRyczogeyBpZDogIkNvZGVJRDEiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICJcblxuI0RFRklORSBUSEUgVkFSSUFCTEVTLiBFSVRIRVIgU1RSSU5HIE9SIEFSUkFZXG5cbkNpdHk9J0Jhbmdsb3JlJ1xuXG5DaXRpZXM9WydQdXNhZCcsJ1B1bmUnLCdNdW1iYWknLCdEZWxoaSddXG5cbiNGSU5EIE9VVCBUSEUgTEVOR1RIXG5cbkNpdHlsZW5ndGg9IENpdHku4KS44KSC4KSW4KWN4KSv4KS+KClcblxuQ2l0aWVzbGVuZ3RoPUNpdGllcy7gpLjgpILgpJbgpY3gpK/gpL4oKVxuXG4jUFJJTlQgVEhFIExFTkdUSFxuXG4jQ0FOIFlPVSBQUklOVCBUSEUgTEVOR1RIIFdJVEhPVVQgVVNJTkcgXCIu4KS44KSC4KSW4KWN4KSv4KS+KClcIlwiID9cblxu4KSq4KWN4KSw4KS/4KSC4KSfKCdUaGUgbGVuZ3RoIG9mIHRoZSBDaXR5IGlzJyArIENpdHlsZW5ndGggKVxuXG7gpKrgpY3gpLDgpL/gpILgpJ8oJ1RoZSBsZW5ndGggb2YgdGhlIENpdGllcyBpcycgKyBDaXRpZXNsZW5ndGggKVxuXG5cblxuXG4gXG5cbiIKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICA6IF92bS5fZSgpCiAgICAgIF0pLAogICAgICBfYygKICAgICAgICAiYnV0dG9uIiwKICAgICAgICB7CiAgICAgICAgICBzdGF0aWNDbGFzczogImNvbGxhcHNpYmxlIiwKICAgICAgICAgIGF0dHJzOiB7IHR5cGU6ICJidXR0b24iIH0sCiAgICAgICAgICBvbjogewogICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgX3ZtLnNob3dTdGFyNyA9ICFfdm0uc2hvd1N0YXI3CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIFtfdm0uX3YoIi7gpKrgpYHgpLYoKSIpXQogICAgICApLAogICAgICBfYygidHJhbnNpdGlvbiIsIHsgYXR0cnM6IHsgbmFtZTogInNsaWRlLWZhZGUiIH0gfSwgWwogICAgICAgIF92bS5zaG93U3RhcjcKICAgICAgICAgID8gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250ZW50IiB9LCBbCiAgICAgICAgICAgICAgX2MoImRpdiIsIFsKICAgICAgICAgICAgICAgIF9jKCJoMiIsIFtfdm0uX3YoIlVzYWdlIildKSwKICAgICAgICAgICAgICAgIF9jKCJoNSIsIFtfdm0uX3YoIiBQdXNoIHZhbHVlcyB0byBhcnJheSIpXSksCiAgICAgICAgICAgICAgICBfYygiaDIiLCBbX3ZtLl92KCJJbXBsZW1lbnRhdGlvbiIpXSksCiAgICAgICAgICAgICAgICBfYygiaDQiLCBbX3ZtLl92KCIxOiBQdXNoIFZhbHVlIHRvIGFuIEFycmF5ICIpXSksCiAgICAgICAgICAgICAgICBfYygiaDUiLCBbX2MoImkiLCBbX3ZtLl92KCJBcnJheU5hbWUiKV0pLCBfdm0uX3YoIiA9W10gIildKSwKICAgICAgICAgICAgICAgIF9jKCJoNSIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCJBcnJheU5hbWUu4KSq4KWB4KS2KCIpLAogICAgICAgICAgICAgICAgICBfYygiaSIsIFtfdm0uX3YoIllvdXJWYWx1ZSIpXSksCiAgICAgICAgICAgICAgICAgIF92bS5fdigiKSAiKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiZGl2IiwgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJidXR0b24iLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJUcnlDb2RlYnRuIiB9LAogICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uQ29weUNvZGUoIkNvZGVJRDEiKQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigiUGxheSB3aXRoIHRoZSBDb2RlIildCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoInAiLCB7IGF0dHJzOiB7IGlkOiAiQ29kZVBhcmEiIH0gfSwgWwogICAgICAgICAgICAgICAgICBfYygicHJlIiwgeyBhdHRyczogeyBpZDogIkNvZGVJRDEiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICJcblxuXG4jRVhBTVBMRSAxXG5cbk51bWJlcnM9W11cblxu4KSm4KWB4KS54KSw4KS+4KSTIHgg4KSV4KWLICgxLDEwKVxuXG57XG5cbiNQVVNIIENVUlJFTlQgVkFMVUUgT0YgWCBJTlRPIE5VTUJFUlMgQVJSQVlcblxuTnVtYmVycy7gpKrgpYHgpLYoeClcblxuXG59XG5cbuCkquCljeCksOCkv+CkguCknyhOdW1iZXJzKVxuXG5cbiNFWEFNUExFIDJcblxuTnVtYmVycz1bXVxuXG5cblxuI1BVU0ggREVGSU5FRCBWQUxVRVMgVE8gQSBERUZJTkVEIEFSUkFZLiBcblxuXG5OYW1lPSdTd2FuYW5kJ1xuUm9sZT0nRGV2ZWxvcGVyJ1xuXG4jSU4gVEhJUyBDQVNFIEFSUkFZIElTIE5VTUJFUlNcblxuTnVtYmVycy7gpKrgpYHgpLYoJ2hpaScpXG5OdW1iZXJzLuCkquClgeCktihOYW1lKVxuXG5OdW1iZXJzLuCkquClgeCktihSb2xlKVxuXG5cblxu4KSq4KWN4KSw4KS/4KSC4KSfKE51bWJlcnMpXG5cblxuXG4gXG5cbiIKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICA6IF92bS5fZSgpCiAgICAgIF0pCiAgICBdLAogICAgMQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}