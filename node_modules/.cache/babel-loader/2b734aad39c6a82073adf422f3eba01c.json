{"remainingRequest":"/Users/jonny/Documents/Work/test/node_modules/babel-loader/lib/index.js!/Users/jonny/Documents/Work/test/src/lib/MiscImportantFunctions.js","dependencies":[{"path":"/Users/jonny/Documents/Work/test/src/lib/MiscImportantFunctions.js","mtime":1592716139838},{"path":"/Users/jonny/Documents/Work/test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jonny/Documents/Work/test/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/jonny/Documents/Work/test/src/lib/MiscImportantFunctions.js"],"names":["Number","SourceDataReplaceforEasyParsing","isEmptyStringorChar","element","charAt","isPureEval","test","isCalculation","isNumber","includes","length","RemoveBrackets","a","replace","b","c","d","Count","item","count","i","isArrayOperation","GetCleanSourcedata","sourcedata","cleaned_sourcedata","impurities","forEach","indexOf","push","elements","split","index","filter","SplitElementsArray","StringVar","StrVar","j","getLoopIndexStart","mutable_tokens","check","setIndex","value","handlemultConditions","condition","substring","SweepedElement","operator","AddElementToArray","Sourcedata","updated_tokens","token","Split","Array","ElementtoPush","find","el","name","ArrayEl","ArrayValue","indexofArray","AcceptInputandSetValue","tokens","SetInputValueAs","AcceptAs","prompt","CalculateValues","calculation","IterationStart","global","flag","error","calculationArray","SetValues","joinStringVar","join","NewStringVar","eval","undefined","toString","PushSetArrayIndexValue","data","type","ValueToSet","PushGetArrayIndexValue","CreateArrayElement","Value","iterator","ArrayElement","SetArrayorStringElement","NewValue","indexCollected","Element","GetArrayorStringElement","ForLoopArrayorStringOutput","elementValue","CurrentElement","FoundValue","output","ArrayElementValue","UpdateUpdated_tokenswithValues","payload","HandleBlocks","StoreResult","ArrayBrackets","x","pop","startIndex","EndIndex","HandleConditions","SplitArray","Values","ForLoopConditionValue","SplitandJoin","array","Joinarray","AccumulateValue","ResetValue","AssignorUpdateValues","OriginalIterator","variable","variableType","varvalue","varvalueType","Itemvalue","ItemvalueLength","identifier","n","ArrayItem","m","GetConditionValue","ConditionValue","MultConditionsCount","parseInt","BuiltMultConditonWithValues","LastResult","result","ForLoopSetMetadata","ForLoopMetaData","iterationStart","IterationEnd","iterationEnd","elementLength","ForLoopSourcedataIndexStart","Cycle","SetArrayIndexValue","SourceData","CompleteTokenValueList","NewValueToSet","newInterator","iterat"],"mappings":"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","sourcesContent":["import\n{\n  Number\n}\nfrom \"core-js\"\n\nimport\n{\n  SourceDataReplaceforEasyParsing\n}\nfrom './DataCleaning'\n\n//ANCHOR - Important functions to be used while parsing\n\n//Checking if string is empty. The way we check string is empty or not boils down to how cleaned_sourcedata sees empty string s\n\n//Needs improvement\n\nfunction isEmptyStringorChar()\n{\n\n  return function(element)\n  {\n    if (element == '\"' || element == \"'\" || element == '*' || element == '@' || element == \"#\" || element.charAt(0) == \"'\" || element.charAt(0) == '\"')\n\n    {\n\n      return true\n\n    }\n  }\n\n}\n\n//Checking if element is a pure evaluation like 1+2, 20*34, 40+6-98 etc\n\nfunction isPureEval(element)\n{\n\n  if (/^([-+]?[0-9]*\\.?[0-9]+[\\/\\+\\-\\*])+([-+]?[0-9]*\\.?[0-9]+)*$/gm.test(element))\n  {\n\n    return true\n\n  }\n}\n\n//Checking if an element is calculation to be performed\n\nfunction isCalculation(element)\n{\n\n  if (!isNumber(element))\n  {\n\n    if ((element.includes(\"+\") || element.includes(\"%\") || element.includes(\"-\") || element.includes(\"*\") || element.includes(\"/\")) && ((element.includes('(') && element.includes(')')) || (!element.includes('(') && !element.includes(')'))) && element.charAt(element.length - 1) != '+')\n    {\n\n      return true\n\n    }\n  }\n}\n\n//removing brackets from element\n\nfunction RemoveBrackets(element)\n{\n\n  let a = element.replace('(', '')\n  let b = a.replace(')', '')\n  let c = b.replace('}', '')\n  let d = c.replace('{', '')\n\n  return d\n\n}\n\n//handy count function\n\nfunction Count(item, element)\n{\n\n  let count = 0\n\n  for (let i = 0; i < element.length; i++)\n  {\n\n    if (element.charAt(i) == item && element.charAt(i + 1) == item)\n    {\n\n      count += 1\n\n    }\n\n  }\n\n  return count;\n\n}\n\nfunction isArrayOperation(element)\n{\n\n  //To find Patterns like Array[2], Array[index] etc\n\n  element = RemoveBrackets(element)\n\n  if (element.charAt(element.length - 1) == ']' && element.includes('[') && element.charAt(0) != '[')\n  {\n\n    return true\n  }\n\n}\n\n//preparing sourcedata for easy parsing by handling new lines, enters etc.\n//cleaning up the data to get a suitable version of sourcedata. it's better to get suitable version because users can type what they wish but we need to maintain \n//integrity of program in every possible condition. So, we clean and refactor raw code to remove unnecessary data.\n\nfunction GetCleanSourcedata(sourcedata, cleaned_sourcedata, impurities)\n{\n\n  sourcedata = SourceDataReplaceforEasyParsing(sourcedata)\n\n  sourcedata.forEach((element, i) =>\n  {\n\n    //finding the elements which has =\" in it so that to seprate them into name,==,swanand if input is name=\"swanand\". \n\n    //We define such elements as impurites. We process them, bring them into a suitable form and push to cleaned_spircedata\n\n    //This is our cleaning factory\n\n    if (!element.includes('==') && (element.indexOf('=\"') > -1 || element.indexOf('=') > 0 || element.charAt(0) == \"=\") && element != '==')\n\n    {\n\n      impurities.push(element) //push such element as impurity in impurities\n\n      let elements = element.split(\"=\")\n      let index = cleaned_sourcedata.length\n\n      cleaned_sourcedata[index] = (elements[0])\n      cleaned_sourcedata[index + 1] = (\"=\")\n      cleaned_sourcedata[index + 2] = (elements[1])\n\n    }\n\n    //as long as element is pure, push it to new and clean version of sourcedata\n    if (!impurities.includes(element))\n    {\n\n      cleaned_sourcedata.push(element)\n\n    }\n\n    //\n\n  })\n\n  //removing empty \"\" values for final version of sourcedata\n  //SECTION FInal sourcedata cleaning\n\n  cleaned_sourcedata = cleaned_sourcedata.filter(function(item)\n  {\n\n    return item !== \"\"\n  })\n\n  return cleaned_sourcedata;\n\n}\n\n//To convert 'a+b-c*d' into ['a','+','-','c','*','d']\n\nfunction SplitElementsArray(element, i)\n\n{\n\n  if (element.includes('>') || element.includes('<') || element.includes('==') || element.includes('!='))\n\n  {\n\n    element = element.replace(/' '/g, '')\n\n  }\n\n  //get index of operation from updated tokens, as a reference\n\n  var StringVar = [] // here StrVar values will get pushed\n  var StrVar = '' // its used to read var values of any type (anna,a,bad,x etc.) and push it to StringVar\n\n  for (let j = 0; j < element.length; j++)\n  {\n\n    // find if element[j] is alphabet\n\n    if (/^[A-Z]+$/i.test(element[j]) || (element[j] == '[' || element[j] == ']') || isNumber(element[j]))\n    {\n\n      StrVar = StrVar + element[j] //keep on pushing for long variable names as strings e.g hello, kalaam\n\n    }\n\n    if (element[j] == ')' || element[j] == '(')\n    {\n\n      StringVar.push(element[j])\n\n    }\n\n    //to solve [\"Age \"] into [\"Age\"], so that it can correctly find its value in updated_tokens\n\n    if (element[j] == ' ' && element[j + 1] != '+')\n    {\n      StrVar = StrVar + element[j]\n\n    }\n\n    //for checking equivalency\n    if ((element[j] == '=' && element[j + 1] == '='))\n    {\n\n      StringVar.push(StrVar)\n      StringVar.push(element[j] + element[j + 1])\n      StrVar = ''\n\n    }\n\n    //for checking !=\n    if ((element[j] == '!' && element[j + 1] == '='))\n    {\n\n      StringVar.push(StrVar)\n\n      StringVar.push(element[j] + element[j + 1])\n      StrVar = ''\n\n    }\n    if (element[j] == \"?\" || element[j] == \"|\" || element[j] == \";\" || element[j] == \"&\" || element[j] == \"^\" || element[j] == \"%\" || element[j] == \"$\" || element[j] == \"#\" || element[j] == \"@\" || element[j] == \"!\" || element[j] == \":\" || element[j] == \"+\" || element[j] == \",\" || element[j] == \"%\" || element[j] == \"-\" || element[j + 1] == ')' || element[j] == \"/\" || element[j] == \"*\" || element[j] == '>' || element[j] == '<')\n    {\n\n      StringVar.push(StrVar) //push whatever string we have got because it's a string now, cant push operators with it\n\n      //finding the calculations that required brackets and adding them\n\n      if (element[j + 1] != ')')\n      {\n\n        StringVar.push(element[j]) // fixing the bias\n\n      }\n\n      StrVar = '' // emptyig the StrVar for next variable\n\n    }\n    if (element[j + 1] == null)\n    {\n\n      StringVar.push(StrVar) //fixing bias for last element\n\n    }\n\n  }\n\n  return StringVar\n\n}\n\n//get the start of loop in tokens array\n\nfunction getLoopIndexStart(mutable_tokens, j, check, setIndex)\n\n{\n\n  while (mutable_tokens[j].value != check)\n\n  {\n\n    if (mutable_tokens[j + 1].value == check)\n    {\n\n      setIndex = j + 1\n\n    }\n\n    j++;\n\n  }\n  return setIndex\n\n}\n\n//this is how we handle mulitiple conditions like अगर (ageone==10 && AverageAge<1000 && agetwo>100 || ageone==10) OR (ageone==10 )\n\nfunction handlemultConditions(element)\n{\n\n  for (let i = 0; i < element.length; i++)\n  {\n\n    if ((element.charAt(i) == '&') || (element.charAt(i) == '|'))\n\n    {\n\n      let condition = element.substring(0, i + 2)\n\n      let SweepedElement = element.replace(condition, \"\")\n      let operator = ''\n\n      if ((element.charAt(i) == '&'))\n      {\n        condition = condition.replace('&&', '')\n        operator = '&&'\n\n      }\n      else if ((element.charAt(i) == '|'))\n      {\n        condition = condition.replace('||', '')\n        operator = '||'\n\n      }\n\n      return {\n        SweepedElement,\n        condition,\n        operator\n      }\n\n      break;\n\n    }\n\n  }\n\n}\n\n//For operarions like Numbers.पुश(23)\n\nfunction AddElementToArray(Sourcedata, index, updated_tokens)\n{\n\n  let token = Sourcedata[index].value\n\n  token = token.replace('पुश', '')\n  let Split = token.split('.')\n  let Array = Split[0]\n  let ElementtoPush = RemoveBrackets(Split[1])\n\n  if (ElementtoPush.charAt(0) == '\"' || ElementtoPush.charAt(0) == \"'\")\n  {\n\n    ElementtoPush = ElementtoPush\n  }\n  else\n  {\n    ElementtoPush = updated_tokens.find(el => el.name == ElementtoPush).value\n  }\n\n  let ArrayEl = updated_tokens.find(el => el.name == Array)\n\n  let ArrayValue = ArrayEl.value\n  if (ArrayValue == '[]')\n  {\n    ArrayValue = ArrayValue.split(',')\n  }\n  ArrayValue.push(ElementtoPush)\n\n  let indexofArray = updated_tokens.indexOf(ArrayEl)\n\n  ArrayValue = ArrayValue.filter(el => el != '[]')\n\n  updated_tokens[indexofArray].value = ArrayValue\n\n}\n\nfunction AcceptInputandSetValue(tokens, index, updated_tokens)\n{\n\n  let SetInputValueAs = tokens[index].AcceptAs\n\n  var value = prompt('Enter Value for ' + SetInputValueAs)\n\n  updated_tokens.push(\n  {\n    name: SetInputValueAs,\n\n    value: value,\n\n  })\n\n}\n\n//One of the most frequently needed function\n\n//it is used to calculate variable values like x= y*100 (y*100 will be calculated here)\n\n//or Array[i]= x+ageone. (x+ageone) is caluculated here\n\n//If you are not getting the values right, this is where you should start debugging\n\nfunction CalculateValues(calculation, j, updated_tokens, IterationStart, global)\n\n{\n\n  var flag = 0\n  var error = ''\n  var calculationArray = SplitElementsArray(calculation, j)\n\n  var StringVar = SetValues(calculationArray, updated_tokens)\n\n  let joinStringVar = StringVar.join('')\n\n  let NewStringVar = ''\n  if (isNumber(joinStringVar.charAt(0)) == true)\n  {\n    NewStringVar = eval(joinStringVar)\n\n  }\n  else if (isNumber(joinStringVar.charAt(0)) == undefined)\n  {\n\n    StringVar.forEach(el =>\n    {\n\n      if (el != '+')\n      {\n        el = el.toString()\n        NewStringVar = NewStringVar + el\n      }\n\n    })\n\n  }\n  else\n  {\n\n    StringVar = StringVar\n\n  }\n\n  return (StringVar.length > 1 ? NewStringVar : StringVar)\n\n}\n\n//Have to move this two functions to Pushfunctions.js\n\nfunction PushSetArrayIndexValue(value, tokens, data, i)\n{\n\n  tokens.push(\n  {\n    type: \"SetArrayIndexValue\",\n    value: value,\n    ValueToSet: data[i + 2] //skipping =\n  });\n\n}\n\nfunction PushGetArrayIndexValue(value, tokens, data, i)\n{\n\n  tokens.push(\n  {\n    type: \"GetArrayIndexValue\",\n    value: value,\n  });\n\n}\n\n//Performs only Array Operations\n\n//converts Array[a] into [Array, a]\n\n//This helps us to find their respective values easily in updated_tokens\n\nfunction CreateArrayElement(Value, iterator)\n{\n\n  let ArrayElement = RemoveBrackets(Value);\n\n  //Seprating out index identifier. a from Array[a]\n  let element = ArrayElement\n  element = element.replace(']', '')\n\n  let Split = element.split('[')\n\n  Split[1] = iterator\n\n  Split = Split.join('[')\n\n  Split = Split + ']'\n  ArrayElement = Split\n\n  ArrayElement = ArrayElement.replace(/' '/g, '')\n\n  return ArrayElement\n\n}\n\n//This function is used to get array or string elements. e.g Array[2], String[5] \n\n//Heavily used by compiler in loops\n\nfunction SetArrayorStringElement(ArrayElement, updated_tokens, iterator, NewValue, tokens)\n{\n\n  ArrayElement = ArrayElement.replace(']', '')\n\n  let Split = ArrayElement.split('[')\n\n  let indexCollected = Split[1]\n\n  let Element = updated_tokens.find(el => el.name == NewValue)\n\n  //If element is an assigned variable. Find the value and set it.\n\n  if (Element)\n  {\n    if (isCalculation(NewValue))\n    {\n\n      // This is to set x= y*100, Array[i]= x+ageone. \n\n      let token = tokens.find(el => el.value == NewValue)\n      let j = tokens.indexOf(token) - 1\n\n      let value = CalculateValues(NewValue, j, updated_tokens)\n\n      NewValue = value\n\n    }\n\n    NewValue = Element.value\n\n  }\n\n  if (iterator == true)\n  {\n\n    //for Array[a]=a\n\n    if (isCalculation(NewValue))\n    {\n\n    }\n    else\n    {\n\n      NewValue = indexCollected\n\n    }\n  }\n\n  //if fresh newvalue is foumd. the one which doesnt yet exist in the program, then run this.\n  else\n  {\n\n    NewValue = NewValue\n  }\n\n  let token = updated_tokens.find(el => el.name == Split[0])\n\n  let index = updated_tokens.indexOf(token)\n\n  //updated_tokens values will also get updated thrugh this reference\n  let value = token.value\n\n  value = value.toString()\n\n  value = value.replace(']', '')\n  value = value.replace('[', '')\n  value = value.split(',')\n\n  if (iterator == true)\n  {\n\n    //This is for Array[a]=a\n\n    value[indexCollected] = indexCollected\n\n  }\n  else\n  {\n\n    //Run when iterator is not needed. iterator is present in ArrayEleMENT ALREADY. This is for Array[i]='Swanand'\n\n    value[indexCollected] = NewValue\n\n  }\n\n  //converting array back into the string representation of it for better printabillity\n\n  updated_tokens[index].value = '[' + value.toString() + ']'\n\n}\n\n//Printing a specific array element like Array[0], Array[3] etc.\n\n//Printing a dynamic array element like Array[i], Array[i+1] etc.\n\nfunction GetArrayorStringElement(element, updated_tokens, NewValue, flag)\n{\n\n  element = element.replace(']', '')\n\n  let Split = element.split('[')\n\n  let indexCollected = Split[1]\n\n  if (isNumber(indexCollected))\n  {\n\n    let token = updated_tokens.find(el => el.name == Split[0])\n\n    let index = updated_tokens.indexOf(token)\n\n    let value = token.value.toString()\n\n    if (token.type == 'Array')\n    {\n\n      value = value.replace(']', '')\n      value = value.replace('[', '')\n      value = value.split(',')\n\n      if (NewValue != undefined)\n      {\n\n        if (!isNumber(NewValue))\n        {\n\n          NewValue = NewValue.replace(/\"/g, '')\n          NewValue = NewValue.replace(/“/g, '')\n          NewValue = NewValue.replace(/'/g, '')\n          NewValue = NewValue.replace(/‘/g, '')\n        }\n        else\n        {\n\n          NewValue = NewValue\n        }\n\n        value[indexCollected] = NewValue\n\n        updated_tokens[index].value = value\n\n      }\n      else\n      {\n\n        value = value[indexCollected];\n        //////\n        //////\n\n      }\n\n    }\n\n    else if (token.type == 'string' || token.type != 'Array')\n    {\n\n      value = value.charAt(indexCollected);\n\n    }\n\n    return value\n  }\n\n}\n\n//Needs improvement\n\nfunction ForLoopArrayorStringOutput(elementValue, iterator, updated_tokens, global)\n\n{\n\n  let CurrentElement = ''\n\n  CurrentElement = elementValue.name + '[' + iterator + ']'\n  //Foundvalue is decided in the function depending upon the type. \n  //if it's array run array[2], if its string run string.charAt(2)\n  let FoundValue = GetArrayorStringElement(CurrentElement, updated_tokens)\n\n  global.output = global.output + FoundValue + \"\\n\";\n\n}\n\n//Move it to typechecking.js\n\nfunction isNumber(element)\n{\n\n  if (/^[0-9]*$/gm.test(element))\n  {\n    return true;\n\n  }\n};\n\n//one of the heavily used function\n\n//converts ['a','+','b'] into [a+b] and then into [23,+,7] provided a=23 and b=7\n\nfunction SetValues(StringVar, updated_tokens)\n\n{\n\n  StringVar.forEach((el, i) =>\n\n    {\n\n      el = el.replace(/\\ /g, '');\n\n      if (el.charAt(el.length - 1) == ']')\n      {\n        let ArrayElementValue = GetArrayorStringElement(el, updated_tokens)\n\n        ArrayElementValue = ArrayElementValue.replace(/['\"]+/g, '')\n\n        StringVar[i] = ArrayElementValue\n\n      }\n\n      //finding variable value here \n\n      let token = updated_tokens.find(element => element.name == el);\n\n      if (token != undefined)\n      {\n\n        // if exists set it's value \n        StringVar[i] = token.value\n\n      }\n\n    })\n\n  return StringVar\n\n}\n\n//ANCHOR \n//Now we hae converted found \"a+b-d\" into [a,+,b,-,d]\n\n//Now lets run a loops on it to convert into [5,+,6,-,7]\n\n//Updated_tokens is updated by replacing \"value:a+b-d\" with \"value:5+6-7\". \n//after eval function it will be set as \"value:2\"\n\nfunction UpdateUpdated_tokenswithValues(payload, i, updated_tokens)\n{\n\n  let StringVar = payload\n\n  //run if it's arithmetic operation like [\"5+6-7\"]\n  if (isNumber(StringVar[0]))\n  {\n\n    let value = eval(StringVar.join(''))\n\n    return value\n\n  }\n  else if (StringVar[1] == '==')\n  {\n\n    let a = StringVar[0].toString()\n    let b = StringVar[2].toString()\n\n    let value = eval(a == b)\n\n    return value\n\n  }\n\n  //run if it's String operation like [\"reddit\",\"+\", \"is goat\"]\n  else\n  {\n\n    if (StringVar.includes(\"+\"))\n    {\n\n      StringVar[StringVar.indexOf(\"+\")] = \" \"\n\n    }\n\n    let value = StringVar.join(\"\")\n\n    return value\n  }\n\n}\n\n//Handle Blocks is a function which takes care of nested block by taking care of nested '{' and '}' brackets\n\n//it uses the stack to push and pop brackets to accurately identify start and the end of the block\n\nfunction HandleBlocks(mutable_tokens, j, StoreResult)\n{\n\n  //StoreResult is used to push data into it in case of forloop or while loop conetext\n\n  //for a normal block like conditional block it might not need to be used yet\n\n  let ArrayBrackets = []\n\n  while (true)\n\n  {\n\n    if (mutable_tokens[j].value == '{')\n    {\n\n      ArrayBrackets.push(\n      {\n        type: '{',\n        index: j\n      })\n\n      if (StoreResult != undefined)\n      {\n\n        StoreResult.push(mutable_tokens[j])\n      }\n\n    }\n    else if (mutable_tokens[j].value == '}')\n    {\n\n      //As soon as open bracket is found, pop the last arraybracket stack value\n      //that's the match\n\n      let x = ArrayBrackets.pop()\n\n      if (StoreResult != undefined)\n      {\n\n        StoreResult.push(mutable_tokens[j])\n\n        mutable_tokens[x.index].startIndex = x.index\n        mutable_tokens[x.index].EndIndex = j\n      }\n\n      //set start and end index value for that { } block\n      mutable_tokens[x.index].startIndex = x.index\n      mutable_tokens[x.index].EndIndex = j\n      if (ArrayBrackets.length == 0)\n      {\n\n        //As soon as stack is empty we have finished our last lblock\n\n        break;\n\n      }\n\n    }\n    else\n    {\n\n      if (StoreResult != undefined)\n      {\n\n        StoreResult.push(mutable_tokens[j])\n      }\n\n    }\n\n    j++;\n\n  }\n\n  return {\n    StoreResult,\n    j\n  }\n\n}\n\n//Handles conditional statements\n\n//It does not return true or false rather it tells us whether to skip the execution or continue execution depending upon truth value of condition\n\n//If true 'i' is set to current index position, if false 'i' is skipped until the end of conditional block/ \n\nfunction HandleConditions(sourcedata, i, updated_tokens)\n{\n\n  let element = sourcedata[i].value\n\n  //let token= updated_tokens.find(el=> el.originalvalue==sourcedata[i].value)\n\n  let SplitArray = SplitElementsArray(element, i)\n\n  let Values = SetValues(SplitArray, updated_tokens)\n\n  let ForLoopConditionValue = UpdateUpdated_tokenswithValues(Values, updated_tokens, i)\n\n  if (ForLoopConditionValue == false)\n  {\n\n    while (sourcedata[i + 1].value != '}')\n\n    {\n\n      //tokens.splice(i+1, 1);\n\n      //No need to delete tokens, we are iust skipping over the values so that they won't be printed or run\n\n      i++;\n\n    }\n\n    return i\n\n  }\n\n}\n\n//Handly function to split and join Arrays\n\nfunction SplitandJoin(array, output, element)\n{\n\n  array[1] = output\n\n  let Joinarray = array.join('[') + ']'\n  element = Joinarray\n\n  return element\n\n}\n\nvar AccumulateValue = ''\n\nfunction ResetValue()\n{\n\n  AccumulateValue = ''\n\n}\n\n//One of the most important functions\n\n//Takes care of all kind of assignments provided in raw sourcecode\n\n//Message=\"Hello World\", Numbers=[1,2,3,4,5], Numbers[2]=23 etc.\n\n//If a certain value is not being assigned properly start debugiing here\n\nfunction AssignorUpdateValues(sourcedata, i, updated_tokens, iterator, OriginalIterator, global)\n{\n\n  let variable = sourcedata[i - 1].value\n\n  let variableType = sourcedata[i - 1].type\n\n  let varvalue = sourcedata[i + 1].value\n\n  if (varvalue == '\"' || varvalue == \"'\")\n  {\n\n    varvalue = ' '\n  }\n\n  //if someone accidenlty types Name=इनपुट or any other primary keywords\n\n  if (varvalue.includes('दुहराओ') || varvalue.includes('रचना') || varvalue.includes('अन्यथा') || varvalue.includes('इनपुट') || varvalue.includes('पुश') || varvalue.includes('प्रिंट') || varvalue.includes('अगर'))\n\n  {\n\n    let error = 'Assignment error in ' + '\"' + variable + ' = ' + '\"'\n\n    global.error.push(error)\n\n  }\n\n  let varvalueType = sourcedata[i + 1].type\n\n  let x = updated_tokens.find((el, i) => el.name == varvalue)\n\n  //if a=b and user haven't defined b yet\n\n  if (!isNumber(varvalue) && varvalueType == 'value' && x == undefined && varvalue != ' ' && !isEmptyStringorChar(varvalue))\n\n  {\n\n    global.error.push('Cannot set ' + variable + ' to undefined ' + ': ' + varvalue + ' is undefined ')\n\n  }\n\n  //to count the length, Numbers.संख्या()\n\n  else if (varvalue.includes('संख्या'))\n\n  {\n\n    let Split = varvalue.split('.')\n\n    let item = Split[0]\n\n    let Itemvalue = updated_tokens.find(el => el.name == item).value\n\n    if (Itemvalue.includes('['))\n    {\n\n      Itemvalue = Itemvalue.toString().split(',')\n\n    }\n    else if (Itemvalue.length == 1)\n    {\n\n      Itemvalue = Itemvalue\n\n    }\n\n    else\n    {\n\n      Itemvalue = Itemvalue.toString()\n\n    }\n\n    let ItemvalueLength = Itemvalue.length\n\n    updated_tokens.push(\n    {\n      name: variable,\n\n      value: ItemvalueLength,\n\n      identifier: i,\n      type: 'CalLength'\n    })\n\n  }\n\n  //this runs only for operations like x=Numbers[a]\n\n  else if (varvalueType == 'GetArrayIndexValue')\n\n  {\n\n    let n = updated_tokens.find((el, i) => el.name == variable)\n\n    let index = updated_tokens.indexOf(n)\n\n    //Iterator is used only when we are looping over provided index not for the index that needs to be calculated\n    let element = varvalue.replace(']', '')\n\n    if (element.includes('+'))\n    {\n\n      var Split = element.split('+')\n\n    }\n\n    else if (element.includes('-'))\n    {\n\n      var Split = element.split('-')\n\n    }\n\n    var flag = false\n\n    //For operations like Name=Name+ Array[i]\n\n    if (element.includes('+') || element.includes('-') && !Split[0].includes('['))\n    {\n\n      flag = true\n\n      let token = updated_tokens.find(el => el.name == Split[0])\n      let index = updated_tokens.indexOf(token)\n\n      let ArrayItem = Split[1].split('[')\n\n      let output = CalculateValues(ArrayItem[1], i, updated_tokens)\n\n      let ArrayElement = SplitandJoin(ArrayItem, output, element)\n\n      //Get Numbers[3] value and now set it to our variable x\n      let value = GetArrayorStringElement(ArrayElement, updated_tokens)\n\n      AccumulateValue += value\n\n      updated_tokens[index].value = AccumulateValue\n\n    }\n    else\n    {\n\n      var Split = element.split('[')\n\n    }\n\n    //for operations like x= Array[i+1] etc\n\n    if ((Split[1].includes('-') || Split[1].includes('+')) && !Split[1].includes('['))\n    {\n\n      let output = CalculateValues(Split[1], i, updated_tokens)\n\n      element = SplitandJoin(Split, output, element)\n\n    }\n\n    let token = updated_tokens.find(el => el.name == Split[1])\n\n    //for operations like Array[Age]. Here index is an already defined variable\n    if (token != undefined && OriginalIterator != Split[1] && token.name != '')\n\n    {\n\n      element = SplitandJoin(Split, token.value, element)\n\n    }\n\n    //for operations like Array[i]: Looping over original index value\n    else if (OriginalIterator == Split[1])\n    {\n\n      element = SplitandJoin(Split, iterator, element)\n\n    }\n\n    let ArrayElement = element\n\n    //Get Numbers[3] value and now set it to our variable x\n    let value = GetArrayorStringElement(ArrayElement, updated_tokens)\n\n    if (n != undefined && flag == false)\n    {\n\n      updated_tokens[index].value = value\n\n    }\n    else if (flag == false)\n    {\n\n      updated_tokens.push(\n      {\n        name: variable,\n\n        value: value,\n\n        identifier: i,\n        type: sourcedata[i + 1].type\n      })\n    }\n\n  }\n  else\n  {\n\n    let m = updated_tokens.find((el, i) => el.name == varvalue)\n\n    if (m != undefined)\n    {\n\n      varvalue = m.value\n\n    }\n\n    let n = updated_tokens.find((el, i) => el.name == variable)\n\n    if (n == undefined)\n    {\n\n      //to check if the assigned value needs to be calculated. this is futher diveded in two types\n\n      if (isCalculation(varvalue))\n\n      {\n\n        //type 1- Age= 2020-2000 \n        if (isPureEval(varvalue))\n\n        {\n\n          let value = eval(varvalue)\n\n          //write function for this, so repeatable\n          updated_tokens.push(\n          {\n            name: variable,\n\n            value: value,\n\n            identifier: i,\n            type: sourcedata[i + 1].type\n          })\n\n        }\n\n        //type 2- X= ageone+agetwo\n        else\n        {\n\n          //performing the calculation\n\n          let value = CalculateValues(varvalue, i, updated_tokens, global)\n\n          updated_tokens.push(\n          {\n            name: variable,\n\n            value: value,\n\n            identifier: i,\n            type: sourcedata[i + 1].type\n          })\n\n        }\n\n      }\n\n      //if there is no need to calculate, push values as it is\n      else if (!isCalculation(varvalue))\n      {\n\n        updated_tokens.push(\n        {\n          name: variable,\n\n          value: varvalue,\n\n          identifier: i,\n          type: sourcedata[i + 1].type\n        })\n\n      }\n\n    }\n\n    //if it's already assgined, reassign it with updated value\n    else\n    {\n\n      varvalue = varvalue.toString()\n\n      if (varvalue.includes('-') || varvalue.includes('%') || varvalue.includes('+') || varvalue.includes('/') || varvalue.includes('*'))\n      {\n\n        // \n\n        let NewValue = CalculateValues(varvalue, i, updated_tokens, global)\n\n        n.value = NewValue\n\n      }\n      else\n      {\n\n        let index = updated_tokens.indexOf(n)\n        updated_tokens[index].value = varvalue\n\n      }\n\n    }\n\n  }\n\n}\n\n//GetConditionValue is our goto function to evaluate a condition to true or false\n\nfunction GetConditionValue(element, updated_tokens, j)\n{\n\n  var ConditionValue = false\n\n  if (element.includes('&&') || element.includes('||'))\n  {\n\n    let MultConditionsCount = parseInt(Count('&', element)) + parseInt(Count('|', element))\n\n    //this will be our final values\n    //converted as true&&false&&true||true\n    let BuiltMultConditonWithValues = ''\n    let LastResult = {}\n\n    //running for loop on original condition to calculates each individual condition and adding its value in BuiltMultConditonWithValues\n\n    for (let i = 0; i <= MultConditionsCount; i++)\n\n    {\n\n      if (i == MultConditionsCount)\n      {\n\n        let condition = LastResult.SweepedElement\n        condition = condition.replace(/ /g, '')\n\n        let SplitArray = SplitElementsArray(condition, j)\n\n        let Values = SetValues(SplitArray, updated_tokens)\n\n        ConditionValue = UpdateUpdated_tokenswithValues(Values, updated_tokens, j)\n\n        BuiltMultConditonWithValues = BuiltMultConditonWithValues + ConditionValue\n\n      }\n      else\n      {\n\n        let result = handlemultConditions(element)\n\n        LastResult = result\n\n        element = result.SweepedElement\n        let condition = result.condition\n        condition = condition.replace(/ /g, '')\n\n        let SplitArray = SplitElementsArray(condition, j)\n\n        let Values = SetValues(SplitArray, updated_tokens)\n\n        ConditionValue = UpdateUpdated_tokenswithValues(Values, updated_tokens, j)\n\n        BuiltMultConditonWithValues = BuiltMultConditonWithValues + ConditionValue + result.operator\n\n      }\n\n    }\n\n    //setting the final condition value in cases like अगर (ageone==10 && AverageAge<1000 && agetwo>100 || ageone==10) \n\n    ConditionValue = eval(BuiltMultConditonWithValues);\n\n  }\n  else\n  {\n\n    //let token= updated_tokens.find(el=> el.originalvalue==mutable_tokens[j].value)\n\n    let SplitArray = SplitElementsArray(element, j)\n\n    let Values = SetValues(SplitArray, updated_tokens)\n    Values = Values.filter(function(item)\n    {\n\n      return item !== \"\"\n    })\n\n    //Setting the final condition value in cases like अगर (ageone==10) \n\n    ConditionValue = UpdateUpdated_tokenswithValues(Values, updated_tokens, j)\n\n  }\n\n  return ConditionValue\n\n}\n\n//Getting every single information about our forloop \n\nfunction ForLoopSetMetadata(tokens, i, updated_tokens)\n{\n\n  var ForLoopMetaData = tokens[i + 1]\n\n  //Splitting the ForLoopMetaData values individually\n  var iterator = ForLoopMetaData.iterator\n\n  var element = ForLoopMetaData.value\n  var IterationStart = parseInt(ForLoopMetaData.iterationStart)\n\n  var IterationEnd = parseInt(ForLoopMetaData.iterationEnd)\n\n  //pushing index \n\n  //checking if iteration end is an predefined variable\n\n  let token = updated_tokens.find(el => el.name == ForLoopMetaData.iterationEnd)\n\n  if (token != undefined)\n  {\n\n    IterationEnd = parseInt(token.value)\n\n  }\n\n  // var ForLoopSourcedata = ForLoopMetaData.ForLoopSourcedata\n\n  var elementValue = updated_tokens.find(el => el.name == element)\n\n  var elementLength = 0\n\n  var ForLoopSourcedataIndexStart = 0\n\n  var OriginalIterator = ForLoopMetaData.iterator\n\n  // Run if start and end parameters are not given e.g दुहराओ a को  Name मे \n  // This is ran just to get Start and End parameters as they are not provided\n  if (ForLoopMetaData.iterationEnd == undefined)\n  {\n\n    //run if element is array\n    if (elementValue.type == 'Array')\n\n    {\n      elementLength = elementValue.value.split(',').length\n\n      IterationStart = 0\n      IterationEnd = elementLength - 1\n\n    }\n\n    //run if element is String\n    else\n    {\n      elementLength = elementValue.value.length\n      IterationStart = 0\n      IterationEnd = elementLength - 1\n\n    }\n\n  }\n\n  var Cycle = IterationEnd\n\n  return {\n    ForLoopSourcedataIndexStart,\n    Cycle,\n    OriginalIterator,\n    IterationStart,\n    iterator,\n    element,\n    elementValue\n  }\n\n}\n\n//To resolve operations like Array[a]=a+2 in loops and in plain context\n\nfunction SetArrayIndexValue(SourceData, i, j, CompleteTokenValueList, tokens, OriginalIterator, iterator)\n{\n\n  let Value = SourceData[i].value\n\n  let ValueToSet = SourceData[i].ValueToSet\n\n  let element = RemoveBrackets(Value);\n\n  var ArrayElement = ''\n\n  //Seprating out index identifier. xyz from Array[xyz]\n\n  element = element.replace(']', '')\n\n  let Split = element.split('[')\n\n  // run if we need to set direct Array element value. like Array[2]= xyx                    \n  if (isNumber(Split[1]))\n  {\n\n    Split = Split.join('[')\n    //\n\n    Split = Split + ']'\n\n    ArrayElement = Split\n    // \n\n    NewValueToSet = CalculateValues(ValueToSet, j, CompleteTokenValueList)\n\n    SetArrayorStringElement(ArrayElement, CompleteTokenValueList, false, NewValueToSet, tokens)\n\n  }\n\n  // run if we need to dynamically set Array element value. like Array[i]= xyx\n  //CreateArrayElement function will create dynamic Array values. like Array[0], Array[1] etc.                    \n  else\n  {\n\n    let index = Split[1]\n\n    // setting iterator as per user input \n    //for iterator like count=count + 1, Array[count]\n\n    let newInterator = 0\n\n    let token = CompleteTokenValueList.find(el => el.name == index)\n\n    if (token != undefined)\n    {\n\n      newInterator = token.value\n\n    }\n    else\n    {\n\n      newInterator = iterator\n    }\n\n    ArrayElement = CreateArrayElement(Value, newInterator)\n\n  }\n\n  // this code is written to find operations like Array[a]= a*100+age*a. notice a\n  //find a way to simplify this in long term\n\n  let data = ValueToSet\n\n  data = data.split('*').toString();\n  data = data.split('+').toString();\n  data = data.split('-').toString();\n  data = data.split('/').toString();\n  data = data.split(',')\n\n  //building a new value to convert a*100+age*a into 5*100+age*a and then sending it to CalculateValues()\n  let NewValueToSet = ''\n\n  if (data.includes(Split[1]) && data.length > 1)\n\n  {\n\n    //we have operations like Array[a]= a*100+age*a. notice a\n\n    for (let m = 0; m < ValueToSet.length; m++)\n\n    {\n\n      if (ValueToSet[m] == Split[1] && !(/^[a-z]+$/i.test(ValueToSet[m + 1])))\n\n      {\n\n        // value is been set . replacing index value a with iteartor value 0,1,2, etc.   \n        NewValueToSet = NewValueToSet + iterator\n\n      }\n      else\n      {\n\n        NewValueToSet = NewValueToSet + ValueToSet[m]\n\n      }\n\n    }\n\n    let iterat = false\n    //gave it a different name so it would not fuck up with for loop iterator\n\n    NewValueToSet = CalculateValues(NewValueToSet, j, CompleteTokenValueList, )\n\n    SetArrayorStringElement(ArrayElement, CompleteTokenValueList, iterat, NewValueToSet, tokens)\n\n  }\n\n  // this condition enables program to only run  Array[a]= xyz when iterator is a. It disallows running Array[blablabla]=xyz\n  if (OriginalIterator == Split[1])\n  {\n\n    if (Split[1] == ValueToSet)\n    {\n\n      let iterator = true\n\n      SetArrayorStringElement(ArrayElement, CompleteTokenValueList, iterator, ValueToSet, tokens)\n\n    }\n\n    // for operations like Array[a]=ageone*100\n\n    if (!data.includes(Split[1]) && OriginalIterator == Split[1])\n    {\n\n      let iterator = false\n\n      ValueToSet = CalculateValues(ValueToSet, j, CompleteTokenValueList)\n\n      SetArrayorStringElement(ArrayElement, CompleteTokenValueList, iterator, ValueToSet, tokens)\n\n    }\n\n  }\n\n  //might have to add more conditions in the future\n  else\n  {\n\n    let iterator = false\n\n    ValueToSet = CalculateValues(ValueToSet, j, CompleteTokenValueList)\n\n    SetArrayorStringElement(ArrayElement, CompleteTokenValueList, iterator, ValueToSet, tokens)\n\n  }\n\n}\n\nexport\n{\n  GetCleanSourcedata,\n  Count,\n  ForLoopSetMetadata,\n  getLoopIndexStart,\n  AddElementToArray,\n  ResetValue,\n  HandleBlocks,\n  HandleConditions,\n  AssignorUpdateValues,\n  PushGetArrayIndexValue,\n  PushSetArrayIndexValue,\n  isArrayOperation,\n  GetConditionValue,\n  CalculateValues,\n  handlemultConditions,\n  CreateArrayElement,\n  SetArrayorStringElement,\n  RemoveBrackets,\n  ForLoopArrayorStringOutput,\n  GetArrayorStringElement,\n  AcceptInputandSetValue,\n  SplitElementsArray,\n  SetValues,\n  UpdateUpdated_tokenswithValues,\n  SetArrayIndexValue\n}"]}]}