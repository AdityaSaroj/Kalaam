{"remainingRequest":"/Users/jonny/Documents/Work/test/node_modules/babel-loader/lib/index.js!/Users/jonny/Documents/Work/test/src/FunctionScripts/MiscImportantFunctions.js","dependencies":[{"path":"/Users/jonny/Documents/Work/test/src/FunctionScripts/MiscImportantFunctions.js","mtime":1592714263916},{"path":"/Users/jonny/Documents/Work/test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jonny/Documents/Work/test/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/jonny/Documents/Work/test/src/FunctionScripts/MiscImportantFunctions.js"],"names":["Number","SourceDataReplaceforEasyParsing","isEmptyStringorChar","element","charAt","isPureEval","test","isCalculation","isNumber","includes","length","RemoveBrackets","a","replace","b","c","d","Count","item","count","i","isArrayOperation","GetCleanSourcedata","sourcedata","cleaned_sourcedata","impurities","forEach","indexOf","push","elements","split","index","filter","SplitElementsArray","StringVar","StrVar","j","getLoopIndexStart","mutable_tokens","check","setIndex","value","handlemultConditions","condition","substring","SweepedElement","operator","AddElementToArray","Sourcedata","updated_tokens","token","Split","Array","ElementtoPush","find","el","name","ArrayEl","ArrayValue","indexofArray","AcceptInputandSetValue","tokens","SetInputValueAs","AcceptAs","prompt","CalculateValues","calculation","IterationStart","global","flag","error","calculationArray","SetValues","joinStringVar","join","NewStringVar","eval","undefined","toString","PushSetArrayIndexValue","data","type","ValueToSet","PushGetArrayIndexValue","CreateArrayElement","Value","iterator","ArrayElement","SetArrayorStringElement","NewValue","indexCollected","Element","GetArrayorStringElement","ForLoopArrayorStringOutput","elementValue","CurrentElement","FoundValue","output","ArrayElementValue","UpdateUpdated_tokenswithValues","payload","HandleBlocks","StoreResult","ArrayBrackets","x","pop","startIndex","EndIndex","HandleConditions","SplitArray","Values","ForLoopConditionValue","SplitandJoin","array","Joinarray","AccumulateValue","ResetValue","AssignorUpdateValues","OriginalIterator","variable","variableType","varvalue","varvalueType","Itemvalue","ItemvalueLength","identifier","n","ArrayItem","m","GetConditionValue","ConditionValue","MultConditionsCount","parseInt","BuiltMultConditonWithValues","LastResult","result","ForLoopSetMetadata","ForLoopMetaData","iterationStart","IterationEnd","iterationEnd","elementLength","ForLoopSourcedataIndexStart","Cycle","SetArrayIndexValue","SourceData","CompleteTokenValueList","NewValueToSet","newInterator","iterat"],"mappings":"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","sourcesContent":["import {\n    Number\n} from \"core-js\"\n\nimport {\n    SourceDataReplaceforEasyParsing\n} from '../FunctionScripts/functions'\n\n\n//ANCHOR - Important functions to be used while parsing\n\n//Checking if string is empty. The way we check string is empty or not boils down to how cleaned_sourcedata sees empty string s\n\n//Needs improvement\n\nfunction isEmptyStringorChar(){\n\n\n     \n    return function(element){\nif(element=='\"'|| element==\"'\" || element=='*'||element=='@'||element==\"#\"||element.charAt(0)==\"'\"||element.charAt(0)=='\"')\n\n\n{\n\nreturn true\n\n}\n    }\n\n\n}\n\n\n\n\n\n//Checking if element is a pure evaluation like 1+2, 20*34, 40+6-98 etc\n\nfunction isPureEval(element){\n\n\n    if(/^([-+]?[0-9]*\\.?[0-9]+[\\/\\+\\-\\*])+([-+]?[0-9]*\\.?[0-9]+)*$/gm.test(element))\n    {\n    \n    return true\n    \n    }\n}\n    \n             \n//Checking if an element is calculation to be performed\n\nfunction isCalculation(element) {\n\n    if (!isNumber(element)) {\n        \n\n        if ((element.includes(\"+\") || element.includes(\"%\") || element.includes(\"-\") || element.includes(\"*\") || element.includes(\"/\")) && ((element.includes('(') && element.includes(')')) || (!element.includes('(') && !element.includes(')'))) && element.charAt(element.length - 1) != '+') {\n\n            return true\n\n\n        }\n    }\n}\n\n//removing brackets from element\n\nfunction RemoveBrackets(element) {\n\n    let a = element.replace('(', '')\n    let b = a.replace(')', '')\n    let c = b.replace('}', '')\n    let d = c.replace('{', '')\n\n    return d\n\n}\n\n\n//handy count function\n\nfunction Count(item, element) {\n\n    let count = 0\n\n\n    for (let i = 0; i < element.length; i++) {\n\n        if (element.charAt(i) == item && element.charAt(i + 1) == item) {\n\n            count += 1\n\n\n\n        }\n\n\n\n    }\n\n    return count;\n\n\n}\n\n\nfunction isArrayOperation(element) {\n\n\n\n    //To find Patterns like Array[2], Array[index] etc\n\n    element = RemoveBrackets(element)\n\n    if (element.charAt(element.length - 1) == ']' && element.includes('[') && element.charAt(0) != '[') {\n\n\n        return true\n    }\n\n}\n\n     //preparing sourcedata for easy parsing by handling new lines, enters etc.\n            //cleaning up the data to get a suitable version of sourcedata. it's better to get suitable version because users can type what they wish but we need to maintain \n            //integrity of program in every possible condition. So, we clean and refactor raw code to remove unnecessary data.\n\n\n\nfunction GetCleanSourcedata(sourcedata, cleaned_sourcedata, impurities) {\n\n    sourcedata = SourceDataReplaceforEasyParsing(sourcedata)\n\n    sourcedata.forEach((element, i) => {\n\n\n        //finding the elements which has =\" in it so that to seprate them into name,==,swanand if input is name=\"swanand\". \n        \n        //We define such elements as impurites. We process them, bring them into a suitable form and push to cleaned_spircedata\n\n        //This is our cleaning factory\n\n\n        if (!element.includes('==') && (element.indexOf('=\"') > -1 || element.indexOf('=') > 0 || element.charAt(0) == \"=\") && element != '==')\n\n\n        {\n\n\n\n            impurities.push(element) //push such element as impurity in impurities\n\n\n\n            let elements = element.split(\"=\")\n            let index = cleaned_sourcedata.length\n\n\n            cleaned_sourcedata[index] = (elements[0])\n            cleaned_sourcedata[index + 1] = (\"=\")\n            cleaned_sourcedata[index + 2] = (elements[1])\n\n\n\n        }\n\n\n\n        //as long as element is pure, push it to new and clean version of sourcedata\n        if (!impurities.includes(element)) {\n\n\n\n            cleaned_sourcedata.push(element)\n\n        }\n\n        //\n\n    })\n\n\n    //removing empty \"\" values for final version of sourcedata\n    //SECTION FInal sourcedata cleaning\n\n    cleaned_sourcedata = cleaned_sourcedata.filter(function(item) {\n\n        return item !== \"\"\n    })\n\n\n\n    return cleaned_sourcedata;\n\n}\n\n\n//To convert 'a+b-c*d' into ['a','+','-','c','*','d']\n\nfunction SplitElementsArray(element,i)\n\n\n\n{\n\n\n\n    if (element.includes('>') || element.includes('<') || element.includes('==') || element.includes('!='))\n\n    {\n\n\n        element = element.replace(/' '/g, '')\n        \n\n\n\n    }\n\n\n\n\n    \n\n    //get index of operation from updated tokens, as a reference\n\n\n\n    var StringVar = [] // here StrVar values will get pushed\n    var StrVar = '' // its used to read var values of any type (anna,a,bad,x etc.) and push it to StringVar\n\n\n\n    for (let j = 0; j < element.length; j++) {\n\n\n\n\n        // find if element[j] is alphabet\n\n        if (/^[A-Z]+$/i.test(element[j]) || (element[j] == '[' || element[j] == ']') || isNumber(element[j])) {\n\n\n\n            StrVar = StrVar + element[j] //keep on pushing for long variable names as strings e.g hello, kalaam\n\n        }\n\n        if (element[j] == ')' || element[j] == '(' ) {\n\n\n            StringVar.push(element[j])\n\n        }\n\n\n        //to solve [\"Age \"] into [\"Age\"], so that it can correctly find its value in updated_tokens\n\n        if (element[j] == ' ' && element[j + 1] != '+') {\n            StrVar = StrVar + element[j]\n\n            \n\n\n        }\n\n\n\n        //for checking equivalency\n        if ((element[j] == '=' && element[j + 1] == '=')) {\n\n            StringVar.push(StrVar)\n            StringVar.push(element[j] + element[j + 1])\n            StrVar = ''\n            \n\n\n\n        }\n\n        //for checking !=\n        if ((element[j] == '!' && element[j + 1] == '=')) {\n\n            StringVar.push(StrVar)\n            \n            StringVar.push(element[j] + element[j + 1])\n            StrVar = ''\n\n\n\n        }\n        if (element[j] == \"?\" || element[j] == \"|\" || element[j] == \";\" || element[j] == \"&\" || element[j] == \"^\" || element[j] == \"%\" ||element[j] == \"$\" ||element[j] == \"#\" ||element[j] == \"@\" ||element[j] == \"!\" ||element[j] == \":\" ||element[j] == \"+\" || element[j] == \",\" || element[j] == \"%\"  || element[j] == \"-\" || element[j + 1] == ')' || element[j] == \"/\" || element[j] == \"*\" || element[j] == '>' || element[j] == '<') {\n\n\n\n\n            StringVar.push(StrVar) //push whatever string we have got because it's a string now, cant push operators with it\n\n            //finding the calculations that required brackets and adding them\n\n            if (element[j + 1] != ')') {\n\n                StringVar.push(element[j]) // fixing the bias\n\n            }\n\n\n\n            StrVar = '' // emptyig the StrVar for next variable\n\n\n        }\n        if (element[j + 1] == null) {\n\n            StringVar.push(StrVar) //fixing bias for last element\n\n\n\n        }\n\n\n\n    }\n\n    \n    return StringVar\n    \n    \n\n\n\n}\n\n//get the start of loop in tokens array\n\nfunction getLoopIndexStart(mutable_tokens, j, check, setIndex)\n\n{\n\n\n    while (mutable_tokens[j].value != check)\n\n\n\n    {\n\n\n        if (mutable_tokens[j + 1].value == check) {\n\n\n\n            setIndex = j + 1\n\n\n        }\n\n\n\n        j++;\n\n    }\n    return setIndex\n\n\n\n}\n\n\n//this is how we handle mulitiple conditions like अगर (ageone==10 && AverageAge<1000 && agetwo>100 || ageone==10) OR (ageone==10 )\n\n\nfunction handlemultConditions(element) {\n\n\n\n    for (let i = 0; i < element.length; i++) {\n\n\n\n        if ((element.charAt(i) == '&') || (element.charAt(i) == '|'))\n\n\n        {\n\n\n            let condition = element.substring(0, i + 2)\n\n            let SweepedElement = element.replace(condition, \"\")\n            let operator = ''\n\n\n\n            if ((element.charAt(i) == '&')) {\n                condition = condition.replace('&&', '')\n                operator = '&&'\n\n            } else if ((element.charAt(i) == '|')) {\n                condition = condition.replace('||', '')\n                operator = '||'\n\n            }\n\n\n            return {\n                SweepedElement,\n                condition,\n                operator\n            }\n\n\n\n\n            break;\n\n        }\n\n\n\n\n    }\n\n\n}\n\n//For operarions like Numbers.पुश(23)\n\nfunction AddElementToArray(Sourcedata,index, updated_tokens)\n{\n\n    let token = Sourcedata[index].value\n    \n\n    token = token.replace('पुश', '')\n    let Split = token.split('.')\n    let Array = Split[0]\n    let ElementtoPush = RemoveBrackets(Split[1])\n    \n    \n    if(ElementtoPush.charAt(0)=='\"'||ElementtoPush.charAt(0)==\"'\")\n    {\n\n\n        ElementtoPush=ElementtoPush\n    }\n    else{\n    ElementtoPush = updated_tokens.find(el => el.name == ElementtoPush).value\n    }\n\n    let ArrayEl = updated_tokens.find(el => el.name == Array)\n\n\n    let ArrayValue = ArrayEl.value\n    if (ArrayValue == '[]') {\n        ArrayValue = ArrayValue.split(',')\n    }\n    ArrayValue.push(ElementtoPush)\n\n\n    let indexofArray = updated_tokens.indexOf(ArrayEl)\n    \n\n    ArrayValue = ArrayValue.filter(el => el != '[]')\n    \n\n\n    updated_tokens[indexofArray].value = ArrayValue\n    \n\n\n\n\n\n}\n\n\n\nfunction AcceptInputandSetValue(tokens, index, updated_tokens)\n{\n\nlet SetInputValueAs = tokens[index].AcceptAs\n\n\n\n\nvar value = prompt('Enter Value for ' + SetInputValueAs)\n\n\nupdated_tokens.push({\n    name: SetInputValueAs,\n\n    value: value,\n\n\n})\n\n    \n}\n\n//One of the most frequently needed function\n\n//it is used to calculate variable values like x= y*100 (y*100 will be calculated here)\n\n//or Array[i]= x+ageone. (x+ageone) is caluculated here\n\n//If you are not getting the values right, this is where you should start debugging\n\nfunction CalculateValues(calculation, j, updated_tokens, IterationStart, global)\n\n\n{\n    \n\n    var flag=0\n    var error=''\n    var calculationArray = SplitElementsArray(calculation, j)\n    \n\n    var StringVar = SetValues(calculationArray, updated_tokens)\n    \n    let joinStringVar=StringVar.join('')\n\n    let NewStringVar=''\n    if(isNumber(joinStringVar.charAt(0))==true)\n    {\n        NewStringVar=eval(joinStringVar)\n\n    }\n    else if(isNumber(joinStringVar.charAt(0))==undefined)\n    {\n\n        StringVar.forEach(el=>{\n\n            if(el!='+')\n            {\n            el=el.toString()\n            NewStringVar=NewStringVar+el\n            }\n            \n\n        })\n        \n\n\n        \n    }\n    else{\n\n        StringVar=StringVar\n\n    }\n\n   \n\n\n        return (StringVar.length > 1 ? NewStringVar : StringVar)\n\n   \n\n\n\n}\n\n\n//Have to move this two functions to Pushfunctions.js\n\nfunction PushSetArrayIndexValue(value, tokens, data, i) {\n\n\n\n\n    tokens.push({\n        type: \"SetArrayIndexValue\",\n        value: value,\n        ValueToSet: data[i + 2] //skipping =\n    });\n\n}\n\nfunction PushGetArrayIndexValue(value, tokens, data, i) {\n\n\n\n\n    tokens.push({\n        type: \"GetArrayIndexValue\",\n        value: value,\n    });\n\n}\n\n\n//Performs only Array Operations\n\n//converts Array[a] into [Array, a]\n\n//This helps us to find their respective values easily in updated_tokens\n\nfunction CreateArrayElement(Value, iterator) {\n\n\n    let ArrayElement = RemoveBrackets(Value);\n\n    //Seprating out index identifier. a from Array[a]\n    let element = ArrayElement\n    element = element.replace(']', '')\n\n\n    let Split = element.split('[')\n    \n\n\n\n    Split[1] = iterator\n\n\n\n\n    Split = Split.join('[')\n    \n\n    Split = Split + ']'\n    ArrayElement = Split\n\n\n    ArrayElement = ArrayElement.replace(/' '/g, '')\n\n\n    return ArrayElement\n\n}\n\n\n//This function is used to get array or string elements. e.g Array[2], String[5] \n\n//Heavily used by compiler in loops\n\nfunction SetArrayorStringElement(ArrayElement, updated_tokens, iterator, NewValue, tokens) {\n    \n\n\n    ArrayElement = ArrayElement.replace(']', '')\n\n\n    let Split = ArrayElement.split('[')\n\n    let indexCollected = Split[1]\n\n\n    let Element = updated_tokens.find(el => el.name == NewValue)\n\n    //If element is an assigned variable. Find the value and set it.\n\n    if (Element) {\n        if (isCalculation(NewValue)) {\n\n            // This is to set x= y*100, Array[i]= x+ageone. \n\n            let token = tokens.find(el => el.value == NewValue)\n            let j = tokens.indexOf(token) - 1\n\n\n            let value = CalculateValues(NewValue, j, updated_tokens)\n\n            NewValue = value\n\n        }\n\n        NewValue = Element.value\n\n    }\n\n    if (iterator == true) {\n\n        //for Array[a]=a\n\n\n        if (isCalculation(NewValue)) {\n\n\n        } else {\n\n            NewValue = indexCollected\n\n        }\n    }\n\n    //if fresh newvalue is foumd. the one which doesnt yet exist in the program, then run this.\n    else {\n\n        NewValue = NewValue\n    }\n\n\n\n\n    let token = updated_tokens.find(el => el.name == Split[0])\n\n    let index = updated_tokens.indexOf(token)\n\n    //updated_tokens values will also get updated thrugh this reference\n    let value = token.value\n\n    value = value.toString()\n\n    value = value.replace(']', '')\n    value = value.replace('[', '')\n    value = value.split(',')\n\n\n\n\n    if (iterator == true) {\n\n        //This is for Array[a]=a\n\n        value[indexCollected] = indexCollected\n\n\n    } else {\n\n        //Run when iterator is not needed. iterator is present in ArrayEleMENT ALREADY. This is for Array[i]='Swanand'\n\n        value[indexCollected] = NewValue\n\n\n\n\n    }\n\n    //converting array back into the string representation of it for better printabillity\n\n    updated_tokens[index].value = '[' + value.toString() + ']'\n\n\n\n\n}\n\n\n//Printing a specific array element like Array[0], Array[3] etc.\n\n//Printing a dynamic array element like Array[i], Array[i+1] etc.\n\n\nfunction GetArrayorStringElement(element, updated_tokens, NewValue, flag) {\n\n    element = element.replace(']', '')\n\n    let Split = element.split('[')\n\n    let indexCollected = Split[1]\n\n    if (isNumber(indexCollected)) {\n\n\n        let token = updated_tokens.find(el => el.name == Split[0])\n        \n\n\n        let index = updated_tokens.indexOf(token)\n\n        let value = token.value.toString()\n        \n\n\n\n\n        if (token.type == 'Array') {\n\n\n            value = value.replace(']', '')\n            value = value.replace('[', '')\n            value = value.split(',')\n\n\n            if (NewValue != undefined) {\n\n                if (!isNumber(NewValue)) {\n\n                    NewValue = NewValue.replace(/\"/g, '')\n                    NewValue = NewValue.replace(/“/g, '')\n                    NewValue = NewValue.replace(/'/g, '')\n                    NewValue = NewValue.replace(/‘/g, '')\n                } else {\n\n                    NewValue = NewValue\n                }\n\n\n\n                value[indexCollected] = NewValue\n\n                updated_tokens[index].value = value\n\n\n\n\n            } else {\n\n\n                value = value[indexCollected];\n                //////\n                //////\n\n\n            }\n\n\n\n\n        }\n\n        else if (token.type == 'string' || token.type!='Array' ) {\n\n\n\n            value = value.charAt(indexCollected);\n\n\n\n        }\n\n\n\n\n        return value\n    }\n\n\n\n}\n\n//Needs improvement\n\nfunction ForLoopArrayorStringOutput(elementValue, iterator, updated_tokens, global)\n\n{\n\n\n    let CurrentElement = ''\n\n\n    CurrentElement = elementValue.name + '[' + iterator + ']'\n    //Foundvalue is decided in the function depending upon the type. \n    //if it's array run array[2], if its string run string.charAt(2)\n    let FoundValue = GetArrayorStringElement(CurrentElement, updated_tokens)\n\n\n    global.output = global.output + FoundValue + \"\\n\";\n\n\n\n}\n\n\n//Move it to typechecking.js\n\nfunction isNumber(element) {\n\n\n    if (/^[0-9]*$/gm.test(element)) {\n        return true;\n\n    }\n};\n\n\n\n//one of the heavily used function\n\n//converts ['a','+','b'] into [a+b] and then into [23,+,7] provided a=23 and b=7\n\n\nfunction SetValues(StringVar, updated_tokens)\n\n\n\n{\n\n\n    StringVar.forEach((el, i) =>\n\n        {\n\n            el = el.replace(/\\ /g, '');\n\n\n\n            if (el.charAt(el.length - 1) == ']') {\n                let ArrayElementValue = GetArrayorStringElement(el, updated_tokens)\n\n\n                ArrayElementValue = ArrayElementValue.replace(/['\"]+/g, '')\n\n                StringVar[i] = ArrayElementValue\n\n\n\n\n            } \n            \n            \n            //finding variable value here \n\n\n            let token = updated_tokens.find(element => element.name == el);\n\n\n\n            if (token != undefined) {\n\n                // if exists set it's value \n                StringVar[i] = token.value\n\n\n\n            }\n\n      \n\n\n        })\n\n\n    return StringVar\n\n\n\n\n}\n\n\n\n\n//ANCHOR \n//Now we hae converted found \"a+b-d\" into [a,+,b,-,d]\n\n//Now lets run a loops on it to convert into [5,+,6,-,7]\n\n\n//Updated_tokens is updated by replacing \"value:a+b-d\" with \"value:5+6-7\". \n//after eval function it will be set as \"value:2\"\n\n\n\n\nfunction UpdateUpdated_tokenswithValues(payload, i, updated_tokens) {\n\n    let StringVar = payload\n\n\n\n\n    //run if it's arithmetic operation like [\"5+6-7\"]\n    if (isNumber(StringVar[0])) {\n\n\n        let value = eval(StringVar.join(''))\n\n        return value\n\n    } else if (StringVar[1] == '==') {\n\n        let a = StringVar[0].toString()\n        let b = StringVar[2].toString()\n\n        let value = eval(a == b)\n\n        return value\n\n\n    }\n\n\n\n    //run if it's String operation like [\"reddit\",\"+\", \"is goat\"]\n    else {\n\n\n\n\n        if (StringVar.includes(\"+\")) {\n\n            StringVar[StringVar.indexOf(\"+\")] = \" \"\n\n\n        }\n\n\n\n\n        let value = StringVar.join(\"\")\n\n\n\n        return value\n    }\n\n}\n\n\n//Handle Blocks is a function which takes care of nested block by taking care of nested '{' and '}' brackets\n\n//it uses the stack to push and pop brackets to accurately identify start and the end of the block\n\nfunction HandleBlocks(mutable_tokens, j, StoreResult) {\n\n\n    //StoreResult is used to push data into it in case of forloop or while loop conetext\n    \n    //for a normal block like conditional block it might not need to be used yet\n\n\n\n    let ArrayBrackets = []\n\n\n    while (true)\n\n\n    {\n\n\n\n        if (mutable_tokens[j].value == '{') {\n\n            ArrayBrackets.push({\n                type: '{',\n                index: j\n            })\n            \n\n            if (StoreResult != undefined) {\n\n                StoreResult.push(mutable_tokens[j])\n            }\n\n\n        } else if (mutable_tokens[j].value == '}') {\n\n            //As soon as open bracket is found, pop the last arraybracket stack value\n            //that's the match\n\n            let x = ArrayBrackets.pop()\n        \n            if (StoreResult != undefined) {\n\n                StoreResult.push(mutable_tokens[j])\n\n\n                mutable_tokens[x.index].startIndex = x.index\n                mutable_tokens[x.index].EndIndex = j\n            }\n\n            //set start and end index value for that { } block\n            mutable_tokens[x.index].startIndex = x.index\n            mutable_tokens[x.index].EndIndex = j\n            if (ArrayBrackets.length == 0) {\n\n            //As soon as stack is empty we have finished our last lblock\n\n\n                break;\n\n            }\n\n\n\n\n        } else {\n\n            if (StoreResult != undefined) {\n\n                StoreResult.push(mutable_tokens[j])\n            }\n\n\n        }\n\n        j++;\n\n\n\n\n    }\n\n\n    return {\n        StoreResult,\n        j\n    }\n\n}\n\n\n//Handles conditional statements\n\n//It does not return true or false rather it tells us whether to skip the execution or continue execution depending upon truth value of condition\n\n//If true 'i' is set to current index position, if false 'i' is skipped until the end of conditional block/ \n\nfunction HandleConditions(sourcedata, i, updated_tokens) {\n\n    let element = sourcedata[i].value\n \n\n    //let token= updated_tokens.find(el=> el.originalvalue==sourcedata[i].value)\n\n\n    let SplitArray = SplitElementsArray(element, i)\n\n\n    let Values = SetValues(SplitArray, updated_tokens)\n\n\n    let ForLoopConditionValue = UpdateUpdated_tokenswithValues(Values, updated_tokens, i)\n\n\n    if (ForLoopConditionValue == false) {\n\n\n\n\n        while (sourcedata[i + 1].value != '}')\n\n\n\n\n        {\n\n\n            //tokens.splice(i+1, 1);\n\n            //No need to delete tokens, we are iust skipping over the values so that they won't be printed or run\n            \n            i++;\n\n\n\n\n        }\n\n\n        \n        return i\n\n\n\n    }\n\n\n\n\n}\n\n//Handly function to split and join Arrays\n\nfunction SplitandJoin(array, output, element) {\n\n    array[1] = output\n\n    let Joinarray = array.join('[') + ']'\n    element = Joinarray\n\n    return element\n\n\n}\n\nvar AccumulateValue = ''\n\nfunction ResetValue() {\n\n    AccumulateValue = ''\n\n}\n\n\n//One of the most important functions\n\n//Takes care of all kind of assignments provided in raw sourcecode\n\n//Message=\"Hello World\", Numbers=[1,2,3,4,5], Numbers[2]=23 etc.\n\n//If a certain value is not being assigned properly start debugiing here\n\nfunction AssignorUpdateValues(sourcedata, i, updated_tokens, iterator, OriginalIterator,global) {\n    \n\n    let variable = sourcedata[i - 1].value\n    \n    \n\n    let variableType = sourcedata[i - 1].type\n    \n    let varvalue = sourcedata[i + 1].value\n    \n    \n\n    if(varvalue=='\"'||varvalue==\"'\")\n    {\n\n\n\n        varvalue=' '\n    }\n    \n    //if someone accidenlty types Name=इनपुट or any other primary keywords\n    \n    if (varvalue.includes('दुहराओ') || varvalue.includes('रचना') || varvalue.includes('अन्यथा') || varvalue.includes('इनपुट') || varvalue.includes('पुश') || varvalue.includes('प्रिंट') || varvalue.includes('अगर')) \n    \n    {\n\n        let error= 'Assignment error in ' + '\"' + variable +' = '+ '\"' \n\n\nglobal.error.push(error)\n\n\n    }\n    \n\n\n\n    let varvalueType = sourcedata[i + 1].type\n\n    let x = updated_tokens.find((el, i) => el.name == varvalue)\n\n\n    //if a=b and user haven't defined b yet\n    \n    if(!isNumber(varvalue)&& varvalueType=='value' && x==undefined && varvalue!=' ' && !isEmptyStringorChar(varvalue))\n    \n    \n    {\n\n       \n\n            global.error.push('Cannot set ' + variable + ' to undefined ' + ': ' + varvalue + ' is undefined ' )\n\n\n\n\n    }\n\n\n    //to count the length, Numbers.संख्या()\n\n   else if(varvalue.includes('संख्या'))\n   \n   \n{\n\n  let Split=varvalue.split('.')\n  \n  let item=Split[0]\n \n  let Itemvalue=updated_tokens.find(el=>el.name==item).value\n  \n  \n\n  if(Itemvalue.includes('['))\n  {\n\n    Itemvalue= Itemvalue.toString().split(',')\n\n  }\n  else if(Itemvalue.length==1){\n      \nItemvalue=Itemvalue\n\n\n  }\n\n  else{\n\n    Itemvalue= Itemvalue.toString()\n\n  }\n\n\nlet ItemvalueLength=Itemvalue.length\n\n\nupdated_tokens.push({\n    name: variable,\n\n    value: ItemvalueLength,\n\n\n    identifier: i,\n    type: 'CalLength'\n})\n\n\n    \n}\n\n\n    //this runs only for operations like x=Numbers[a]\n\n\n   else if (varvalueType == 'GetArrayIndexValue')\n\n    {\n\n        let n = updated_tokens.find((el, i) => el.name == variable)\n\n        let index = updated_tokens.indexOf(n)\n\n\n\n        //Iterator is used only when we are looping over provided index not for the index that needs to be calculated\n        let element = varvalue.replace(']', '')\n\n        if(element.includes('+'))\n        {\n\n            var Split = element.split('+')\n            \n        }\n\n        else  if(element.includes('-'))\n        {\n\n            var Split = element.split('-')\n            \n            \n        }\n\n\n\n        var flag = false\n\n\n        //For operations like Name=Name+ Array[i]\n\n        if (element.includes('+') ||element.includes('-')  && !Split[0].includes('[')) {\n\n\n            flag = true\n            \n\n\n\n\n            let token = updated_tokens.find(el => el.name == Split[0])\n            let index = updated_tokens.indexOf(token)\n\n\n            let ArrayItem = Split[1].split('[')\n            \n\n\n\n\n            let output = CalculateValues(ArrayItem[1], i, updated_tokens)\n            \n\n\n\n            let ArrayElement = SplitandJoin(ArrayItem, output, element)\n            \n\n\n\n\n            //Get Numbers[3] value and now set it to our variable x\n            let value = GetArrayorStringElement(ArrayElement, updated_tokens)\n            \n            AccumulateValue += value\n\n            updated_tokens[index].value = AccumulateValue\n\n            \n\n\n\n        } else {\n\n            var Split = element.split('[')\n            \n\n\n\n        }\n\n\n\n        //for operations like x= Array[i+1] etc\n\n\n\n\n        if ((Split[1].includes('-') || Split[1].includes('+')) && !Split[1].includes('[')) {\n\n            let output = CalculateValues(Split[1], i, updated_tokens)\n\n\n            element = SplitandJoin(Split, output, element)\n\n\n        }\n\n\n        let token = updated_tokens.find(el => el.name == Split[1])\n        \n        \n        \n\n        //for operations like Array[Age]. Here index is an already defined variable\n        if (token != undefined && OriginalIterator != Split[1] && token.name!='')\n\n        {\n\n          \n            element = SplitandJoin(Split, token.value, element)\n            \n            \n\n\n        }\n\n        //for operations like Array[i]: Looping over original index value\n        else if (OriginalIterator == Split[1]) {\n\n\n            element = SplitandJoin(Split, iterator, element)\n\n        }\n\n\n        let ArrayElement = element\n        \n        \n\n\n\n\n        //Get Numbers[3] value and now set it to our variable x\n        let value = GetArrayorStringElement(ArrayElement, updated_tokens)\n        \n\n\n        if (n != undefined && flag == false) {\n\n\n            updated_tokens[index].value = value\n\n\n        } else if (flag == false) {\n\n\n            updated_tokens.push({\n                name: variable,\n\n                value: value,\n\n\n                identifier: i,\n                type: sourcedata[i + 1].type\n            })\n        }\n\n    } else {\n\n\n\n\n\n        let m = updated_tokens.find((el, i) => el.name == varvalue)\n        \n       \n\n        if (m != undefined) {\n\n\n\n            varvalue = m.value\n            \n            \n\n\n        }\n\n        \n\n\n        let n = updated_tokens.find((el, i) => el.name == variable)\n        \n        \n\n\n\n        if (n == undefined) {\n\n\n\n\n            //to check if the assigned value needs to be calculated. this is futher diveded in two types\n\n\n\n            if (isCalculation(varvalue))\n            \n            \n\n            {\n\n\n\n                //type 1- Age= 2020-2000 \n                if (isPureEval(varvalue))\n                \n\n\n\n                {\n\n                    let value = eval(varvalue)\n                    \n                    \n                    \n\n                    //write function for this, so repeatable\n                    updated_tokens.push({\n                        name: variable,\n\n                        value: value,\n\n                        identifier: i,\n                        type: sourcedata[i + 1].type\n                    })\n\n\n                }\n\n                //type 2- X= ageone+agetwo\n                else {\n\n                    //performing the calculation\n\n\n                    let value = CalculateValues(varvalue, i, updated_tokens,global)\n                    \n                    \n                    \n                    \n                    \n                    \n\n\n                    updated_tokens.push({\n                        name: variable,\n\n                        value: value,\n\n                        identifier: i,\n                        type: sourcedata[i + 1].type\n                    })\n\n\n\n                }\n\n\n            }\n\n\n            //if there is no need to calculate, push values as it is\n            else if(!isCalculation(varvalue)) {\n                \n                \n\n\n\n                updated_tokens.push({\n                    name: variable,\n\n                    value: varvalue,\n\n                    identifier: i,\n                    type: sourcedata[i + 1].type\n                })\n\n\n            }\n\n\n        }\n\n\n\n\n        //if it's already assgined, reassign it with updated value\n        else {\n\n\n\n\n            varvalue = varvalue.toString()\n            \n\n\n\n            if (varvalue.includes('-') || varvalue.includes('%')  || varvalue.includes('+') || varvalue.includes('/') || varvalue.includes('*')) {\n\n\n                // \n\n\n\n                let NewValue = CalculateValues(varvalue, i, updated_tokens,global)\n                \n                \n                \n                \n                \n                \n\n                n.value = NewValue\n\n            } else {\n\n\n                let index=updated_tokens.indexOf(n)\n                updated_tokens[index].value=varvalue\n\n\n            }\n\n\n\n\n        }\n\n\n    }\n\n\n}\n\n\n  //GetConditionValue is our goto function to evaluate a condition to true or false\n\n\nfunction GetConditionValue(element, updated_tokens, j) {\n\n\n    var ConditionValue = false\n\n    if (element.includes('&&') || element.includes('||')) {\n\n\n\n        let MultConditionsCount = parseInt(Count('&', element)) + parseInt(Count('|', element))\n        \n\n\n\n        //this will be our final values\n        //converted as true&&false&&true||true\n        let BuiltMultConditonWithValues = ''\n        let LastResult = {}\n\n\n        //running for loop on original condition to calculates each individual condition and adding its value in BuiltMultConditonWithValues\n\n        for (let i = 0; i <= MultConditionsCount; i++)\n\n        {\n\n\n\n\n            if (i == MultConditionsCount) {\n\n\n\n                let condition = LastResult.SweepedElement\n                condition = condition.replace(/ /g, '')\n\n\n                let SplitArray = SplitElementsArray(condition, j)\n\n                let Values = SetValues(SplitArray, updated_tokens)\n                \n\n\n                ConditionValue = UpdateUpdated_tokenswithValues(Values, updated_tokens, j)\n\n\n\n\n                BuiltMultConditonWithValues = BuiltMultConditonWithValues + ConditionValue\n\n\n            } else {\n\n\n                let result = handlemultConditions(element)\n\n                LastResult = result\n\n\n                element = result.SweepedElement\n                let condition = result.condition\n                condition = condition.replace(/ /g, '')\n\n\n\n\n                let SplitArray = SplitElementsArray(condition, j)\n    \n                let Values = SetValues(SplitArray, updated_tokens)\n             \n                ConditionValue = UpdateUpdated_tokenswithValues(Values, updated_tokens, j)\n\n                BuiltMultConditonWithValues = BuiltMultConditonWithValues + ConditionValue + result.operator\n                \n\n\n\n            }\n\n\n        }\n\n\n        //setting the final condition value in cases like अगर (ageone==10 && AverageAge<1000 && agetwo>100 || ageone==10) \n        \n        ConditionValue = eval(BuiltMultConditonWithValues);\n        \n        \n\n\n\n\n    } else {\n\n        //let token= updated_tokens.find(el=> el.originalvalue==mutable_tokens[j].value)\n\n        let SplitArray = SplitElementsArray(element, j)\n\n\n\n\n        let Values = SetValues(SplitArray, updated_tokens)\n        Values = Values.filter(function(item) {\n\n            return item !== \"\"\n        })\n\n\n\n        //Setting the final condition value in cases like अगर (ageone==10) \n\n        ConditionValue = UpdateUpdated_tokenswithValues(Values, updated_tokens, j)\n\n\n    }\n\n    return ConditionValue\n\n\n}\n\n    //Getting every single information about our forloop \n\n\nfunction ForLoopSetMetadata(tokens, i, updated_tokens) {\n\n\n\n    var ForLoopMetaData = tokens[i + 1]\n\n    //Splitting the ForLoopMetaData values individually\n    var iterator = ForLoopMetaData.iterator\n\n\n    var element = ForLoopMetaData.value\n    var IterationStart = parseInt(ForLoopMetaData.iterationStart)\n\n    var IterationEnd = parseInt(ForLoopMetaData.iterationEnd)\n\n\n    //pushing index \n\n//checking if iteration end is an predefined variable\n\n\nlet token=updated_tokens.find(el=>el.name==ForLoopMetaData.iterationEnd)\n\nif(token!=undefined){\n\nIterationEnd=parseInt(token.value)\n\n\n}\n    \n\n    \n    // var ForLoopSourcedata = ForLoopMetaData.ForLoopSourcedata\n\n\n    var elementValue = updated_tokens.find(el => el.name == element)\n\n    var elementLength = 0\n\n    var ForLoopSourcedataIndexStart = 0\n\n    var OriginalIterator = ForLoopMetaData.iterator\n\n    // Run if start and end parameters are not given e.g दुहराओ a को  Name मे \n    // This is ran just to get Start and End parameters as they are not provided\n    if (ForLoopMetaData.iterationEnd == undefined) {\n\n\n        //run if element is array\n        if (elementValue.type == 'Array')\n\n\n        {\n            elementLength = elementValue.value.split(',').length\n\n            IterationStart = 0\n            IterationEnd = elementLength - 1\n\n\n        }\n\n        //run if element is String\n        else {\n            elementLength = elementValue.value.length\n            IterationStart = 0\n            IterationEnd = elementLength - 1\n\n\n        }\n\n\n    }\n\n\n\n\n\n    var Cycle = IterationEnd\n    \n\n\n    return {\n        ForLoopSourcedataIndexStart,\n        Cycle,\n        OriginalIterator,\n        IterationStart,\n        iterator,\n        element,\n        elementValue\n    }\n\n\n\n}\n\n\n//To resolve operations like Array[a]=a+2 in loops and in plain context\n\nfunction SetArrayIndexValue(SourceData,i,j,CompleteTokenValueList,tokens,OriginalIterator,iterator)\n{\n\n    let Value = SourceData[i].value\n                      \n\n    let ValueToSet = SourceData[i].ValueToSet\n    \n\n    let element = RemoveBrackets(Value);\n\n    var ArrayElement = ''\n\n\n    //Seprating out index identifier. xyz from Array[xyz]\n\n    element = element.replace(']', '')\n    \n\n\n    let Split = element.split('[')\n    \n\n\n\n    // run if we need to set direct Array element value. like Array[2]= xyx                    \n    if (isNumber(Split[1])) {\n\n        Split = Split.join('[')\n        //\n\n        Split = Split + ']'\n\n\n        ArrayElement = Split\n        // \n\n        NewValueToSet = CalculateValues(ValueToSet, j, CompleteTokenValueList)\n\n\n\n        SetArrayorStringElement(ArrayElement, CompleteTokenValueList, false, NewValueToSet, tokens)\n\n\n\n\n    }\n\n    // run if we need to dynamically set Array element value. like Array[i]= xyx\n    //CreateArrayElement function will create dynamic Array values. like Array[0], Array[1] etc.                    \n    else {\n\n\n        let index = Split[1]\n        \n\n\n        // setting iterator as per user input \n        //for iterator like count=count + 1, Array[count]\n\n        let newInterator = 0\n        \n        let token = CompleteTokenValueList.find(el => el.name == index)\n        \n\n        if (token != undefined) {\n\n            newInterator = token.value\n            \n\n        } else {\n\n            newInterator = iterator\n        }\n\n\n\n        ArrayElement = CreateArrayElement(Value, newInterator)\n        \n\n\n\n\n    }\n\n\n    // this code is written to find operations like Array[a]= a*100+age*a. notice a\n    //find a way to simplify this in long term\n\n    let data = ValueToSet\n\n\n    data = data.split('*').toString();\n    data = data.split('+').toString();\n    data = data.split('-').toString();\n    data = data.split('/').toString();\n    data = data.split(',')\n   \n\n\n\n\n    //building a new value to convert a*100+age*a into 5*100+age*a and then sending it to CalculateValues()\n    let NewValueToSet = ''\n\n    \n\n\n    if (data.includes(Split[1]) && data.length > 1)\n\n    {\n\n\n        //we have operations like Array[a]= a*100+age*a. notice a\n\n        for (let m = 0; m < ValueToSet.length; m++)\n\n        {\n\n            if (ValueToSet[m] == Split[1] && !(/^[a-z]+$/i.test(ValueToSet[m + 1])))\n\n            {\n\n\n\n                // value is been set . replacing index value a with iteartor value 0,1,2, etc.   \n                NewValueToSet = NewValueToSet + iterator\n\n            } else {\n\n                NewValueToSet = NewValueToSet + ValueToSet[m]\n\n\n\n            }\n\n\n\n        }\n\n        let iterat = false\n        //gave it a different name so it would not fuck up with for loop iterator\n\n        NewValueToSet = CalculateValues(NewValueToSet, j, CompleteTokenValueList, )\n\n        SetArrayorStringElement(ArrayElement, CompleteTokenValueList, iterat, NewValueToSet, tokens)\n\n\n\n\n    }\n\n\n    // this condition enables program to only run  Array[a]= xyz when iterator is a. It disallows running Array[blablabla]=xyz\n    if (OriginalIterator == Split[1]) {\n\n\n        if (Split[1] == ValueToSet) {\n\n\n            let iterator = true\n\n            SetArrayorStringElement(ArrayElement, CompleteTokenValueList, iterator, ValueToSet, tokens)\n\n\n\n        }\n\n        // for operations like Array[a]=ageone*100\n\n\n        if (!data.includes(Split[1]) && OriginalIterator == Split[1]) {\n\n\n\n            let iterator = false\n\n            ValueToSet = CalculateValues(ValueToSet, j, CompleteTokenValueList)\n  \n            SetArrayorStringElement(ArrayElement, CompleteTokenValueList, iterator, ValueToSet, tokens)\n\n\n\n        }\n\n\n    }\n\n\n    //might have to add more conditions in the future\n    else {\n\n        let iterator = false\n\n        ValueToSet = CalculateValues(ValueToSet, j, CompleteTokenValueList)\n\n        SetArrayorStringElement(ArrayElement, CompleteTokenValueList, iterator, ValueToSet, tokens)\n\n\n\n\n    }\n\n\n\n\n\n    \n}\n\n\n\n\nexport {\n    GetCleanSourcedata,\n    Count,\n    ForLoopSetMetadata,\n    getLoopIndexStart,\n    AddElementToArray,\n    ResetValue,\n    HandleBlocks,\n    HandleConditions,\n    AssignorUpdateValues,\n    PushGetArrayIndexValue,\n    PushSetArrayIndexValue,\n    isArrayOperation,\n    GetConditionValue,\n    CalculateValues,\n    handlemultConditions,\n    CreateArrayElement,\n    SetArrayorStringElement,\n    RemoveBrackets,\n    ForLoopArrayorStringOutput,\n    GetArrayorStringElement,\n    AcceptInputandSetValue,\n    SplitElementsArray,\n    SetValues,\n    UpdateUpdated_tokenswithValues,\n    SetArrayIndexValue\n}"]}]}