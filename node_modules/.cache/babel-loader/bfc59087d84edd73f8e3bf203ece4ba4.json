{"remainingRequest":"/Users/jonny/Documents/Work/test/node_modules/thread-loader/dist/cjs.js!/Users/jonny/Documents/Work/test/node_modules/babel-loader/lib/index.js!/Users/jonny/Documents/Work/test/node_modules/vuetify-loader/lib/loader.js??ref--17-0!/Users/jonny/Documents/Work/test/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/jonny/Documents/Work/test/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jonny/Documents/Work/test/src/views/Practise.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jonny/Documents/Work/test/src/views/Practise.vue","mtime":1592314755731},{"path":"/Users/jonny/Documents/Work/test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jonny/Documents/Work/test/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jonny/Documents/Work/test/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jonny/Documents/Work/test/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Users/jonny/Documents/Work/test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jonny/Documents/Work/test/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Practise.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"hello\">\n   \n <Header/>\n\n   <div id=\"compiler\">\n\n\n   <div id=\"textarea\">\n\n\n\n\n   <!-- <textarea  onkeydown=\"if(event.keyCode===9){var v=this.value,s=this.selectionStart,e=this.selectionEnd;this.value=v.substring(0, s)+'\\t'+v.substring(e);this.selectionStart=this.selectionEnd=s+1;return false;}\" ref=\"textareaID\" placeholder=\"Welcome To Kalaam, This is your Code cm.\" v-model=\"code\" type=\"text\" name=\"code\" id=\"codearea\"></textarea>-->\n\n  <no-ssr placeholder=\"Codemirror Loading...\">\n\n  <codemirror id=\"codearea\" style=\"text-align:left;\" ref=\"myCm\"\n              :value=\"code\" \n              placeholder=\"Welcome To Kalaam, This is your Code Editor.\"\n              :options=\"cmOptions\"\n              @ready=\"onCmReady\"\n              @focus=\"onCmFocus\"\n              @input=\"onCmCodeChange\">\n  </codemirror>\n  </no-ssr>\n\n    <button style=\"background: linear-gradient(to right, #11998e, #12ff6b);\n    border: none;\n    font-weight: 600;\" id=\"subm\" @click=\"RUN()\">RUN</button>\n        <button id=\"subm\" @click=\"Add('प्रिंट()')\">प्रिंट</button>\n<button id=\"subm\" @click=\"Add('रचना')\">रचना</button>\n    <button id=\"subm\" @click=\"Add('इनपुट()')\">इनपुट</button>\n\n    <button id=\"subm\" @click=\"Add('अगर()')\">अगर</button>\n\n    <button id=\"subm\" @click=\"Add('दुहराओ x को y मे')\">दुहराओ </button>\n    <button id=\"subm\" @click=\"Add('जबतक()')\">जबतक</button>\n    <button id=\"subm\" @click=\"Add('.संख्या()')\">.संख्या</button>\n    <button id=\"subm\" @click=\"Add('.पुश()')\">.पुश</button>\n    <button id=\"subm\" @click=\"Add('अन्यथा')\">अन्यथा</button>\n    \n\n   \n   </div>\n\n    <div id=\"output\">\n\n<div id=\"bharatDIV\">\n\n<p id=\"version\">Kalam v1.0.0</p>\n<p id=\"CodeStatus\" v-if=\"this.isError==false\">{{TimeTaken}}</p>\n        \n<p id=\"CodeStatus\" v-if=\"this.isError==true\" >{{TimeTaken}}</p>\n        \n\n<div id=\"printOutput\">\n\n<p style=\"white-space: pre; \"  id=\"linebylineOutput\" v-for=\"(output,index) in this.linebylineOutput\" :key=\"index\">\n\n\n {{output}} \n\n\n\n</p>\n</div>\n</div>\n\n\n\n\n    </div>\n</div>\n  \n\n    \n      \n  </div>\n</template>\n\n<script>\nimport Header from '../components/Header'\n\nimport { codemirror } from 'vue-codemirror'\n \n// require styles\nimport 'codemirror/lib/codemirror.css'\n   import {\n    SourceDataReplaceforEasyParsing\n} from '../FunctionScripts/functions'\nimport * as TypeCheck from '../FunctionScripts/TypeChecking'\nimport * as AdvancedTypeCheck from '../FunctionScripts/AdvancedTypeChecking'\nimport * as BuildOperation from '../FunctionScripts/BuildOperations'\nimport {\n    PushArray,\n    PushCalculation,\n    PushConditionalKeyword,\n    PushCondition,\n    PushForLoop,\n    PushWhileLoop,\n    PushWhileLoopCondition,\n    PushForLoopAruguments,\n    PushExpression,\n    PushKeyword,\n    PushNumber,\n    PushOperator,\n    PushRealTimePrintOperation,\n    PushString,\n    PushStringandValueOperation,\n    PushVariable,\n    PushVariableValue,\n    PushFunctionData,\n    PushFunctionExecution,\n    PushToArray,\n    PushInput\n\n} from '../FunctionScripts/PushFunctions'\nimport {\n    RemoveBrackets,\n    Count,\n    ResetValue,\n    isArrayOperation,\n    CreateArrayElement,\n    CalculateValues,\n    GetArrayorStringElement,\n    SetArrayorStringElement,\n    PrintArrayElement,\n    handlemultConditions,\n    HandleBlocks,\n    SplitElementsArray,\n    SetValues,\n    PushSetArrayIndexValue,\n    PushGetArrayIndexValue,\n    UpdateUpdated_tokenswithValues,\n    GetConditionValue,\n    ForLoopArrayorStringOutput,\n    AssignorUpdateValues,\n    HandleConditions,\n    getLoopIndexStart,\n    ForLoopSetMetadata,\n    SetArrayIndexValue\n} from '../FunctionScripts/MiscImportantFunctions'\n\nimport { mapState } from 'vuex'\n\n\n\nexport default {\n    name: \"HelloWorld\",\n    props: {\n        msg: String\n    },\n\n   \n      computed: mapState(['CurrentCode']),\n\n\n    data() {\n        return {\n            code:'',\nCodeinuse:'',\n           \n \n            output: '',\n            cm:'',\n            error: [],\n            OperationObjects: [],\n            linebylineOutput: '',\n            TimeTaken: '',\n            inputIndexes: [],\n            input: '',\n            isError:'',\n            LastConditionValue:[],\n            LineByLineCode:[],\n            cmOptions: {\n        // codemirror options\n        tabSize: 4,\n        lineNumbers: true,\n        line: true,\n        theme:''\n      }\n\n        };\n    },\n      components: {\n    codemirror,\n    Header\n  },\n\n mounted() {\n    console.log('this is current codemirror object', this.codemirror)\n    // you can use this.codemirror to do something...\n  },\n\n    created(){\n\n\n\nlet m=this.$store.state.CurrentCode.replace('&lt;','<')\nm=m.replace('&gt;','>')\nthis.code=m\n\n\n\n/*\nthis.Codeinuse=m\n\n\nif(this.code.length>0)\n{\n\nthis.LineByLineCode=this.code.split(\"\\n\")\n\nthis.LineByLineCode.forEach((el,index)=>{\n    \n\n\nel= (index+1) + '  ' + el\n\nthis.LineByLineCode[index]=el + '\\n'\n\n\n})\n\n \n this.LineByLineCode=this.LineByLineCode.join('\\n')\n\n this.code=this.LineByLineCode\n\n}\n \n*/\n\n    },\n\n    methods: {\n\n\n onCmReady(cm) {\n      console.log('the editor is readied!', cm)\n\n     \n\nthis.cm=cm;\n\nif(screen.width<420)\n{\n\n this.cm.setSize('100%', 300);\n\n}\nelse{\n\n this.cm.setSize('100%', 500);\n}\n\n\n    },\n    onCmFocus(cm) {\n    \n\n\n      //this.cm=cm\n    },\n    onCmCodeChange(newCode) {\n      //console.log('this is new code', newCode)\n      this.code = newCode\n    },\n\nAdd:function(insert)\n\n{\n\nvar doc = this.cm.getDoc();\n\n    var cursor = doc.getCursor();\n    doc.replaceRange(insert, cursor);\n \n\n\n\n}\n,\n        RUN: function() {\n\n\n\n                var t0 = performance.now()\n\n                this.isError=false\n\n                //to stop accumulating output on succesive RUN\n                this.output = ''\n                this.input = '',\n                    this.linebylineOutput = this.output.split(\"\\n\")\n                this.inputIndexes = []\n                this.error = []\n                this.OperationObjects = []\n                var sourcedata = this.code;\n                var cleaned_sourcedata = []\n                var i = 0;\n                var tokens = [];\n                var mixedimpurity = []\n                var updated_tokens = []\n                var functionContextupdated_tokens = []\n                var variables_array = []\n                var assigned_variables = []\n                var terms = []\n                var terms2 = []\n                var operation = ''\n                var CalculationStack = []\n                var foundToken = ''\n                var ReIntializedVariables = []\n                var tempthis=this\n\n                //emptying accumulatedvalue stored for operations like Name= Name+Array[i]\n                //See AssignorUpdateValues fuction for more\n                ResetValue()\n\n\n               \n\n                function AddOutput(tempthis,value)\n                {\n\n\n\n                tempthis.output = tempthis.output + value + \"\\n\";\n                \n                \n\n\n\n                }\n\n\n                //preparing sourcedata for easy parsing by handling new lines, enters etc.\n                //cleaning up the data to get my version of sourcedata. it's better to get version suitable for me because users can type what they wish but I need to maintain \n                //integrity of program in every possible conditio. So. I created my own condition below\n\n                function GetCleanSourcedata(sourcedata, cleaned_sourcedata, impurities) {\n\n                    sourcedata = SourceDataReplaceforEasyParsing(sourcedata)\n\n                    sourcedata.forEach((element, i) => {\n\n\n                        //finding the elements which has =\" in it so that to seprate them e.g. anna=\"swanand\" also finding the elements which starts with =. e.g \"=78787890\"\n\n\n\n                        if (!element.includes('==') && (element.indexOf('=\"') > -1 || element.indexOf('=') > 0 || element.charAt(0) == \"=\") && element != '==')\n\n\n                        {\n\n\n\n                            impurities.push(element) //push such element as impurity in impurities\n\n\n\n                            let elements = element.split(\"=\")\n                            let index = cleaned_sourcedata.length\n\n\n                            cleaned_sourcedata[index] = (elements[0])\n                            cleaned_sourcedata[index + 1] = (\"=\")\n                            cleaned_sourcedata[index + 2] = (elements[1])\n\n\n\n                        }\n\n                       \n\n                        //as long as element is pure, push it to new and clean version of sourcedata\n                        if (!impurities.includes(element)) {\n\n\n\n                            cleaned_sourcedata.push(element)\n\n                        }\n\n                        //\n\n                    })\n\n\n                    //removing empty \"\" values for final version of sourcedata\n                    //SECTION FInal sourcedata cleaning\n\n                    cleaned_sourcedata = cleaned_sourcedata.filter(function(item) {\n\n                        return item !== \"\"\n                    })\n\n\n\n                    return cleaned_sourcedata;\n\n                }\n\n\n                let Result = GetCleanSourcedata(sourcedata, cleaned_sourcedata, mixedimpurity)\n\n                cleaned_sourcedata = Result\n                console.log('cleaned_sourcedata: ', cleaned_sourcedata);\n\n\n\n\n                //SECTION - Checking for type of characters\n\n\n                const isVariable = TypeCheck.isVariable()\n                const isNumber = TypeCheck.isNumber()\n\n                const isOperator = TypeCheck.isOperator()\n\n                const isKeyword = TypeCheck.isKeyword()\n                const isConditionalKeyword = TypeCheck.isConditionalKeyword()\n                const isForLoop = TypeCheck.isForLoop()\n                const isWhileLoop = TypeCheck.isWhileLoop()\n                const isFunction = TypeCheck.isFunction()\n                //needs work\n                const isExpression = TypeCheck.isExpression()\n\n                const isArray = TypeCheck.isArray()\n                const isInput = TypeCheck.isInput()\n\n                const isSetArrayIndexValue = TypeCheck.isSetArrayIndexValue()\n\n                // const isEmptyArrayInit = TypeCheck.isEmptyArrayInit()\n\n                const isString = TypeCheck.isString()\n                const isEmptyStringorChar = TypeCheck.isEmptyStringorChar()\n\n                const isPureEval = AdvancedTypeCheck.isPureEval()\n\n                //if parser encounters anything like (\" or (, then that's a realtime print. \n                //buildstring will be applied now to create a string and push it into tokens\n\n                const isRealTimePrintMultipleString = AdvancedTypeCheck.isRealTimePrintMultipleString()\n\n\n\n                const isStringandValue = AdvancedTypeCheck.isStringandValue()\n\n                const isCalculation = AdvancedTypeCheck.isCalculation()\n\n                const isDirectPrintArithmetic = AdvancedTypeCheck.isDirectPrintArithmetic()\n\n\n\n\n\n                //SECTION Build Operations \n\n\n                const BuildString = BuildOperation.BuildString()\n\n                const BuildArray = BuildOperation.BuildArray()\n\n                //this function is the first step to handlle operations like अगर (ageone==10 && AverageAge<1000 && agetwo>100 || ageone==10) OR (ageone==10 )\n\n\n                const BuildCondition = BuildOperation.BuildCondition()\n\n\n\n                //This will run for every print statement encountered in the program, not just for loops\n\n                function IfTokenPrint(Tokens, updated_tokens, j, global, iterator, OriginalIterator)\n\n\n\n\n                {\n\n\n                    var token = Tokens[j].value\n                    \n\n\n\n                    var NextTokenValue = Tokens[j + 1].value\n                    \n                    \n                    \n                    //NextTokenValue = NextTokenValue.replace(\"+\", ' + ')\n                    \n\n\n\n\n                    var StringVar = []\n\n                    var b = RemoveBrackets(NextTokenValue)\n                    \n                    \n                    \n\n                    if (isVariable(b) && !variables_array.includes(b)) {\n\n                        variables_array.push(b)\n                        // \n\n                    }\n\n                    //SECTION - Outputting the code\n                    // finding the relvant value and then output it as HTML\n\n                    //This loop is only for printing direct values like print(name), print(array)\n                    updated_tokens.forEach((el, i) => {\n                        \n                        \n                        \n                        \n                        \n\n\n                        if (el.name == b) {\n                            \n                            \n\n                            //for calculations like x=ageone+agetwo\n\n                            //If we have already caluculated value, use that or else move forward\n\n\n\n\n                            if (assigned_variables.includes(el)||assigned_variables.includes(el.name) ) {\n\n\n                                \n\n                                AddOutput(global, el.value)\n\n\n\n                            } else {\n\n\n                                if (isNumber(el.value)) {\n                                    \n                                    \n\n\n\n                                     AddOutput(global, el.value)\n\nassigned_variables.push(el.name);\n\n\n\n\n                                }\n\n                                //operations like age=2020-1996\n                                else if (isPureEval(el.value)) {\n\n\n\n\n                                    let outputpure = eval(el.value)\n\n\n\n                                    el.value = outputpure\n\n\n                                     AddOutput(global, el.value)\n\n                                    assigned_variables.push(el.name);\n\n                                }\n\n\n\n                                //operations like name=\"swanand kadam\", variable assignments as strings\n                                else if (!isPureEval(el.value) && !isNumber(el.value))\n                                \n\n\n                                {\n\n\n\n                                    if (!(el.name.includes(']') && el.name.includes('['))) {\n\n\n                                        if(el.type=='Array')\n                                        {\n\n\nif (el.value.includes('[')==false)\n\n{\n\nel.value='['+el.value.toString()+']'\n\n\n\n}\n\n                                        }\n\n                                        AddOutput(global, el.value)\n                                        \n                                        \n\n\n\n                                        assigned_variables.push(el.name);\n                                    }\n\n\n\n\n                                }\n\n\n                            }\n\n                        }\n\n\n\n\n                        // work to be continued\n                    })\n\n\n                    //ANCHOR - CONDITION 2\n                    if (Tokens[j + 1].type == 'Array')\n\n\n\n\n                    {\n\n                        //To run only if iterator is present\n\n                        //This runs on for loop - Print(Array[a]) etc\n\n                        //this runs only if for(i) and in the loop, array[i], not on array[x]. Iterator and index should be same\n\n                        if (iterator != undefined && Tokens[j + 1].IndexInput == OriginalIterator)\n\n                        {\n\n\n\n                            let Value = NextTokenValue\n                            // console.log('Value: ', Value);\n\n                            let ArrayElement = CreateArrayElement(Value, iterator)\n\n\n                            let output = GetArrayorStringElement(ArrayElement, updated_tokens)\n\n\n\n\n                            AddOutput(global, output)\n\n\n                            assigned_variables.push(Tokens[j + 1]);\n\n\n                        }\n\n\n                        //This runs to Print(Array[2]) like specific array values\n                        else if (Tokens[j+1].IndexInput != OriginalIterator)\n                        \n\n\n                        {\n\n                            //\n\n                            let Value = NextTokenValue\n\n                            let IndexToChange = Tokens[j + 1].IndexInput\n\n\n                            let ArrayElement = CreateArrayElement(Value, IndexToChange)\n\n\n                            let element = ArrayElement.replace(']', '')\n\n\n                            let Split = element.split('[')\n\n\n\n\n                            if (Split[1].includes('-') || Split[1].includes('+')) {\n\n\n                                let output = CalculateValues(Split[1], j, updated_tokens)\n\n                                Split[1] = output\n\n                                Split = Split.join('[') + ']'\n                                ArrayElement = Split\n                                //console.log('ArrayElement: ', ArrayElement);\n\n\n                            }\n\n\n                            let token = updated_tokens.find(el => el.name == Split[1])\n\n                            if (token != undefined && OriginalIterator != Split[1]) {\n\n                                Split[1] = token.value\n\n                                Split = Split.join('[') + ']'\n                                ArrayElement = Split\n\n\n                            } else {\n\n                                ArrayElement = ArrayElement\n                                //console.log('ArrayElement: ', ArrayElement);\n\n                            }\n\n\n                            let output = GetArrayorStringElement(ArrayElement, updated_tokens)\n\n\n\n\n                                        AddOutput(global, output)\n                             console.log('output: ', output);\n\n\n\n\n                        }\n\n\n                    }\n\n\n\n\n                    //printing direct numbers and direct calcultions like print(10), print(10*10)\n                    else if (token == 'प्रिंट' && (isPureEval(RemoveBrackets(NextTokenValue)) || isNumber(RemoveBrackets(NextTokenValue)))) {\n\n\n                        NextTokenValue=RemoveBrackets(NextTokenValue)\n                        \n\nif(isNumber(NextTokenValue) && Tokens[j+1].type!='Calculation')\n\n\n{\n   \nAddOutput(global, NextTokenValue)\n\n}\n\nelse{\n\n\nlet a = eval(NextTokenValue)\nconsole.log('a: ', a);\n\n                          AddOutput(global, a)\n\n}\n                        \n                        \n\n                                     \n\n                    }\n\n\n\n\n                    //foroperations like print('you live, you learn')\n                    else if (Tokens[j + 1].mode == \"RealTimePrint\" && !NextTokenValue.includes('+') && !NextTokenValue.includes('='))\n\n                    {\n\n\n                        let output = RemoveBrackets(NextTokenValue)\n\n                        output = output.replace(/\"/g, '');\n                        output = output.replace(/'/g, '');\n\n\n                                        AddOutput(global, output+\"\\n\")\n\n\n\n                    }\n\n                    //operations like print(Age + 'is young age')\n                    else if (Tokens[j + 1].mode == \"RealTimePrint\" && NextTokenValue.includes('+')) {\n\n\n\n                        let x = SplitElementsArray(NextTokenValue)\n\n\n\n\n                        StringVar = SetValues(x, updated_tokens)\n\n\n\n\n                        StringVar = StringVar.join('')\n                        StringVar = StringVar.split(\"+\")\n\n                        let output = StringVar.join(' ')\n                        output = RemoveBrackets(output)\n\n                        AddOutput(global, output+\"\\n\")\n\n\n\n                    } else if ( isCalculation(RemoveBrackets(NextTokenValue)) && Tokens[j + 1].mode != \"RealTimePrint\")\n                    \n\n\n                    {\n\nNextTokenValue=RemoveBrackets(NextTokenValue)\n\n                        let output = CalculateValues(NextTokenValue, j, updated_tokens)\n\n                        AddOutput(global, output+\"\\n\")\n\n\n                    }\n                    \n\n\n\n\n                }\n\n\n                //END OF Functions and Imported Functions\n\n\n\n                //SECTION - Parsing STARTS here\n\n                //SECTION - Checking each token and adding to tokens array\n\n\n\n            \n                let variableArray = [] //TO REMOVE DUPLICATE VARIABLES, SEE 482\n\n                function Parse(cleaned_sourcedata, i) {\n\n                    var element = cleaned_sourcedata[i];\n\n\n                    var string = []\n\n\n\n\n                    if (isVariable(element) == true) {\n                        \n\n\n\n                        if (cleaned_sourcedata[i + 1] == '=') {\n\n\n\n                            PushVariable(element, tokens)\n\n\n                            if (variableArray.includes(element)) {\n\n                                // let UpdateElementValue = element\n\n                                let x = tokens.find(el => el.value == element)\n\n                                let index = tokens.indexOf(x)\n\n\n                                ReIntializedVariables.push({\n                                    name: element\n                                })\n\n                                //\n\n                                //tokens[index+2].value= cleaned_sourcedata[i+2]\n\n\n\n                            }\n\n                            variableArray.push(element)\n\n\n\n\n                        } else if (cleaned_sourcedata[i - 1] == '=') {\n\n\nconsole.log('element: ', element);\n                            PushVariableValue(element, tokens)\n                            \n\n                        }\n\n                    } \n                    \n                    else if (isNumber(element) == true) {\n\n                        PushNumber(element, tokens)\n\n                    } \n\n                    else if(isEmptyStringorChar(element)==true){\n\n\n\n                         if(element.length>1 && (element.charAt(0)==\"'\"||element.charAt(0)=='\"')){\n                             \n\nelement=element.replace(/['\"]+/g, '')\n\n        \n\n    }\n\n    else{\n\n        element=\" \"\n    }\n\n                        \nPushVariableValue(element,tokens)\n\n\n\n\n\n                    }\n                    \n                    else if (isInput(element) == true)\n                    \n\n                    {\n\n                        PushInput(element, tokens, cleaned_sourcedata, i)\n\n\n\n\n                    } \n                    \n                    else if (isOperator(element) == true) {\n                        \n                        PushOperator(element, tokens)\n\n                    } \n                    \n                    else if (isKeyword(element) == true) {\n\n                        PushKeyword(element, tokens)\n\n                    } \n                    \n                    else if (isFunction(element) == true) {\n\n                        PushFunctionData(element, tokens, cleaned_sourcedata, i)\n\n                    }\n\n                    //check if it accpets Arry[2a] as index : \n                    else if (isArray(element) == true) {\n\n\n\n\n                        if (element.charAt(element.length - 1) == ']') {\n\n\n\n                            PushArray(element, tokens)\n\n                        } else {\n\n\n                            let BuiltArray = BuildArray(element, i, cleaned_sourcedata)\n\n                            PushArray(BuiltArray, tokens)\n\n\n\n                        }\n                    }\n\n                    //for Numbers[a]=x\n                    else if (isSetArrayIndexValue(element, cleaned_sourcedata, i) == true) {\n\n\n\n\n                        PushSetArrayIndexValue(element, tokens, cleaned_sourcedata, i);\n\n\n\n                    }\n\n\n\n                    //for x=Numbers[a]\n                    else if (isSetArrayIndexValue(element, cleaned_sourcedata, i) == false) {\n\n\n\n                        PushGetArrayIndexValue(element, tokens, cleaned_sourcedata, i)\n\n\n\n\n                    }\n\n                \n                    else if (isConditionalKeyword(element) == true) {\n\n\n\n                        if (isWhileLoop(element) == true) {\n\n                            PushWhileLoop(element, tokens, cleaned_sourcedata, i)\n                            // PushWhileLoopCondition(element, cleaned_sourcedata, i, tokens)\n\n\n                        } else {\n\n                            PushConditionalKeyword(element, tokens)\n                        }\n\n\n                        let foundcondition = BuildCondition(element, i, cleaned_sourcedata)\n                        // console.log('foundcondition: ', foundcondition);\n\n\n\n                        PushCondition(foundcondition, tokens)\n\n\n\n\n                    } \n\n                    else if(element.includes('पुश'))\n    \n{\n\n   PushToArray(element, tokens)\n\n\n                    }\n                    \n                    \n                    else if (isForLoop(element) == true) {\n\n                        PushForLoop(element, tokens)\n                        PushForLoopAruguments(element, cleaned_sourcedata, i, tokens)\n\n                        updated_tokens.push({\n\n                            name: cleaned_sourcedata[i + 1],\n                            value: 0,\n                            type: 'ForLoopIterator'\n\n                        })\n\n\n                    } \n                    \n                    \n                    else if (isCalculation(element) == true) {\n\n\n                        let element = ''\n\n                        if (cleaned_sourcedata[i + 1] != undefined) {\n\n\n\n                            // this is to perform long operations like AverageAge=(ageone+agetwo)/2 + (ageone+agetwo)*2\n\n                            while (isCalculation(cleaned_sourcedata[i]))\n\n\n\n                            {\n\n\n                                element = element + cleaned_sourcedata[i];\n\n\n                                i++;\n\n                            }\n\n\n\n\n                        }\n\n\n                        //PushCalculation(element,tokens)\n\n\n\n\n                        //  \n                        terms = element.split('')\n\n                        //removing the \"(\"\" and \")\"\n\n                        var CleanedElement = RemoveBrackets(element)\n\n\n                        // to stop prevention of expressions like is\"+ getting added as a calculation\n                        if (!(CleanedElement.includes('\"')) && element.charAt(0) != '/' && element.charAt(0) != '*' && element.charAt(0) != \"'\") {\n\n                            PushCalculation(element, tokens, cleaned_sourcedata, i)\n\n\n\n                        }\n\n                    }\n\n                    //finding operations like print(\"swanand\"). The realtimeprint operations\n                    else if (isRealTimePrintMultipleString(element) == true) {\n\n\n\n                        //\n                        let foundString = ''\n\n                        let k = i\n                        //  console.log('element: ', element);\n                        let conditionEnd = element.charAt(element.length - 1) + element.charAt(element.length - 2)\n\n                        //console.log('conditionEnd: ', conditionEnd);\n\n\n                        var flag = 0;\n\n\n\n\n                        for (k; k < cleaned_sourcedata.length; k++) {\n\n                            let element = cleaned_sourcedata[k]\n                            let conditionEnd = element.charAt(element.length - 1) + element.charAt(element.length - 2)\n\n\n                            if (element.includes('दुहराओ') || element.includes('रचना') || element.includes('अन्यथा') || element.includes('इनपुट') || element.includes('पुश') || element.includes('प्रिंट') || element.includes('अगर') || cleaned_sourcedata[k + 1] == '=' || element == '}') {\n\n\n                                //foundString=foundString+  ' '+ cleaned_sourcedata[k]\n\n                                //\n                                break;\n\n\n                            }\n\n                            if (conditionEnd == ')\"')\n\n                            {\n\n                                foundString = foundString + ' ' + cleaned_sourcedata[k];\n                                break;\n\n                            } else if (flag == 1) {\n\n                                foundString = foundString + ' ' + cleaned_sourcedata[k]\n\n                            } else if (flag == 0) {\n\n                                foundString = cleaned_sourcedata[k];\n\n                                flag = 1;\n\n                            }\n\n\n\n\n                        }\n\n\n\n                        if ((!foundString.includes(\">\")) && (!foundString.includes('/')) && (!foundString.includes('*')) && (!foundString.includes('<')) && (!foundString.includes('==')))\n\n\n                        {\n\n                            //console.log('foundString: ', foundString);\n                            PushRealTimePrintOperation(foundString, tokens)\n\n                        }\n\n\n\n\n                    }\n\n\n\n\n                    //storing only the string values to tokens ( not the strings in print statements)\n                    else if (isString(element))\n                    \n\n\n                    {\n\n\nconsole.log('element: ', element);\n\n                        let calculatedString = BuildString(element, i, cleaned_sourcedata)\n                        console.log('calculatedString: ', calculatedString);\n\n\n\n                        calculatedString = calculatedString.replace(/['\"]+/g, '')\n\n                        if (!(calculatedString.includes(\"प्रिंट\")))\n\n                            PushString(calculatedString, tokens)\n\n                        \n\n\n\n                    }\n\n\n\n\n                    //Found Solution using regexp- print(a) without space is getting accepted as expression\n                    else if (/^(?=.*?प्रिंट)(?=.*[a-z])/.test(element)) {\n\n                        PushKeyword(element.slice(0, 6), tokens); //Pushing print keyword only\n\n\n                        PushExpression(element.slice(6), tokens) //Pushing remaining expression like (a), (gagaks) etc\n                    }\n\n\n                    //error prone change made here- Pushing expression in here\n                    else if (isExpression(element) == true && !isCalculation(element) && !element.includes('[') && !element.includes(']') && (!isConditionalKeyword(cleaned_sourcedata[i - 1])) && (cleaned_sourcedata[i - 1] != 'मे' && cleaned_sourcedata[i - 1] != 'रचना')) {\n\n\n\n                       \n\n                            let CheckFunctionExpression = element.split('(')\n                            \n\n\n                            let passedValues = RemoveBrackets(CheckFunctionExpression[1])\n                            passedValues = passedValues.split(',')\n                            let token = tokens.find(el => el.value == CheckFunctionExpression[0])\n\n                            if(token!=undefined)\n                            {\n\n\n\n\n\n\n                           \n\n\nPushFunctionExecution(element,tokens,cleaned_sourcedata,i,passedValues)\n\n                            }\n\n\n                        \n\n                        else{\n\n                        PushExpression(element,tokens)\n                        }\n\n\n\n\n\n                    } \n                    \n                    else if (isExpression(element) == true && element.includes('[') && element.includes(']')) {\n\n                        PushArray(element, tokens)\n\n                    } \n                    \n                    else if (!isKeyword(element) && !isNumber(element) && !isVariable(element) && !isExpression(element) && !isOperator(element))\n                {\n\n\n                        //ANCHOR \n                        /*Hnadling Impurity error-The main problem is figuring out how to solve \"=7000\" like things\n                    instead asking developers to add space manually\n                    Handling Alphanumeric strings to solve issues like ' anna=2362934'\n\n                    let impurity = element.split('=')\n\n                    let findString = impurity[1]\n\n\n                    //to accept long numbers i.e a=749374593745937\n\n                    if (isVariable(impurity[0]) && isNumber(impurity[1])) {\n\n\n                        impurity[2] = impurity[1];\n                        impurity[1] = '=';\n\n                    }\n\n                    //to accept a=STRING\n                    if (isVariable(impurity[0]) && isVariable(impurity[1])) {\n\n\n                        impurity[2] = impurity[1];\n                        impurity[1] = '=';\n\n                    }\n\n\n\n                    impurity.forEach((element, i) => {\n\n                        if (isVariable(element) == true) {\n\n\n\n                            PushVariable(element, tokens)\n\n\n                            //continue;\n                        }\n\n                        // ANCHOR \n\n                        //Issue: Right now, only isNumber is resolved, a=, =23828qw aren't resolved.\n                        //Solution: Work on all the modules\n\n\n                        if (isNumber(element) == true) {\n\n\n                            PushNumber(element, tokens)\n\n                        }\n\n                        //ANCHOR \n                        //You might have to remove this extra filters since you are only working on numbers (Future Issue)\n                        if (isOperator(element) == true) {\n                            PushOperator(element, token)\n\n                        }\n\n\n\n                        if (isKeyword(element) == true) {\n\n                            PushKeyword(element)\n\n                        }\n\n                        if (isExpression(element) == true) {\n\n\n                            PushExpression(element, tokens)\n\n                        }\n\n\n\n\n                    })\n */\n\n                    }\n\n\n\n\n                }\n\n\n\n\n\n\n\n\n\n\n\n\n\n                //SECTION - Checking each token and adding to tokens array\n                // PARSING INITIATION\n\n\n                for (i; i < cleaned_sourcedata.length; i++) {\n\n\n                    Parse(cleaned_sourcedata, i)\n                }\n\n                //ANCHOR \n                //CLEANING UP THE TOKENS ARRAY\n                //Removing tokens with value = '', It was generated due to \" cleaned_sourcedata = cleaned_sourcedata.replace(/(;|\\n|\\r)/gm, \" \").split(' ')\"\n                tokens = tokens.filter(el => el.value != '')\n                console.log('tokens: ', tokens);\n\n\n\n\n               \n\n\n                //SECTION - Printing Outputs, considering conditions, finding values in updated_tokens\n\n\n\n\n                for (var j = 0; j < tokens.length; j++) {\n\n                    // Checking for assignment operators\n\n\n                    let mutable_tokens = tokens\n                    var token = mutable_tokens[j].value\n                    let tokenType = mutable_tokens[j].type\n\n\n\n                    var StringVar = []\n\n                    let VarWithoutbrackets = RemoveBrackets(mutable_tokens[j].value)\n\n                    VarWithoutbrackets = VarWithoutbrackets.replace(/ /g, '')\n\n\n                    if (mutable_tokens[j].type == \"SetArrayIndexValue\")\n\n\n\n                    {\n\n                       \n                       SetArrayIndexValue(mutable_tokens,j,j,updated_tokens,tokens,OriginalIterator,iterator)\n\n\n\n                       } else if (mutable_tokens[j].value == '=') {\n                           \n\n                      \n                      \n                      \n     AssignorUpdateValues(mutable_tokens, j, updated_tokens, iterator, OriginalIterator,this)\n\n                      \n                  \n\n\n                    } \n                    else if(tokenType=='PushToArray' )\n                    {\n\ntoken=token.replace('पुश','')\nlet Split=token.split('.')\nlet ArrayName=Split[0]\n\nlet Element=RemoveBrackets(Split[1])\nconsole.log('Element: ', Element);\n\nlet ArrayToken=updated_tokens.find(el=>el.name==ArrayName)\nconsole.log('ArrayToken: ', ArrayToken);\n\nlet ElementtoPush=updated_tokens.find(el=>el.name==Element)\n\nconsole.log('ElementtoPush: ', ElementtoPush);\n\nif(ElementtoPush==undefined)\n{\n Element = Element.replace(/\"/g, \"\");\n                                Element = Element.replace(/'/g, \"\");\n                                \n\nElementtoPush=Element\n\n\n}\nelse{\n\n\n    ElementtoPush=ElementtoPush.value\n}\nlet ElementIndex=updated_tokens.indexOf(ArrayToken)\nconsole.log('ElementIndex: ', ElementIndex);\n\n\nlet ArrayValue=updated_tokens.find(el=>el.name==ArrayName).value\n\n\n\n\nif(ArrayValue=='[]')\n{\n\nArrayValue= ArrayValue.split(',')\n\n\n}\n\nconsole.log('ArrayValue: ', ArrayValue);\nArrayValue.push(ElementtoPush)\nArrayValue=ArrayValue.filter(el=> el!='[]') \nconsole.log('ArrayValue: ', ArrayValue);\n\nupdated_tokens[ElementIndex].value=ArrayValue\nconsole.log('updated_tokens: ', updated_tokens);\n\n\n                    }\n                    \n                    else if(token=='अन्यथा')\n                    \n                    {\n\n\n                let result = HandleBlocks(mutable_tokens, j, result)\nlet StartofBlock= mutable_tokens[j+1].startIndex\nlet EndofBlock= mutable_tokens[j+1].EndIndex\n\n//let DoesAnyTrueConditionExists= this.LastConditionValue.find(el=>el==true)\n\nlet lastValue=this.LastConditionValue.pop()\n\n\n\n\nif(lastValue==true)\n\n\n{\n\n\nj=EndofBlock\n\n\n}\n\n\n\n\n\n                    }\n                    \n                    else if (tokenType == 'AcceptInput') {\n\n                        let SetInputValueAs = mutable_tokens[j].AcceptAs\n\n\n\n\n                        var value=prompt('Enter Value for ' + SetInputValueAs)\n\n\n                                       updated_tokens.push({\n                                    name: SetInputValueAs,\n\n                                    value: value,\n\n                                    \n                                })\n\n\n\n                       \n\n\n\n\n                    }\n\n                    else if (tokenType == 'function') {\n\n\n\n                            let functionSourceData = []\n\n                            let result = HandleBlocks(mutable_tokens, j+1, functionSourceData)\n\n                            functionSourceData = result.StoreResult\n\n                            functionSourceData.forEach(el=>{\n\n                                el.context='function'\n                            })\n\n                            mutable_tokens[j].SourceData=functionSourceData\n\n\n                    }\n\n                    \n                    \n                    \n                    else if (tokenType == 'functionExecution') {\n\n                        //checking if function is invoked somewhere later in the program\n\n\n\n                       \n                            let functionSourceData = []\n                             \n                            let functionName = mutable_tokens[j].value\n\n                            let passedValues = mutable_tokens[j].passedValues\n                            \n\n                            let functionToken=mutable_tokens.find(el=>el.value==functionName)\n                            let functionArguments = functionToken.arguments\n                            \n\n\n                            \n\n                            functionSourceData = functionToken.SourceData\n\n                           \n\n\n\n                            //Creating a seperate execution context and setting fucntion context name:value pair in 'functionContextupdated_tokens'\n                            functionArguments.forEach((el, index) => {\n\n\n\n\n                                let val = passedValues[index]\n\n\n\n                                val = val.replace(/\"/g, \"\");\n                                val = val.replace(/'/g, \"\");\n                                \n                               \n\n                                passedValues[index] = val\n                                \n\n                                \n                               \n                                //in this code we are filtering out arguments passed based on whether they already exist in updated tokens or not\n\n                                let FindInUpdatedTokens= updated_tokens.find(el=>el.name==val)\n                                \n                                \n\n//For passing same argument and same value to function  e.g function foo (fibonacci) and fibonacci=[] is already declared\n                                if(FindInUpdatedTokens==undefined)\n                                {\n\nfunctionContextupdated_tokens.push({\n\n\n\n\n                                    name: el,\n\n                                    value: val,\n\n                                    identifier: j + index,\n                                    type: 'value',\n                                    context: 'FunctionExecutionContext'\n\n\n\n\n                                })\n\n\n                                }\n\n                                //For passing different argument and value to function  e.g function foo (arr) and arr doesn't exist anywhere in tokens.\n\n\n                                else if(el!=FindInUpdatedTokens.name && FindInUpdatedTokens!=undefined) {\n\n\n                                    functionContextupdated_tokens.push({\n\n\n\n\n                                    name: el,\n\n                                    value: FindInUpdatedTokens.value,\n\n                                    identifier: j + index,\n                                    type: FindInUpdatedTokens.type,\n                                    context: 'FunctionExecutionContext',\n                                    IntheEndSetValueto:val\n\n\n\n\n                                })\n\n\n\n                                }\n\n                                else{\n\n\nfunctionContextupdated_tokens.push({\n\n\n\n\n                                    name: el,\n\n                                    value: val,\n\n                                    identifier: j + index,\n                                    type: FindInUpdatedTokens.type,\n                                    context: 'FunctionExecutionContext',\n                                    IntheEndSetValueto:val\n\n\n\n\n                                })\n\n\n\n\n                                }\n\n\n                                \n                                \n\n                             \n\n\n\n\n                            });\n\n                            var CompleteTokenValueList = [...updated_tokens, ...functionContextupdated_tokens]\n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n\n\n                            for (let i = 1; i < functionSourceData.length; i++)\n\n                            {\n\n\n                                let el = functionSourceData[i]\n\n\n\n\n                                if (el.value == 'प्रिंट')\n                                \n\n                                {\n\n                                   \n                                console.log('functionSourceData,CompleteTokenValueList, j+i,: ', functionSourceData,CompleteTokenValueList, j+i,);\n\n                                 IfTokenPrint(functionSourceData,CompleteTokenValueList, i, this)\n                                 \n                                    \n\n                                  \n\n                                    \n\n\n                                \n                                } \n                                else if (el.value == '=') {\n                                    \n\n                      \n                      \n                      \n     AssignorUpdateValues(functionSourceData, i, CompleteTokenValueList, iterator, OriginalIterator,this)\n\n                      \n                  \n\n\n                    }\n                                 else if (el.type == 'AcceptInput') {\n\n                        let SetInputValueAs =functionSourceData[i].AcceptAs\n\n\n\n\n                        var value=prompt('Enter Value for' + SetInputValueAs)\n\n\n\n                                       updated_tokens.push({\n                                    name: SetInputValueAs,\n\n                                    value: value,\n\n                                    \n                                })\n\n\n\n                       \n\n\n\n\n                    } else if (el.type == 'condition')\n\n                                {\n\n\n\n\n                                    let element = functionSourceData[i].value\n\n                                    //this function is the first step to calculate value of operations like अगर (ageone==10 && AverageAge<1000 && agetwo>100 || ageone==10) OR (ageone==10 )\n\n                                    let ConditionValue = GetConditionValue(element, CompleteTokenValueList, i)\n                                    this.LastConditionValue.push(ConditionValue)\n                                    //  console.log('j: ',j);\n\n\n\n\n                                    //if value is false, just skip the if loop context, if not it will be ran in final print module\n\n                                    if (ConditionValue == false) {\n\n                                        let InitializeLoop = tokens.indexOf(functionSourceData[i])\n\n                                        //Handle Blocks is a function which takes care of nested block by taking care of nested { and } brackets\n                                        //it uses the stack to push and pop brackets to accurately identify start and the end of the block\n                                        let Returnvalue = HandleBlocks(functionSourceData, i)\n\n                                        i = Returnvalue.i\n                                    }\n\n\n\n\n                                }\n\n\n\n\n                                //Handling set array element statements in for loop\n                                else if (functionSourceData[i].type == \"SetArrayIndexValue\")\n\n\n\n\n                                {\n\n                                    SetArrayIndexValue(functionSourceData,i,j,CompleteTokenValueList,tokens,OriginalIterator,iterator)\n\n\n\n\n                                } else if (functionSourceData[i].type == 'ForLoopStart')\n\n\n\n                                {\n\n                                    var FlagPrimalLoop = 0\n\n                                    var SourcedataTokens = []\n\n\n                                    //console.log('updated_tokens: ', updated_tokens);\n\n                                    let ForLoopMetaData = ForLoopSetMetadata(functionSourceData, i, CompleteTokenValueList)\n\n\n                                    var ForLoopSourcedataIndexStart = ForLoopMetaData.ForLoopSourcedataIndexStart\n                                    var Cycle = ForLoopMetaData.Cycle\n                                    var OriginalIterator = ForLoopMetaData.OriginalIterator\n                                    var IterationStart = ForLoopMetaData.IterationStart\n                                    var iterator = ForLoopMetaData.iterator\n                                    var element = ForLoopMetaData.element\n                                    var elementValue = ForLoopMetaData.elementValue\n\n                                    function getSourcedata(startIndex, functionSourceData, check, StoreResult) {\n                                        //console.log('startIndex, functionSourceData, check, StoreResult: ', startIndex, functionSourceData, check, StoreResult);\n\n\n\n                                        let Returnvalue = HandleBlocks(functionSourceData, startIndex, StoreResult)\n                                        StoreResult = Returnvalue.StoreResult\n\n\n                                        return StoreResult\n\n\n                                    }\n\n\n\n\n                                    ForLoopSourcedataIndexStart = getLoopIndexStart(functionSourceData, i, '{', ForLoopSourcedataIndexStart)\n\n                                    //\n\n                                    SourcedataTokens = getSourcedata(ForLoopSourcedataIndexStart, functionSourceData, '}', SourcedataTokens)\n                                    \n                                    \n\n\n\n                                    SourcedataTokens.forEach(el => {\n\n                                        el.isNestedLoop = false\n\n                                    })\n\n\n                                    let FindNestedLoop = SourcedataTokens.find(el => el.type == 'ForLoopStart')\n                                    if (FindNestedLoop != undefined) {\n\n                                        let NestedLoopindex = SourcedataTokens.indexOf(FindNestedLoop) + 2\n                                        let NestedLooplength = (SourcedataTokens[NestedLoopindex].EndIndex - SourcedataTokens[NestedLoopindex].startIndex) + 1\n\n\n                                        for (let x = NestedLoopindex; x < NestedLoopindex + NestedLooplength; x++) {\n\n\n                                            SourcedataTokens[x].isNestedLoop = true\n\n                                        }\n\n\n                                    }\n\n\n\n\n                                    if (element.includes('(') && element.includes(','))\n\n\n                                    {\n\n                                        FlagPrimalLoop = 1\n\n\n                                    }\n\n\n\n\n                                    // console.log('Cycle: ', Cycle,IterationStart);\n\n\n                                    //Iterating over forloop sourcedata\n                                    //this line 'iterator <= Cycle' determines start of the loop and the duration of the loop\n\n                                    for (iterator = IterationStart; iterator <= Cycle; iterator++) {\n\n\n\n                                        let forloopindex = CompleteTokenValueList.find(el => el.name == OriginalIterator)\n\n\n\n\n                                        forloopindex.value = iterator\n\n                                        //console.log('CompleteTokenValueList: ', CompleteTokenValueList);\n\n                                        //flag to avoid running this code if loop is primal because the payload needs to be compeltely different\n                                        if (FlagPrimalLoop = 0) {\n                                            ForLoopArrayorStringOutput(elementValue, iterator, CompleteTokenValueList, this)\n\n                                        }\n\n\n                                        for (let i = 0; i < SourcedataTokens.length; i++)\n\n\n                                        {\n\n\n                                            let isNested = SourcedataTokens[i].isNestedLoop\n\n\n\n\n                                            if (SourcedataTokens[i].type == 'ForLoopStart') {\n                                                \n\n                                                var NestedFlagPrimalLoop = 0\n\n                                                var NestedSourcedataTokens = []\n\n                                                let NestedForLoopMetaData = ForLoopSetMetadata(SourcedataTokens, i, CompleteTokenValueList)\n\n                                                //  console.log('NestedForLoopMetaData: ', NestedForLoopMetaData);\n\n                                                var NestedForLoopSourcedataIndexStart = NestedForLoopMetaData.ForLoopSourcedataIndexStart\n                                                var NestedCycle = NestedForLoopMetaData.Cycle + 1\n                                                var NestedOriginalIterator = NestedForLoopMetaData.OriginalIterator\n                                                var NestedIterationStart = NestedForLoopMetaData.IterationStart\n                                                var Nestediterator = NestedForLoopMetaData.IterationStart\n                                                \n                                                var Nestedelement = NestedForLoopMetaData.element\n                                                var NestedelementValue = NestedForLoopMetaData.elementValue\n\n\n                                                function getSourcedata(startIndex, SourcedataTokens, check, StoreResult) {\n                                                    //console.log('startIndex, SourcedataTokens, check, StoreResult: ', startIndex, SourcedataTokens, check, StoreResult);\n\n\n\n                                                    let Returnvalue = HandleBlocks(SourcedataTokens, startIndex, StoreResult)\n                                                    StoreResult = Returnvalue.StoreResult\n\n\n                                                    return StoreResult\n\n\n                                                }\n\n\n\n\n                                                NestedForLoopSourcedataIndexStart = getLoopIndexStart(SourcedataTokens, i, '{', NestedForLoopSourcedataIndexStart)\n\n\n\n                                                NestedSourcedataTokens = getSourcedata(NestedForLoopSourcedataIndexStart, SourcedataTokens, '}', NestedSourcedataTokens)\n                                                //console.log('NestedSourcedataTokens: ', NestedSourcedataTokens);\n\n\n\n\n                                                for (Nestediterator; Nestediterator < NestedCycle; Nestediterator++) {\n                                                    {\n\n                                                        let y = Nestediterator\n\n\n                                                        let Nestedforloopindex = CompleteTokenValueList.find(el => el.name == NestedOriginalIterator)\n                                                        //console.log('forloopindex: ', forloopindex);\n\n\n\n                                                        Nestedforloopindex.value = y\n\n\n                                                        for (let index = 0; index < NestedSourcedataTokens.length; index++) {\n\n\n                                                            let el = NestedSourcedataTokens[index]\n\n                                                            if (el.value == 'प्रिंट')\n\n                                                            {\n\n\n\n                                                                IfTokenPrint(NestedSourcedataTokens, CompleteTokenValueList, index, this, y, NestedOriginalIterator)\n\n\n                                                            } else if (el.value == '=' && el.isNestedLoop == true) {\n\n\n                                                                //assigning values to variables\n\n\n                                                                AssignorUpdateValues(NestedSourcedataTokens, index, CompleteTokenValueList, y, NestedOriginalIterator,this)\n\n                                                            } else if (el.type == 'condition' && el.isNestedLoop == true)\n\n\n\n                                                            {\n\n\n\n\n                                                                //console.log('SourcedataTokens[i]: ', SourcedataTokens[i],i);\n\n                                                                let ConditionStartIndex = index\n                                                                let condition = NestedSourcedataTokens[index].value\n                                                                //HandleConditions evaluates condition and return the index of from where printing should resume\n                                                                //value of i depends on the conditions\n\n                                                                if (condition.includes('||') || condition.includes('&&'))\n\n                                                                {\n\n\n                                                                    let value = GetConditionValue(condition, CompleteTokenValueList, index)\n                                                                this.LastConditionValue.push(value)\n\n\n\n\n                                                                    if (value == false) {\n\n\n\n                                                                        let BlockLength = 0\n                                                                        let BlockStart = 0\n\n                                                                        while (NestedSourcedataTokens[index].value != '{')\n\n                                                                        {\n\n                                                                            if (NestedSourcedataTokens[index + 1].value == '{')\n\n                                                                            {\n\n\n                                                                                BlockLength = NestedSourcedataTokens[index + 1].EndIndex - NestedSourcedataTokens[index + 1].startIndex\n\n                                                                                index = BlockLength + index + 1\n\n\n\n\n                                                                                break;\n\n                                                                            }\n\n\n\n                                                                            index++\n                                                                        }\n\n                                                                    } else {\n\n\n                                                                        index = index\n\n\n                                                                    }\n\n\n\n\n                                                                } else {\n\n\n                                                                    let x = HandleConditions(NestedSourcedataTokens, index, CompleteTokenValueList);\n\n\n\n\n                                                                    if (x != undefined) {\n\n\n                                                                        index = x\n\n\n\n                                                                    } else {\n                                                                        index = ConditionStartIndex\n                                                                        //console.log('i: ', i);\n                                                                    }\n\n                                                                }\n\n\n\n\n\n                                                            }\n\n\n\n                                                            //console.log('i: ', i);\n\n                                                            // i = i + NestedSourcedataTokens.length\n                                                            //console.log('i: ', i);\n                                                            else if (el.type == \"SetArrayIndexValue\" && el.isNestedLoop == true)\n\n\n\n\n                                                            {\n                                                                        SetArrayIndexValue(NestedSourcedataTokens,i,j,CompleteTokenValueList,tokens,OriginalIterator,iterator)\n\n\n                                                            }\n\n\n\n\n                                                        }\n\n\n\n\n                                                    }\n\n\n\n\n                                                }\n\n\n\n\n                                            } \n\n                                             else if (SourcedataTokens[i].type== 'AcceptInput' && isNested == false) {\n\n                                       let SetInputValueAs =SourcedataTokens[i].type.AcceptAs\n\n\n\n\n                                        var value=prompt('Enter Value for' + SetInputValueAs)\n                                    console.log('value: ', value);\n\n\n                                       updated_tokens.push({\n                                    name: SetInputValueAs,\n\n                                    value: value,\n\n                                    \n                                })\n\n\n\n                       \n\n\n\n\n                    }\n                                            \n                                            else if (SourcedataTokens[i].value == '=' && isNested == false) {\n\n                                                //assigning values to variables\n\n\n                                                AssignorUpdateValues(SourcedataTokens, i, CompleteTokenValueList, iterator, OriginalIterator,this)\n\n\n\n\n                                            }\n\n\n\n\n                                            //Handling print statements in for loop\n                                            else if (SourcedataTokens[i].value == 'प्रिंट' && isNested == false)\n\n\n\n\n                                            {\n\n\n                                                //for operations like print(array[3])\n\n                                                // console.log('for looop prints: ', functionSourceData[i],i);\n\n\n                                                IfTokenPrint(SourcedataTokens, CompleteTokenValueList, i, this, iterator, OriginalIterator)\n\n                                                //\n\n\n                                            }\n\n\n\n                                            //Handling set array element statements in for loop\n                                            else if (SourcedataTokens[i].type == \"SetArrayIndexValue\")\n\n\n\n\n                                            {\n\n\n\n                                                    SetArrayIndexValue(SourcedataTokens,i,j,CompleteTokenValueList,tokens,OriginalIterator,iterator)\n\n                                            }\n\n\n\n                                            // Handling CONDITIONAL statements in for loop\n                                            else if (SourcedataTokens[i].type == 'condition')\n\n\n\n                                            {\n\n\n\n\n                                                //console.log('SourcedataTokens[i]: ', SourcedataTokens[i],i);\n\n                                                let ConditionStartIndex = i\n                                                let condition = SourcedataTokens[i].value\n                                                //HandleConditions evaluates condition and return the index of from where printing should resume\n                                                //value of i depends on the conditions\n\n                                                if (condition.includes('||') || condition.includes('&&'))\n\n                                                {\n\n\n                                                    let value = GetConditionValue(condition, updated_tokens, i)\n                                                                this.LastConditionValue.push(value)\n\n\n\n\n                                                    if (value == false) {\n\n\n\n                                                        let BlockLength = 0\n                                                        let BlockStart = 0\n\n                                                        while (SourcedataTokens[i].value != '{')\n\n                                                        {\n\n                                                            if (SourcedataTokens[i + 1].value == '{')\n\n                                                            {\n\n\n                                                                BlockLength = SourcedataTokens[i + 1].EndIndex - SourcedataTokens[i + 1].startIndex\n\n                                                                i = BlockLength + i + 1\n\n\n\n\n                                                                break;\n\n                                                            }\n\n\n\n                                                            i++\n                                                        }\n\n                                                    } else {\n\n\n                                                        i = i\n\n\n                                                    }\n\n\n\n\n                                                } else {\n\n\n                                                    i = HandleConditions(SourcedataTokens, i, CompleteTokenValueList);\n\n\n\n                                                    if (i != undefined) {\n\n\n                                                        i = i\n\n\n                                                    } else {\n                                                        i = ConditionStartIndex\n                                                        //console.log('i: ', i);\n                                                    }\n\n                                                }\n\n\n\n\n                                            }\n\n\n                                        }\n\n\n\n                                    }\n                                    //console.log('j: ', j);\n\n                                    i = i + SourcedataTokens.length\n                                    //console.log('j: ', j);\n\n\n                                } else if (functionSourceData[i].type == \"SetArrayIndexValue\")\n\n\n\n\n                                {\n\n\n\nSetArrayIndexValue(SourcedataTokens,i,j,CompleteTokenValueList,tokens,OriginalIterator,iterator)\n\n\n\n                                } else if (functionSourceData[i].type == 'WhileLoopStart') {\n\n\n                                    let TokensCurrentIndex = i + 3\n\n\n\n                                    let ConditionValue = false\n\n                                    let element = functionSourceData[i + 1].value\n\n                                    let ExtratcedVariable = []\n\n                                    let variable = ''\n                                    let WhileLoopSourcedataIndexStart = 0\n                                    let WhileLoopSourcedataTokens = []\n\n\n\n                                    for (let i = 0; i < element.length; i++) {\n                                        let x = element.charAt(i)\n\n\n                                        if (isVariable(x))\n\n                                        {\n\n                                            variable = variable + x\n\n\n\n                                        }\n                                        if (!isVariable(element.charAt(i + 1)) && isVariable(x)) {\n\n                                            let token = CompleteTokenValueList.find(el => el.name == variable)\n\n                                            ExtratcedVariable.push({\n                                                variable: variable,\n                                                value: token.value\n\n                                            })\n\n\n                                            variable = ''\n\n\n                                        }\n\n                                    }\n\n\n\n\n                                    function getWhileLoopSourcedata(startIndex, functionSourceData, check, StoreResult) {\n\n\n\n                                        StoreResult = HandleBlocks(functionSourceData, startIndex, StoreResult)\n\n\n\n                                        return StoreResult\n\n\n\n\n                                    }\n\n\n\n\n                                    WhileLoopSourcedataIndexStart = getLoopIndexStart(functionSourceData, i, '{', WhileLoopSourcedataIndexStart)\n                                    //\n                                    WhileLoopSourcedataTokens = getWhileLoopSourcedata(WhileLoopSourcedataIndexStart, functionSourceData, '}', WhileLoopSourcedataTokens).StoreResult\n\n\n\n\n                                    //constantly accessing the conditionvalue\n\n                                    while (GetConditionValue(element, CompleteTokenValueList, j + 1)) {\n\n                                        for (let i = 0; i < WhileLoopSourcedataTokens.length; i++) {\n\n\n\n\n                                            //SECTION while loop context\n\n                                            if (WhileLoopSourcedataTokens[i].value == '=') {\n\n\n\n\n                                                AssignorUpdateValues(WhileLoopSourcedataTokens, i, CompleteTokenValueList)\n\n                                                //\n\n                                                // \n\n\n                                            }\n\n                                               else if (WhileLoopSourcedataTokens[i].type== 'AcceptInput' ) {\n\n                        let SetInputValueAs =WhileLoopSourcedataTokens[i].type.AcceptAs\n\n\n\n\n                        var value=prompt('Enter Value for' + SetInputValueAs)\n                                    console.log('value: ', value);\n\n\n                                       updated_tokens.push({\n                                    name: SetInputValueAs,\n\n                                    value: value,\n\n                                    \n                                })\n\n\n\n                       \n\n\n\n\n                    }\n\n\n\n                                            // Handling CONDITIONAL statements in for loop\n                                            else if (WhileLoopSourcedataTokens[i].type == 'condition')\n\n                                            {\n\n\n\n\n                                                let index = HandleConditions(WhileLoopSourcedataTokens, i, CompleteTokenValueList)\n\n                                                if (index != undefined) {\n                                                    i = index\n\n\n                                                } else {\n                                                    i = i\n                                                }\n\n\n\n\n                                            } else if (WhileLoopSourcedataTokens[i].value == 'प्रिंट')\n\n\n\n\n                                            {\n\n\n                                                IfTokenPrint(WhileLoopSourcedataTokens, CompleteTokenValueList, i, this) //for operations like print(array[3])\n\n\n\n\n                                            } else if (WhileLoopSourcedataTokens[i].type == \"SetArrayIndexValue\")\n\n\n\n\n                                            {\n\n SetArrayIndexValue(WhileLoopSourcedataTokens,i,j,CompleteTokenValueList,tokens,OriginalIterator,iterator)\n\n\n\n\n                                            }\n\n\n\n                                        }\n\n\n                                    }\n\n                                    i = i + 1 + WhileLoopSourcedataTokens.length + 1\n                                  \n\n                                }\n\n\n\n\n                            }\n\n\n\n\n                        \n\n\n                        //skipping parsing index so that function context is run by single entity and global execution doesn't run this code too\n                      //  j = mutable_tokens[j + 1].EndIndex\n\n\n//If we pass function foo(arr) where arr is (suppose) fibonacci=[] declared in the global exe context(updated_tokens). But operation will be performed on\n//arr in functionContextupdated_tokens. so at the end of fucntion execution we set the value to it's right owner.\n                        let token=functionContextupdated_tokens.find(el=>el.IntheEndSetValueto!='')\n                        let GivePowersTo= updated_tokens.find(el=>el.name==token.IntheEndSetValueto)\n                        \n                        GivePowersTo.value=token.value\n\n//I have to empty it because function context has to remain empty other wise function arguments will keep on accepting new values with the same key\n//for e.g= PrintFullName(FirstName,LastName) and PrintFullName(FirstNam,LastNam) needs two different execution context hence first one needs to make space for later\n\n                        functionContextupdated_tokens=[]\n\n\n\n                    } else if (tokenType == 'condition')\n\n                    {\n\n\n\n\n                        let element = mutable_tokens[j].value\n\n                        //this function is the first step to calculate value of operations like अगर (ageone==10 && AverageAge<1000 && agetwo>100 || ageone==10) OR (ageone==10 )\n\n                        let ConditionValue = GetConditionValue(element, updated_tokens, j)\n                         this.LastConditionValue.push(ConditionValue)\n\n                        // console.log('ConditionValue: ', ConditionValue);\n                        //  console.log('j: ',j);\n\n\n\n\n                        //if value is false, just skip the if loop context, if not it will be ran in final print module\n\n                        if (ConditionValue == false) {\n\n                            let InitializeLoop = tokens.indexOf(mutable_tokens[j])\n\n                            //Handle Blocks is a function which takes care of nested block by taking care of nested { and } brackets\n                            //it uses the stack to push and pop brackets to accurately identify start and the end of the block\n                            let Returnvalue = HandleBlocks(mutable_tokens, j)\n\n                            j = Returnvalue.j\n                        }\n\n\n\n\n                    } else if (token == 'प्रिंट' && mutable_tokens[j].context!='function')\n                    \n\n\n                    {\n\n\n\n                        IfTokenPrint(mutable_tokens, updated_tokens, j, this) //for operations like print(array[3])\n\n\n\n                    } else if (tokenType == 'WhileLoopStart') {\n\n\n                        let TokensCurrentIndex = j + 3\n\n                        let ConditionValue = false\n\n                        let element = mutable_tokens[j + 1].value\n\n                        let ExtratcedVariable = []\n\n                        let variable = ''\n                        let WhileLoopSourcedataIndexStart = 0\n                        let WhileLoopSourcedataTokens = []\n\n\n\n                        for (let i = 0; i < element.length; i++) {\n                            let x = element.charAt(i)\n\n\n                            if (isVariable(x))\n\n                            {\n\n                                variable = variable + x\n\n\n\n                            }\n                            if (!isVariable(element.charAt(i + 1)) && isVariable(x)) {\n\n                                let token = updated_tokens.find(el => el.name == variable)\n\n                                ExtratcedVariable.push({\n                                    variable: variable,\n                                    value: token.value\n\n                                })\n\n\n                                variable = ''\n\n\n                            }\n\n                        }\n\n\n\n\n                        function getWhileLoopSourcedata(startIndex, mutable_tokens, check, StoreResult) {\n\n\n\n                            StoreResult = HandleBlocks(mutable_tokens, startIndex, StoreResult)\n\n\n\n                            return StoreResult\n\n\n\n\n                        }\n\n\n\n\n                        WhileLoopSourcedataIndexStart = getLoopIndexStart(mutable_tokens, j, '{', WhileLoopSourcedataIndexStart)\n                        //\n                        WhileLoopSourcedataTokens = getWhileLoopSourcedata(WhileLoopSourcedataIndexStart, mutable_tokens, '}', WhileLoopSourcedataTokens).StoreResult\n                        console.log('WhileLoopSourcedataTokens: ', WhileLoopSourcedataTokens);\n\n\n\n\n                        //constantly accessing the conditionvalue\n\n                        while (GetConditionValue(element, updated_tokens, j + 1)) {\n\n                            for (let i = 0; i < WhileLoopSourcedataTokens.length; i++) {\n\n\n\n\n                                //SECTION while loop context\n\n                                if (WhileLoopSourcedataTokens[i].value == '=') {\n\n\n\n\n                                    AssignorUpdateValues(WhileLoopSourcedataTokens, i, updated_tokens)\n\n                                    //\n\n                                    // \n\n\n                                }\n\n                                  else if (WhileLoopSourcedataTokens[i].type== 'AcceptInput' ) {\n\n                        let SetInputValueAs =WhileLoopSourcedataTokens[i].type.AcceptAs\n\n\n\n\n                        var value=prompt('Enter Value for' + SetInputValueAs)\n                                    console.log('value: ', value);\n\n\n                                       updated_tokens.push({\n                                    name: SetInputValueAs,\n\n                                    value: value,\n\n                                    \n                                })\n\n\n\n                       \n\n\n\n\n                    }\n\n\n\n                                // Handling CONDITIONAL statements in for loop\n                                else if (WhileLoopSourcedataTokens[i].type == 'condition')\n\n                                {\n\n\n\n\n                                    let index = HandleConditions(WhileLoopSourcedataTokens, i, updated_tokens)\n                                 \n\n\n                                    if (index != undefined) {\n                                        i = index\n\n\n                                    } else {\n                                        i = i\n                                    }\n\n\n\n\n                                } else if (WhileLoopSourcedataTokens[i].value == 'प्रिंट')\n\n\n\n\n                                {\n\n\n                                    IfTokenPrint(WhileLoopSourcedataTokens, updated_tokens, i, this) //for operations like print(array[3])\n\n\n\n\n                                } else if (WhileLoopSourcedataTokens[i].type == \"SetArrayIndexValue\")\n\n\n\n\n                                {\n\n SetArrayIndexValue(WhileLoopSourcedataTokens,i,j,updated_tokens,tokens,OriginalIterator,iterator)\n\n\n\n\n                                }\n\n\n\n                            }\n\n\n                        }\n                    } else if (tokenType == 'ForLoopStart')\n\n\n\n                    {\n\n                        var FlagPrimalLoop = 0\n\n                        var SourcedataTokens = []\n\n\n                        //console.log('updated_tokens: ', updated_tokens);\n\n                        let ForLoopMetaData = ForLoopSetMetadata(mutable_tokens, j, updated_tokens)\n\n                        console.log('ForLoopMetaData: ', ForLoopMetaData);\n\n                        var ForLoopSourcedataIndexStart = ForLoopMetaData.ForLoopSourcedataIndexStart\n                        var Cycle = ForLoopMetaData.Cycle\n                        \n                        var OriginalIterator = ForLoopMetaData.OriginalIterator\n                        var IterationStart = ForLoopMetaData.IterationStart\n                        var iterator = ForLoopMetaData.iterator\n                        var element = ForLoopMetaData.element\n                        var elementValue = ForLoopMetaData.elementValue\n\n                        function getSourcedata(startIndex, mutable_tokens, check, StoreResult) {\n                            //console.log('startIndex, mutable_tokens, check, StoreResult: ', startIndex, mutable_tokens, check, StoreResult);\n\n\n\n                            let Returnvalue = HandleBlocks(mutable_tokens, startIndex, StoreResult)\n                            StoreResult = Returnvalue.StoreResult\n\n\n                            return StoreResult\n\n\n                        }\n\n\n\n\n                        ForLoopSourcedataIndexStart = getLoopIndexStart(mutable_tokens, j, '{', ForLoopSourcedataIndexStart)\n\n                        //\n\n                        SourcedataTokens = getSourcedata(ForLoopSourcedataIndexStart, mutable_tokens, '}', SourcedataTokens)\n                        //console.log('SourcedataTokens: ', SourcedataTokens);\n\n\n\n                        SourcedataTokens.forEach(el => {\n\n                            el.isNestedLoop = false\n\n                        })\n\n\n                        let FindNestedLoop = SourcedataTokens.find(el => el.type == 'ForLoopStart')\n                        \n                        \n                        if (FindNestedLoop != undefined) {\n\n                            let NestedLoopindex = SourcedataTokens.indexOf(FindNestedLoop) + 3\n                            let NestedLooplength = (SourcedataTokens[NestedLoopindex].EndIndex - SourcedataTokens[NestedLoopindex].startIndex) + 2\n                            \n                            \n\n\n                            for (let x = NestedLoopindex; x < NestedLoopindex + NestedLooplength; x++) {\n\n\n                                SourcedataTokens[x].isNestedLoop = true\n                                \n                                \n\n                            }\n\n\n                        }\n\n\n\n\n                        if (element.includes('(') && element.includes(','))\n\n\n                        {\n\n                            FlagPrimalLoop = 1\n\n\n                        }\n\n\n\n                        // console.log('Cycle: ', Cycle,IterationStart);\n\n\n                        //Iterating over forloop sourcedata\n                        //this line 'iterator <= Cycle' determines start of the loop and the duration of the loop\n\n                        for (iterator = IterationStart; iterator <= Cycle; iterator++) {\n\n\n\n                            let forloopindex = updated_tokens.find(el => el.name == OriginalIterator)\n\n\n\n\n                            forloopindex.value = iterator\n\n                            //console.log('updated_tokens: ', updated_tokens);\n\n                            //flag to avoid running this code if loop is primal because the payload needs to be compeltely different\n                            if (FlagPrimalLoop = 0) {\n                                ForLoopArrayorStringOutput(elementValue, iterator, updated_tokens, this)\n\n                            }\n\n\n                            for (let i = 0; i < SourcedataTokens.length; i++)\n\n\n                            {\n\n\n                                let isNested = SourcedataTokens[i].isNestedLoop\n\n\n                                if (SourcedataTokens[i].type == 'ForLoopStart') {\n                                    \n\n                                    var NestedFlagPrimalLoop = 0\n\n                                    var NestedSourcedataTokens = []\n\n                                    let NestedForLoopMetaData = ForLoopSetMetadata(SourcedataTokens, i, updated_tokens)\n\n                                    //  console.log('NestedForLoopMetaData: ', NestedForLoopMetaData);\n\n                                    var NestedForLoopSourcedataIndexStart = NestedForLoopMetaData.ForLoopSourcedataIndexStart\n                                    var NestedCycle = NestedForLoopMetaData.Cycle + 1\n                                    var NestedOriginalIterator = NestedForLoopMetaData.OriginalIterator\n                                    var NestedIterationStart = NestedForLoopMetaData.IterationStart\n                                    var Nestediterator = NestedForLoopMetaData.IterationStart\n                                    var Nestedelement = NestedForLoopMetaData.element\n                                    var NestedelementValue = NestedForLoopMetaData.elementValue\n\n\n                                    function getSourcedata(startIndex, SourcedataTokens, check, StoreResult) {\n                                        //console.log('startIndex, SourcedataTokens, check, StoreResult: ', startIndex, SourcedataTokens, check, StoreResult);\n\n\n\n                                        let Returnvalue = HandleBlocks(SourcedataTokens, startIndex, StoreResult)\n                                        StoreResult = Returnvalue.StoreResult\n\n\n                                        return StoreResult\n\n\n                                    }\n\n\n\n\n                                    NestedForLoopSourcedataIndexStart = getLoopIndexStart(SourcedataTokens, i, '{', NestedForLoopSourcedataIndexStart)\n                                    //console.log('ForLoopSourcedataIndexStart: ', ForLoopSourcedataIndexStart);\n\n\n\n                                    NestedSourcedataTokens = getSourcedata(NestedForLoopSourcedataIndexStart, SourcedataTokens, '}', NestedSourcedataTokens)\n                                    //console.log('NestedSourcedataTokens: ', NestedSourcedataTokens);\n\n\n\n\n                                    for (Nestediterator; Nestediterator < NestedCycle; Nestediterator++) {\n                                        {\n\n                                            let y = Nestediterator\n\n\n                                            let Nestedforloopindex = updated_tokens.find(el => el.name == NestedOriginalIterator)\n                                            //console.log('forloopindex: ', forloopindex);\n\n\n\n                                            Nestedforloopindex.value = y\n\n\n                                            for (let index = 0; index < NestedSourcedataTokens.length; index++) {\n\n\n                                                let el = NestedSourcedataTokens[index]\n\n                                                if (el.value == 'प्रिंट')\n\n                                                {\n\n\n\n                                                    IfTokenPrint(NestedSourcedataTokens, updated_tokens, index, this, y, NestedOriginalIterator)\n\n\n                                                } else if (el.value == '=' && el.isNestedLoop == true) {\n\n\n                                                    //assigning values to variables\n\n\n                                                    AssignorUpdateValues(NestedSourcedataTokens, index, updated_tokens, y, NestedOriginalIterator)\n\n                                                } else if (el.type == 'condition' && el.isNestedLoop == true)\n\n\n\n                                                {\n\n\n\n\n                                                    //console.log('SourcedataTokens[i]: ', SourcedataTokens[i],i);\n\n                                                    let ConditionStartIndex = index\n                                                    let condition = NestedSourcedataTokens[index].value\n                                                    //HandleConditions evaluates condition and return the index of from where printing should resume\n                                                    //value of i depends on the conditions\n\n                                                   \n\n                                                        let value = GetConditionValue(condition, updated_tokens, index)\n                                                        \n                                                                this.LastConditionValue.push(value)\n\n\n\nif(value==false)\n{\n\n    break\n\n\n\n\n}\n\n\n\n\n\n                                                      /*  if (value == false) {\n\n\n\n                                                            let BlockLength = 0\n                                                            let BlockStart = 0\n\n                                                            while (NestedSourcedataTokens[index].value != '{')\n\n                                                            {\n\n                                                                if (NestedSourcedataTokens[index + 1].value == '{')\n\n                                                                {\n\n\n                                                                    BlockLength = NestedSourcedataTokens[index + 1].EndIndex - NestedSourcedataTokens[index + 1].startIndex\n\n                                                                    index = BlockLength + index + 1\n\n\n\n\n                                                                    break;\n\n                                                                }\n\n\n\n                                                                index++\n                                                            }\n\n                                                        } else if(value==true) {\n\n\nconsole.log(el,NestedSourcedataTokens,index);\n\n                                                        }\n\n\n\n\n*/\n                                                  \n\n\n\n                                                }\n\n\n\n                                               \n\n                                                // i = i + NestedSourcedataTokens.length\n                                                //console.log('i: ', i);\n                                                else if (el.type == \"SetArrayIndexValue\" && el.isNestedLoop == true)\n\n\n\n\n                                                {\n\n                                                    \n\n                                                        SetArrayIndexValue(NestedSourcedataTokens,i,j,updated_tokens,tokens,OriginalIterator,iterator)\n\n\n\n                                                }\n\n\n\n\n                                            }\n\n\n\n\n                                        }\n\n\n\n\n                                    }\n\n\n\n\n                                } else if (SourcedataTokens[i].value == '=' && isNested == false) {\n                                    \n\n                                    //assigning values to variables\n\n\n\n                                    AssignorUpdateValues(SourcedataTokens, i, updated_tokens, iterator, OriginalIterator)\n\n                                }\n\n else if(SourcedataTokens[i].type=='PushToArray')\n \n                    {\n\nlet token=SourcedataTokens[i].value\n\ntoken=token.replace('पुश','')\nlet Split=token.split('.')\nlet Array=Split[0]\nlet ElementtoPush=RemoveBrackets(Split[1])\nElementtoPush=updated_tokens.find(el=>el.name==ElementtoPush).value\n\nlet ArrayEl=updated_tokens.find(el=>el.name==Array)\n\n\nlet ArrayValue=ArrayEl.value\nif(ArrayValue=='[]')\n{\nArrayValue= ArrayValue.split(',')\n}\nArrayValue.push(ElementtoPush)\n\n\nlet index=updated_tokens.indexOf(ArrayEl)\n\nArrayValue=ArrayValue.filter(el=> el!='[]')\n\n\n\n\n\n\n\nupdated_tokens[index].value=ArrayValue\n \n\n\n                    }\n\n\n  else if (SourcedataTokens[i].type== 'AcceptInput' ) {\n\n                        let SetInputValueAs =SourcedataTokens[i].type.AcceptAs\n\n\n\n\n                        var value=prompt('Enter Value for' + SetInputValueAs)\n\n\n                                       updated_tokens.push({\n                                    name: SetInputValueAs,\n\n                                    value: value,\n\n                                    \n                                })\n\n\n\n                       \n\n\n\n\n                    }\n\n\n\n                                //Handling print statements in for loop\n                                else if (SourcedataTokens[i].value == 'प्रिंट' && isNested == false)\n\n\n\n\n                                {\n\n                                    //for operations like print(array[3])\n\n                                    // console.log('for looop prints: ', SourcedataTokens[i],i);\n\n\n                                    IfTokenPrint(SourcedataTokens, updated_tokens, i, this, iterator, OriginalIterator)\n\n                                    //\n\n\n                                }\n\n\n\n                                //Handling set array element statements in for loop\n                                else if (SourcedataTokens[i].type == \"SetArrayIndexValue\")\n\n\n\n\n                                {\n\n                                   SetArrayIndexValue(SourcedataTokens,i,j,updated_tokens,tokens,OriginalIterator,iterator)\n\n\n\n                                }\n\n\n\n                                // Handling CONDITIONAL statements in for loop\n                                else if (SourcedataTokens[i].type == 'condition')\n\n\n\n                                {\n\n\n\n\n                                    //console.log('SourcedataTokens[i]: ', SourcedataTokens[i],i);\n\n                                    let ConditionStartIndex = i\n                                    let condition = SourcedataTokens[i].value\n                                    //HandleConditions evaluates condition and return the index of from where printing should resume\n                                    //value of i depends on the conditions\n\n                                    if (condition.includes('||') || condition.includes('&&'))\n\n                                    {\n\n\n                                        let value = GetConditionValue(condition, updated_tokens, i)\n\n                                                                this.LastConditionValue.push(value)\n\n\n                                        if (value == false) {\n\n\n\n                                            let BlockLength = 0\n                                            let BlockStart = 0\n\n                                            while (SourcedataTokens[i].value != '{')\n\n                                            {\n\n                                                if (SourcedataTokens[i + 1].value == '{')\n\n                                                {\n\n\n                                                    BlockLength = SourcedataTokens[i + 1].EndIndex - SourcedataTokens[i + 1].startIndex\n\n                                                    i = BlockLength + i + 1\n\n\n\n\n                                                    break;\n\n                                                }\n\n\n\n                                                i++\n                                            }\n\n                                        } else {\n\n\n                                            i = i\n\n\n                                        }\n\n\n\n\n                                    } else {\n\n\n                                        i = HandleConditions(SourcedataTokens, i, updated_tokens);\n\n\n\n                                        if (i != undefined) {\n\n\n                                            i = i\n\n\n                                        } else {\n                                            i = ConditionStartIndex\n                                            //console.log('i: ', i);\n                                        }\n\n                                    }\n\n\n\n\n                                }\n\n\n                            }\n\n\n\n                        }\n                        //console.log('j: ', j);\n\n                        j = j + SourcedataTokens.length\n                        //console.log('j: ', j);\n\n\n                    }\n\n                    //END FOR LOOP EXECUTION\n\n\n\n\n                }\n\n\n\n\n                \n\n\n //To find undefined variables\n               \n                //\n\n\n\n\nfunction onlyUnique(value, index, self) { \n    return self.indexOf(value) === index;\n}\n\nvar assigned_variables=assigned_variables.filter(onlyUnique)\n\nlet difference= variables_array.filter(x=> !assigned_variables.includes(x))\n\n                if (difference.length > 0)\n\n                {\n\n                    difference.forEach(el=>{\n\n\n                    this.error.push('Variable ' + el + ' is undefined ')\n\n\n                    })\n                    \n\n                }\n\n              if(this.error.length>0)\n              {\n\nthis.linebylineOutput=this.error\n\n\n              }\n\nelse{\n\n                this.linebylineOutput = this.output.split('\\n')\n                \n}\n\n\n\n\nvar t1 = performance.now()\n                if (this.linebylineOutput!= '' && this.error.length==0) {\n                    this.TimeTaken = \"Compiled Succesfully in \" + (t1 - t0).toPrecision(4) + \" ms.\"\n\n                }\n\n                else{\n\n                    this.isError = true\n\n                    this.TimeTaken = \"Compilation Error: Check for assignement and declaration mistyping\" \n\n\n                }\n\n\n               \n               this.linebylineOutput = this.linebylineOutput.filter(function(item) {\n                   \n                   \n                    return item !== \"\"\n                })\n\n\n                //SECTION - Calculating remaining values\n\n\n                //so that replace x with values\n\n                /*\n                            updated_tokens.forEach((el, i) => {\n                                \n\n\n                                let element = el.value\n\n\n                                //removing the \"(\"\" and \")\"\n\n\n                                var CleanedElement = RemoveBrackets(element)\n\n                                operation = ''\n\n\n\n                                //why pureeval?\n                                // operations like 50+60 were set as [5,0,+,6,0] instead of [50,+,60]. basically direct calculation was not working\n                                //pureeval finds such pure operations and then calculate them to directly set their value\n                                //this shit is only for pureoperations\n                                let pureval = /^([-+]?[0-9]*\\.?[0-9]+[\\/\\+\\-\\*])+([-+]?[0-9]*\\.?[0-9]+)*$/gm.test(CleanedElement)\n\n                                if (pureval == true) {\n\n\n\n                                    updated_tokens[i].value = eval(updated_tokens[i].value)\n\n\n                                }\n\n\n\n\n                                if (isCalculation(CleanedElement) == true && !pureval) {\n\n                                    terms = CleanedElement.split('')\n\n\n\n                                }\n\n\n\n\n                            })\n\n\n\n\n                            //\n\n                            // performing calculations\n\n\n\n\n                            updated_tokens.forEach((el, i) => {\n\n                                var indextoChange = '' //to know which value to replace like \"anna+dada-bad\" with \"5+6-7\"\n\n\n\n                                let element = el.value // reading the current value, for lon string variable names it's still like \"anna+dada-bad\"\n                                element = element.toString()\n                                var StringVar = []\n                                // \n\n                                let pureval = /^([-+]?[a-z]*\\.?[a-z]+[\\/\\+\\-\\*])+([-+]?[a-z]*\\.?[a-z]+)*$/gm.test(element)\n\n\n\n                                if (element.includes('>') || element.includes('<') || element.includes('==')) {\n\n\n\n                                    StringVar = SplitElementsArray(element)\n\n\n\n                                    StringVar = SetValues(StringVar, updated_tokens)\n\n\n                                    UpdateUpdated_tokenswithValues(StringVar, i, updated_tokens)\n\n\n\n\n                                }\n\n\n                                //finding operations like a+b-c\n                                if (pureval == true || element.charAt(0) == \"(\") {\n\n                                    // \n\n\n                                    StringVar = SplitElementsArray(element)\n                                    StringVar = SetValues(StringVar, updated_tokens)\n                                    UpdateUpdated_tokenswithValues(StringVar, i, updated_tokens)\n\n\n                                }\n\n\n\n\n                            })\n\n\n\n\n                            /*\n                             ReIntializedVariables.forEach(el=>{\n\n                            let flag=0\n                            let SkipIndex=0\n\n                            for(let m=0;m<updated_tokens.length;m++)\n                            {\n                                \n                            if(el.name==updated_tokens[m].name && flag==0)\n                            {\n\n\n                            if(el.value.charAt(0)=='\"')\n                            {\n\n\n                                let BuiltString= BuildString(el.value, )\n\n                                \n                            }\n                            flag=1;\n                            updated_tokens[m].value=el.value;\n\n\n                            \n\n                            SkipIndex=m\n\n\n                            }\n\n                            //\n\n                            if( m!=SkipIndex && flag==1 && el.name==updated_tokens[m].name)\n\n                            {\n\n                            updated_tokens.splice(m,1)\n\n                            }\n\n\n                            }\n\n\n\n\n                            })\n                            */\n\n\n\n\n                //SECTION - Iterating over tokens and then PRINTING FINAL using values stored in updated tokens\n\n                /*        \n\n            for (var j = 0; j < tokens.length; j++) {\n\n\n                var mutable_tokens = tokens\n                var token = mutable_tokens[j].value\n             \n\n                if (token == 'प्रिंट' )\n\n                {\n\n                    var b = RemoveBrackets(mutable_tokens[j+1].value)\n\n\n\n\n                    variables_array.push(b)\n\n                    \n\n                 \n                    //SECTION - Outputting the code\n                    // finding the relvant value and then output it as HTML\n                    updated_tokens.forEach((el, i) => {\n\n                        if (el.name == b ) {\n\n\n\n                            this.output = this.output + el.value + \"\\n\";\n\n                            assigned_variables.push(el.name);\n\n                           \n\n\n                        }\n\n\n\n                        // work to be continued\n\n                    })\n\n                    \n\n                    \n\n                }\n\n\n                //Handling Conditions\n\n                if(mutable_tokens[j].type==\"condition\")\n                {\n\n\n\n                   \n\n                    let token= updated_tokens.find(el=> el.originalvalue==mutable_tokens[j].value)\n\n\n\n                    let ConditionValue=token.value\n\n                  \n\n                   if(ConditionValue==false)\n                   {\n\nlet InitializeLoop= tokens.indexOf(mutable_tokens[j])\n\n\n\n\n\nwhile(mutable_tokens[j+1].value!='}' )\n{\n\n\n\n    let x= mutable_tokens[j+1].value.length\n    \n    \ntokens.splice(j+1, 1);\n \n\n    j++;\n\n\n}\n\n\n\n\n                   }\n\n\n                }\n\n\n                if(token == 'प्रिंट' && /^([-+]?[0-9]*\\.?[0-9]+[\\/\\+\\-\\*])+([-+]?[0-9]*\\.?[0-9]+)*$/gm.test(mutable_tokens[j+1].value) )\n                {\n \n                let a= eval(mutable_tokens[j+1].value)\n\n                this.output = this.output + \"\\n\" + a + \"\\n\"\n\n                }\n\n                \n\n        \n              \n\n\n\n\n      // this is to handle प्रिंट (\"Age is\"+ Age) etc.\n\n                if(isStringandValue(mutable_tokens[j].value))\n{\n\n\n        \n\n                    let x=mutable_tokens[j].value\n                    let string=''\n                    let newel=''\n\n                    x=RemoveBrackets(x)\n\n                    \n                    //x = x.replace(/ /g,'')\n\n                    x=x.split(\"+\")\n\n                    \n\n                    x.forEach(element => {\n                        \n\n                        \n                        if(element.charAt(0)== \" \" || element.charAt(element.length-1)==\" \" && !(element.includes('\"'))){\n\n                          \n                       newel= element.replace(/\\s/g, '');\n\n                        \n\n\n                        }\n                        else{\n\n                            newel=element\n                        }\n\n                       let y= updated_tokens.find(el=> el.name== newel)\n\n                      \n                       \n//\n                       if(y!=undefined)\n                       {\n\n\n\n                       string=string + ' ' + y.value\n                       //\n\n\n                       }\n                       else{\n\n                           \n                           element= element.replace(/\"/g, '');\n                           string=string+ ' ' + element\n                       }\n                       \n\n                       \n\n                    });\n\n\n\n                        this.output = this.output + \"\\n\" + string + \"\\n\"\n}\n\n\n//THIS IS to handle operations like प्रिंट (\"Name is GOAT\"), प्रिंट (\"Goodbye\")\n\nelse{\n\n\n\n                  let value= RemoveBrackets(mutable_tokens[j].value)\n                 // \n\n                  \n\n                   let CleanedValue = value.replace(/ /g,'')\n\n                    \n\n\n                   if(/^([-+]?[0-9]*\\.?[0-9]+[\\/\\+\\-\\*])+([-+]?[0-9]*\\.?[0-9]+)*$/gm.test(CleanedValue)!=true)\n\n                   {\n\n                 // \n\n                    value = value.replace(/\"/g, \"\");\n                    value = value.replace(/'/g, \"\");\n\n\n\n                        this.output = this.output + \"\\n\" + value + \"\\n\" \n }\n                        \n\n}\n\n\n            }\n\n\n           \n            })\n\n        }\n        */\n\n\n        }\n\n    }\n\n}; \n</script>\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n\n\n::-webkit-input-placeholder {\n   text-align: center;\n   vertical-align: middle;\n   line-height: 500px;\n}\n\n:-moz-placeholder { /* Firefox 18- */\n   text-align: center;  \n      vertical-align: middle;\n        line-height: 500px;\n\n\n}\n\n\n::-moz-placeholder {  /* Firefox 19+ */\n   text-align: center;  \n      vertical-align: middle;\n         line-height: 500px;\n\n\n}\n\n:-ms-input-placeholder {  \n   text-align: center; \n      vertical-align: middle;\n         line-height: 500px;\n\n\n}\n\nbutton:focus {outline:0;}\n\n#bharatP{\n\n\ntext-align: left;\n  display: table-cell;\n    font-family: monospace\n}\n#versionNumber{\n\n\ntext-align: left;\n  display: table-cell;\n    font-family: monospace;\n    padding-left: 6%\n}\n\n\n#version{\n\n    margin: 0;\n    float: left;\n    color: #92924c;\n    font-size: 90%;\n\n}\n\n#bharatDIV{\n\n    padding-top: 2%;\n    padding-left: 2%\n\n}\n\n\n#linebylineOutput\n{\n\n\n\nheight: 10px;\n    text-align: left;\n    \n\n\n}\n#errorstack{\n\ntext-align: left;\npadding-left: 2.5%;\npadding-top: 6%;\nfont-weight: bold;\ncolor:rgb(231, 83, 83);\n\n}\n\n#compiler{\n\n  display: flex;\n}\n\n#textarea{\n\n  width: 50%;\n  margin-left: -1%\n\n}\n#output{\n\n  height: 600px;\n  width: 50%;\n  background-color: black;\n    color: white;\n    overflow: auto\n  \n}\nh3 {\n  margin: 40px 0 0;\n}\n\nul {\n  list-style-type: none;\n  padding: 0;\n}\n\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\n\na {\n  color: #42b983;\n}\n\n.hello {\n  display: grid;\n}\n\n\n#codearea {\nwidth: 93%;\n    margin-left: 3.5%;\n    height: 500px;\n    background-color: whitesmoke;\n    font-family: monospace;\n    font-size: medium;\n    border: none;\n    outline: none;\n    resize: none;\n}\n\n#row{\n\ndisplay: flex;\n    width: 2%;\n    margin-top: -12%;\n\n}\n\n#rowdiv{\n\n\n  verflow: hidden;\n    height: 500px;\n    margin-left: 2%;\n    margin-right: 1%;\n    margin-top: 0%;\n    font-size: small;\n\n}\n\n#subm {\n  width: 18.5%;\n  height: 50px;\n      cursor: pointer;\n      border: none\n\n  \n}\n\n#subm:hover{\n\n\n    background-image: radial-gradient( circle 534px at 7.8% 17.6%,  rgba(254,253,112,1) 1.7%, rgba(248,143,111,1) 91.8% );\n}\n\np{\n\n \n  margin-top: 4%\n}\n\n#CodeStatus{\n\n    margin-top: 5%;  \n      text-align: left;\n    color: #2fff2f;\n    font-family: monospace\n\n}\n\n\n\n\n\n/* Smartphones (portrait) ----------- */\n@media only screen\nand (max-width : 480px) {\n\n\n::-webkit-input-placeholder {\n   text-align: center;\n   vertical-align: middle;\n   line-height: 250px;\n   font-size: 90%\n}\n\n:-moz-placeholder { /* Firefox 18- */\n   text-align: center;  \n      vertical-align: middle;\n        line-height: 250px;\n\n   font-size: 90%\n\n}\n\n::-moz-placeholder {  /* Firefox 19+ */\n   text-align: center;  \n      vertical-align: middle;\n         line-height: 250px;\n\n   font-size: 90%\n\n}\n\n:-ms-input-placeholder {  \n   text-align: center; \n      vertical-align: middle;\n         line-height: 250px;\n   font-size: 90%\n\n\n}\n\n#compiler{\n\n\n    display: inline-block\n}\n\n#CodeStatus{\n\ntext-align: left;\n\n}\n\n#linebylineOutput{\n\n\n}\n.hello{\n\n\n    text-align: center;\n    margin-top: 2%\n}\n#textarea{\n\n    width: 100%;\n    margin: 0%\n}\n#codearea{\n\n       height: 310px;\n       width: 99%;\n       margin-left: 0\n\n}\n\n#textarea button{\n\nwidth: 20%;\n    height: 30px;\n    font-size: small;\n}\n\n#output{\n\n\n    width: 100%;\n   height: 330px;\n\n    margin-top: 5%;\n}\n#printOutput{\n\n    width: 100%;\n    float: left\n}\n\n#headerlist{\n\n    list-style-type: none;\n    padding: 0;\n    display: grid;\n  \n    width: 100%;\n    background-color: #9cffff;\n    line-height: 40px;\n}\n\n}\n\n\n\n</style>"],"sourceRoot":"src/views"}]}