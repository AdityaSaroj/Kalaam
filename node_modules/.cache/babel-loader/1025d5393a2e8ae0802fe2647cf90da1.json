{"remainingRequest":"/Users/jonny/Documents/Work/test/node_modules/thread-loader/dist/cjs.js!/Users/jonny/Documents/Work/test/node_modules/babel-loader/lib/index.js!/Users/jonny/Documents/Work/test/src/FunctionScripts/MiscImportantFunctions.js","dependencies":[{"path":"/Users/jonny/Documents/Work/test/src/FunctionScripts/MiscImportantFunctions.js","mtime":1592314758664},{"path":"/Users/jonny/Documents/Work/test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jonny/Documents/Work/test/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jonny/Documents/Work/test/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/jonny/Documents/Work/test/src/FunctionScripts/MiscImportantFunctions.js"],"names":["Number","isEmptyStringorChar","element","charAt","isPureEval","test","isCalculation","isNumber","includes","length","RemoveBrackets","a","replace","b","c","d","Count","item","count","i","isArrayOperation","FindConditionValue","StringVar","StrVar","j","push","getLoopIndexStart","mutable_tokens","check","setIndex","value","handlemultConditions","condition","substring","SweepedElement","operator","CalculateValues","calculation","updated_tokens","IterationStart","global","flag","error","calculationArray","SplitElementsArray","SetValues","joinStringVar","join","NewStringVar","eval","undefined","forEach","el","toString","PushSetArrayIndexValue","tokens","data","type","ValueToSet","PushGetArrayIndexValue","CreateArrayElement","Value","iterator","ArrayElement","Split","split","SetArrayorStringElement","NewValue","indexCollected","Element","find","name","token","indexOf","index","PrintArrayElement","GetArrayorStringElement","ForLoopArrayorStringOutput","elementValue","CurrentElement","FoundValue","output","ArrayElementValue","UpdateUpdated_tokenswithValues","payload","HandleBlocks","StoreResult","ArrayBrackets","x","pop","startIndex","EndIndex","HandleConditions","sourcedata","SplitArray","Values","ForLoopConditionValue","SplitandJoin","array","Joinarray","AccumulateValue","ResetValue","AssignorUpdateValues","OriginalIterator","variable","variableType","varvalue","varvalueType","console","log","Itemvalue","ItemvalueLength","identifier","n","ArrayItem","m","GetConditionValue","ConditionValue","MultConditionsCount","parseInt","BuiltMultConditonWithValues","LastResult","result","filter","ForLoopSetMetadata","ForLoopMetaData","iterationStart","IterationEnd","iterationEnd","elementLength","ForLoopSourcedataIndexStart","Cycle","SetArrayIndexValue","SourceData","CompleteTokenValueList","NewValueToSet","newInterator","iterat"],"mappings":";;;;;;;;;;;;;;;AAAA,SACIA,MADJ,QAEO,SAFP,C,CAOA;;AAEA,SAASC,mBAAT,GAA8B;AAI1B,SAAO,UAASC,OAAT,EAAiB;AAC5B,QAAGA,OAAO,IAAE,GAAT,IAAeA,OAAO,IAAE,GAAxB,IAA+BA,OAAO,IAAE,GAAxC,IAA6CA,OAAO,IAAE,GAAtD,IAA2DA,OAAO,IAAE,GAApE,IAAyEA,OAAO,CAACC,MAAR,CAAe,CAAf,KAAmB,GAA5F,IAAiGD,OAAO,CAACC,MAAR,CAAe,CAAf,KAAmB,GAAvH,EAGA;AAEA,aAAO,IAAP;AAEC;AACI,GATD;AAYH;;AAGD,SAASC,UAAT,CAAoBF,OAApB,EAA4B;AAGxB,MAAG,+DAA+DG,IAA/D,CAAoEH,OAApE,CAAH,EACA;AAEA,WAAO,IAAP;AAEC;AACJ;;AAID,SAASI,aAAT,CAAuBJ,OAAvB,EAAgC;AAE5B,MAAI,CAACK,QAAQ,CAACL,OAAD,CAAb,EAAwB;AAGpB,QAAI,CAACA,OAAO,CAACM,QAAR,CAAiB,GAAjB,KAAyBN,OAAO,CAACM,QAAR,CAAiB,GAAjB,CAAzB,IAAkDN,OAAO,CAACM,QAAR,CAAiB,GAAjB,CAAlD,IAA2EN,OAAO,CAACM,QAAR,CAAiB,GAAjB,CAA3E,IAAoGN,OAAO,CAACM,QAAR,CAAiB,GAAjB,CAArG,MAAiIN,OAAO,CAACM,QAAR,CAAiB,GAAjB,KAAyBN,OAAO,CAACM,QAAR,CAAiB,GAAjB,CAA1B,IAAqD,CAACN,OAAO,CAACM,QAAR,CAAiB,GAAjB,CAAD,IAA0B,CAACN,OAAO,CAACM,QAAR,CAAiB,GAAjB,CAAhN,KAA2ON,OAAO,CAACC,MAAR,CAAeD,OAAO,CAACO,MAAR,GAAiB,CAAhC,KAAsC,GAArR,EAA0R;AAEtR,aAAO,IAAP;AAGH;AACJ;AACJ;;AAED,SAASC,cAAT,CAAwBR,OAAxB,EAAiC;AAE7B,MAAIS,CAAC,GAAGT,OAAO,CAACU,OAAR,CAAgB,GAAhB,EAAqB,EAArB,CAAR;AACA,MAAIC,CAAC,GAAGF,CAAC,CAACC,OAAF,CAAU,GAAV,EAAe,EAAf,CAAR;AACA,MAAIE,CAAC,GAAGD,CAAC,CAACD,OAAF,CAAU,GAAV,EAAe,EAAf,CAAR;AACA,MAAIG,CAAC,GAAGD,CAAC,CAACF,OAAF,CAAU,GAAV,EAAe,EAAf,CAAR;AAEA,SAAOG,CAAP;AAEH;;AAED,SAASC,KAAT,CAAeC,IAAf,EAAqBf,OAArB,EAA8B;AAE1B,MAAIgB,KAAK,GAAG,CAAZ;;AAGA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGjB,OAAO,CAACO,MAA5B,EAAoCU,CAAC,EAArC,EAAyC;AAErC,QAAIjB,OAAO,CAACC,MAAR,CAAegB,CAAf,KAAqBF,IAArB,IAA6Bf,OAAO,CAACC,MAAR,CAAegB,CAAC,GAAG,CAAnB,KAAyBF,IAA1D,EAAgE;AAE5DC,MAAAA,KAAK,IAAI,CAAT;AAIH;AAIJ;;AAED,SAAOA,KAAP;AAGH;;AAGD,SAASE,gBAAT,CAA0BlB,OAA1B,EAAmC;AAI/B;AAEAA,EAAAA,OAAO,GAAGQ,cAAc,CAACR,OAAD,CAAxB;;AAEA,MAAIA,OAAO,CAACC,MAAR,CAAeD,OAAO,CAACO,MAAR,GAAiB,CAAhC,KAAsC,GAAtC,IAA6CP,OAAO,CAACM,QAAR,CAAiB,GAAjB,CAA7C,IAAsEN,OAAO,CAACC,MAAR,CAAe,CAAf,KAAqB,GAA/F,EAAoG;AAGhG,WAAO,IAAP;AACH;AAEJ;;AAGD,SAASkB,kBAAT,CAA4BnB,OAA5B,EAIA;AAGI,MAAIA,OAAO,CAACM,QAAR,CAAiB,GAAjB,KAAyBN,OAAO,CAACM,QAAR,CAAiB,GAAjB,CAAzB,IAAkDN,OAAO,CAACM,QAAR,CAAiB,IAAjB,CAAlD,IAA4EN,OAAO,CAACM,QAAR,CAAiB,IAAjB,CAAhF,EAEA;AAGIN,IAAAA,OAAO,GAAGA,OAAO,CAACU,OAAR,CAAgB,MAAhB,EAAwB,EAAxB,CAAV;AAKH,GAbL,CAkBI;AAEA;;;AAIA,MAAIU,SAAS,GAAG,EAAhB,CAxBJ,CAwBuB;;AACnB,MAAIC,MAAM,GAAG,EAAb,CAzBJ,CAyBoB;;AAIhB,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGtB,OAAO,CAACO,MAA5B,EAAoCe,CAAC,EAArC,EAAyC;AAKrC;AAEA,QAAI,YAAYnB,IAAZ,CAAiBH,OAAO,CAACsB,CAAD,CAAxB,KAAiCtB,OAAO,CAACsB,CAAD,CAAP,IAAc,GAAd,IAAqBtB,OAAO,CAACsB,CAAD,CAAP,IAAc,GAApE,IAA4EjB,QAAQ,CAACL,OAAO,CAACsB,CAAD,CAAR,CAAxF,EAAsG;AAIlGD,MAAAA,MAAM,GAAGA,MAAM,GAAGrB,OAAO,CAACsB,CAAD,CAAzB,CAJkG,CAIrE;AAEhC;;AAED,QAAItB,OAAO,CAACsB,CAAD,CAAP,IAAc,GAAd,IAAqBtB,OAAO,CAACsB,CAAD,CAAP,IAAc,GAAvC,EAA6C;AAGzCF,MAAAA,SAAS,CAACG,IAAV,CAAevB,OAAO,CAACsB,CAAD,CAAtB;AAEH,KApBoC,CAuBrC;;;AAEA,QAAItB,OAAO,CAACsB,CAAD,CAAP,IAAc,GAAd,IAAqBtB,OAAO,CAACsB,CAAC,GAAG,CAAL,CAAP,IAAkB,GAA3C,EAAgD;AAC5CD,MAAAA,MAAM,GAAGA,MAAM,GAAGrB,OAAO,CAACsB,CAAD,CAAzB,CAD4C,CAG5C;AAGH,KA/BoC,CAmCrC;;;AACA,QAAKtB,OAAO,CAACsB,CAAD,CAAP,IAAc,GAAd,IAAqBtB,OAAO,CAACsB,CAAC,GAAG,CAAL,CAAP,IAAkB,GAA5C,EAAkD;AAE9CF,MAAAA,SAAS,CAACG,IAAV,CAAeF,MAAf;AACAD,MAAAA,SAAS,CAACG,IAAV,CAAevB,OAAO,CAACsB,CAAD,CAAP,GAAatB,OAAO,CAACsB,CAAC,GAAG,CAAL,CAAnC;AACAD,MAAAA,MAAM,GAAG,EAAT,CAJ8C,CAK9C;AAIH;;AACD,QAAKrB,OAAO,CAACsB,CAAD,CAAP,IAAc,GAAd,IAAqBtB,OAAO,CAACsB,CAAC,GAAG,CAAL,CAAP,IAAkB,GAA5C,EAAkD;AAE9CF,MAAAA,SAAS,CAACG,IAAV,CAAeF,MAAf;AAEAD,MAAAA,SAAS,CAACG,IAAV,CAAevB,OAAO,CAACsB,CAAD,CAAP,GAAatB,OAAO,CAACsB,CAAC,GAAG,CAAL,CAAnC;AACAD,MAAAA,MAAM,GAAG,EAAT,CAL8C,CAM9C;AAIH;;AACD,QAAIrB,OAAO,CAACsB,CAAD,CAAP,IAAc,GAAd,IAAqBtB,OAAO,CAACsB,CAAD,CAAP,IAAc,GAAnC,IAA0CtB,OAAO,CAACsB,CAAD,CAAP,IAAc,GAAxD,IAA+DtB,OAAO,CAACsB,CAAD,CAAP,IAAc,GAA7E,IAAoFtB,OAAO,CAACsB,CAAD,CAAP,IAAc,GAAlG,IAAyGtB,OAAO,CAACsB,CAAD,CAAP,IAAc,GAAvH,IAA6HtB,OAAO,CAACsB,CAAD,CAAP,IAAc,GAA3I,IAAiJtB,OAAO,CAACsB,CAAD,CAAP,IAAc,GAA/J,IAAqKtB,OAAO,CAACsB,CAAD,CAAP,IAAc,GAAnL,IAAyLtB,OAAO,CAACsB,CAAD,CAAP,IAAc,GAAvM,IAA6MtB,OAAO,CAACsB,CAAD,CAAP,IAAc,GAA3N,IAAiOtB,OAAO,CAACsB,CAAD,CAAP,IAAc,GAA/O,IAAsPtB,OAAO,CAACsB,CAAD,CAAP,IAAc,GAApQ,IAA2QtB,OAAO,CAACsB,CAAD,CAAP,IAAc,GAAzR,IAAiStB,OAAO,CAACsB,CAAD,CAAP,IAAc,GAA/S,IAAsTtB,OAAO,CAACsB,CAAC,GAAG,CAAL,CAAP,IAAkB,GAAxU,IAA+UtB,OAAO,CAACsB,CAAD,CAAP,IAAc,GAA7V,IAAoWtB,OAAO,CAACsB,CAAD,CAAP,IAAc,GAAlX,IAAyXtB,OAAO,CAACsB,CAAD,CAAP,IAAc,GAAvY,IAA8YtB,OAAO,CAACsB,CAAD,CAAP,IAAc,GAAha,EAAqa;AAKjaF,MAAAA,SAAS,CAACG,IAAV,CAAeF,MAAf,EALia,CAK1Y;AAEvB;;AAEA,UAAIrB,OAAO,CAACsB,CAAC,GAAG,CAAL,CAAP,IAAkB,GAAtB,EAA2B;AAEvBF,QAAAA,SAAS,CAACG,IAAV,CAAevB,OAAO,CAACsB,CAAD,CAAtB,EAFuB,CAEI;AAE9B;;AAIDD,MAAAA,MAAM,GAAG,EAAT,CAjBia,CAiBrZ;AAGf;;AACD,QAAIrB,OAAO,CAACsB,CAAC,GAAG,CAAL,CAAP,IAAkB,IAAtB,EAA4B;AAExBF,MAAAA,SAAS,CAACG,IAAV,CAAeF,MAAf,EAFwB,CAED;AAEvB;AAGH;AAIJ,GAtHL,CAwHI;;;AACA,SAAOD,SAAP;AAMH;;AAED,SAASI,iBAAT,CAA2BC,cAA3B,EAA2CH,CAA3C,EAA8CI,KAA9C,EAAqDC,QAArD,EAEA;AAGI,SAAOF,cAAc,CAACH,CAAD,CAAd,CAAkBM,KAAlB,IAA2BF,KAAlC,EAIA;AAGI,QAAID,cAAc,CAACH,CAAC,GAAG,CAAL,CAAd,CAAsBM,KAAtB,IAA+BF,KAAnC,EAA0C;AAItCC,MAAAA,QAAQ,GAAGL,CAAC,GAAG,CAAf;AAGH;;AAIDA,IAAAA,CAAC;AAEJ;;AACD,SAAOK,QAAP;AAIH;;AAGD,SAASE,oBAAT,CAA8B7B,OAA9B,EAAuC;AAInC,OAAK,IAAIiB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGjB,OAAO,CAACO,MAA5B,EAAoCU,CAAC,EAArC,EAAyC;AAIrC,QAAKjB,OAAO,CAACC,MAAR,CAAegB,CAAf,KAAqB,GAAtB,IAA+BjB,OAAO,CAACC,MAAR,CAAegB,CAAf,KAAqB,GAAxD,EAGA;AAGI,UAAIa,SAAS,GAAG9B,OAAO,CAAC+B,SAAR,CAAkB,CAAlB,EAAqBd,CAAC,GAAG,CAAzB,CAAhB;AAEA,UAAIe,cAAc,GAAGhC,OAAO,CAACU,OAAR,CAAgBoB,SAAhB,EAA2B,EAA3B,CAArB;AACA,UAAIG,QAAQ,GAAG,EAAf;;AAIA,UAAKjC,OAAO,CAACC,MAAR,CAAegB,CAAf,KAAqB,GAA1B,EAAgC;AAC5Ba,QAAAA,SAAS,GAAGA,SAAS,CAACpB,OAAV,CAAkB,IAAlB,EAAwB,EAAxB,CAAZ;AACAuB,QAAAA,QAAQ,GAAG,IAAX;AAEH,OAJD,MAIO,IAAKjC,OAAO,CAACC,MAAR,CAAegB,CAAf,KAAqB,GAA1B,EAAgC;AACnCa,QAAAA,SAAS,GAAGA,SAAS,CAACpB,OAAV,CAAkB,IAAlB,EAAwB,EAAxB,CAAZ;AACAuB,QAAAA,QAAQ,GAAG,IAAX;AAEH;;AAGD,aAAO;AACHD,QAAAA,cAAc,EAAdA,cADG;AAEHF,QAAAA,SAAS,EAATA,SAFG;AAGHG,QAAAA,QAAQ,EAARA;AAHG,OAAP;AASA;AAEH;AAKJ;AAGJ;;AAKD,SAASC,eAAT,CAAyBC,WAAzB,EAAsCb,CAAtC,EAAyCc,cAAzC,EAAyDC,cAAzD,EAAyEC,MAAzE,EAMA;AACI;AAEA,MAAIC,IAAI,GAAC,CAAT;AACA,MAAIC,KAAK,GAAC,EAAV;AACA,MAAIC,gBAAgB,GAAGC,kBAAkB,CAACP,WAAD,EAAcb,CAAd,CAAzC;AAGA,MAAIF,SAAS,GAAGuB,SAAS,CAACF,gBAAD,EAAmBL,cAAnB,CAAzB;AAEA,MAAIQ,aAAa,GAACxB,SAAS,CAACyB,IAAV,CAAe,EAAf,CAAlB;AAEA,MAAIC,YAAY,GAAC,EAAjB;;AACA,MAAGzC,QAAQ,CAACuC,aAAa,CAAC3C,MAAd,CAAqB,CAArB,CAAD,CAAR,IAAmC,IAAtC,EACA;AACI6C,IAAAA,YAAY,GAACC,IAAI,CAACH,aAAD,CAAjB;AAEH,GAJD,MAKK,IAAGvC,QAAQ,CAACuC,aAAa,CAAC3C,MAAd,CAAqB,CAArB,CAAD,CAAR,IAAmC+C,SAAtC,EACL;AAEI5B,IAAAA,SAAS,CAAC6B,OAAV,CAAkB,UAAAC,EAAE,EAAE;AAElB,UAAGA,EAAE,IAAE,GAAP,EACA;AACAA,QAAAA,EAAE,GAACA,EAAE,CAACC,QAAH,EAAH;AACAL,QAAAA,YAAY,GAACA,YAAY,GAACI,EAA1B;AACC;AAGJ,KATD;AAcH,GAjBI,MAkBD;AAEA9B,IAAAA,SAAS,GAACA,SAAV;AAEH;;AAKG,SAAQA,SAAS,CAACb,MAAV,GAAmB,CAAnB,GAAuBuC,YAAvB,GAAsC1B,SAA9C;AAMP;;AAGD,SAASgC,sBAAT,CAAgCxB,KAAhC,EAAuCyB,MAAvC,EAA+CC,IAA/C,EAAqDrC,CAArD,EAAwD;AAKpDoC,EAAAA,MAAM,CAAC9B,IAAP,CAAY;AACRgC,IAAAA,IAAI,EAAE,oBADE;AAER3B,IAAAA,KAAK,EAAEA,KAFC;AAGR4B,IAAAA,UAAU,EAAEF,IAAI,CAACrC,CAAC,GAAG,CAAL,CAHR,CAGgB;;AAHhB,GAAZ;AAMH;;AAED,SAASwC,sBAAT,CAAgC7B,KAAhC,EAAuCyB,MAAvC,EAA+CC,IAA/C,EAAqDrC,CAArD,EAAwD;AAKpDoC,EAAAA,MAAM,CAAC9B,IAAP,CAAY;AACRgC,IAAAA,IAAI,EAAE,oBADE;AAER3B,IAAAA,KAAK,EAAEA;AAFC,GAAZ;AAKH;;AAGD,SAAS8B,kBAAT,CAA4BC,KAA5B,EAAmCC,QAAnC,EAA6C;AAGzC,MAAIC,YAAY,GAAGrD,cAAc,CAACmD,KAAD,CAAjC,CAHyC,CAKzC;;AACA,MAAI3D,OAAO,GAAG6D,YAAd;AACA7D,EAAAA,OAAO,GAAGA,OAAO,CAACU,OAAR,CAAgB,GAAhB,EAAqB,EAArB,CAAV;AAGA,MAAIoD,KAAK,GAAG9D,OAAO,CAAC+D,KAAR,CAAc,GAAd,CAAZ,CAVyC,CAWzC;;AAIAD,EAAAA,KAAK,CAAC,CAAD,CAAL,GAAWF,QAAX;AAKAE,EAAAA,KAAK,GAAGA,KAAK,CAACjB,IAAN,CAAW,GAAX,CAAR,CApByC,CAqBzC;;AAEAiB,EAAAA,KAAK,GAAGA,KAAK,GAAG,GAAhB;AACAD,EAAAA,YAAY,GAAGC,KAAf;AAGAD,EAAAA,YAAY,GAAGA,YAAY,CAACnD,OAAb,CAAqB,MAArB,EAA6B,EAA7B,CAAf;AAGA,SAAOmD,YAAP;AAEH,C,CAGD;AACA;;;AAIA,SAASG,uBAAT,CAAiCH,YAAjC,EAA+CzB,cAA/C,EAA+DwB,QAA/D,EAAyEK,QAAzE,EAAmFZ,MAAnF,EAA2F;AACvF;AAGAQ,EAAAA,YAAY,GAAGA,YAAY,CAACnD,OAAb,CAAqB,GAArB,EAA0B,EAA1B,CAAf;AAGA,MAAIoD,KAAK,GAAGD,YAAY,CAACE,KAAb,CAAmB,GAAnB,CAAZ;AAEA,MAAIG,cAAc,GAAGJ,KAAK,CAAC,CAAD,CAA1B;AAGA,MAAIK,OAAO,GAAG/B,cAAc,CAACgC,IAAf,CAAoB,UAAAlB,EAAE;AAAA,WAAIA,EAAE,CAACmB,IAAH,IAAWJ,QAAf;AAAA,GAAtB,CAAd,CAZuF,CAcvF;;AAEA,MAAIE,OAAJ,EAAa;AACT,QAAI/D,aAAa,CAAC6D,QAAD,CAAjB,EAA6B;AAEzB;AAEA,UAAIK,MAAK,GAAGjB,MAAM,CAACe,IAAP,CAAY,UAAAlB,EAAE;AAAA,eAAIA,EAAE,CAACtB,KAAH,IAAYqC,QAAhB;AAAA,OAAd,CAAZ;;AACA,UAAI3C,CAAC,GAAG+B,MAAM,CAACkB,OAAP,CAAeD,MAAf,IAAwB,CAAhC;;AAGA,UAAI1C,MAAK,GAAGM,eAAe,CAAC+B,QAAD,EAAW3C,CAAX,EAAcc,cAAd,CAA3B;;AAEA6B,MAAAA,QAAQ,GAAGrC,MAAX;AAEH;;AAEDqC,IAAAA,QAAQ,GAAGE,OAAO,CAACvC,KAAnB;AAEH;;AAED,MAAIgC,QAAQ,IAAI,IAAhB,EAAsB;AAElB;AAGA,QAAIxD,aAAa,CAAC6D,QAAD,CAAjB,EAA6B,CAG5B,CAHD,MAGO;AAEHA,MAAAA,QAAQ,GAAGC,cAAX;AAEH;AACJ,GAbD,CAeA;AAfA,OAgBK;AAEDD,MAAAA,QAAQ,GAAGA,QAAX;AACH;;AAKD,MAAIK,KAAK,GAAGlC,cAAc,CAACgC,IAAf,CAAoB,UAAAlB,EAAE;AAAA,WAAIA,EAAE,CAACmB,IAAH,IAAWP,KAAK,CAAC,CAAD,CAApB;AAAA,GAAtB,CAAZ;AAEA,MAAIU,KAAK,GAAGpC,cAAc,CAACmC,OAAf,CAAuBD,KAAvB,CAAZ,CA7DuF,CA+DvF;;AACA,MAAI1C,KAAK,GAAG0C,KAAK,CAAC1C,KAAlB;AAEAA,EAAAA,KAAK,GAAGA,KAAK,CAACuB,QAAN,EAAR;AAEAvB,EAAAA,KAAK,GAAGA,KAAK,CAAClB,OAAN,CAAc,GAAd,EAAmB,EAAnB,CAAR;AACAkB,EAAAA,KAAK,GAAGA,KAAK,CAAClB,OAAN,CAAc,GAAd,EAAmB,EAAnB,CAAR;AACAkB,EAAAA,KAAK,GAAGA,KAAK,CAACmC,KAAN,CAAY,GAAZ,CAAR;;AAKA,MAAIH,QAAQ,IAAI,IAAhB,EAAsB;AAElB;AAEAhC,IAAAA,KAAK,CAACsC,cAAD,CAAL,GAAwBA,cAAxB;AAGH,GAPD,MAOO;AAEH;AAEAtC,IAAAA,KAAK,CAACsC,cAAD,CAAL,GAAwBD,QAAxB;AAKH,GA3FsF,CA6FvF;;;AAEA7B,EAAAA,cAAc,CAACoC,KAAD,CAAd,CAAsB5C,KAAtB,GAA8B,MAAMA,KAAK,CAACuB,QAAN,EAAN,GAAyB,GAAvD;AAKH;;AAGD,SAASsB,iBAAT,CAA2BZ,YAA3B,EAAyCzB,cAAzC,EAEA;AAEIyB,EAAAA,YAAY,GAAGA,YAAY,CAACnD,OAAb,CAAqB,GAArB,EAA0B,EAA1B,CAAf;AAEA,MAAIoD,KAAK,GAAGD,YAAY,CAACE,KAAb,CAAmB,GAAnB,CAAZ;AAEA,MAAIG,cAAc,GAAGJ,KAAK,CAAC,CAAD,CAA1B;AAEA,MAAIQ,KAAK,GAAGlC,cAAc,CAACgC,IAAf,CAAoB,UAAAlB,EAAE;AAAA,WAAIA,EAAE,CAACmB,IAAH,IAAWP,KAAK,CAAC,CAAD,CAApB;AAAA,GAAtB,CAAZ;AAIA,MAAIlC,KAAK,GAAG0C,KAAK,CAAC1C,KAAlB;AACAA,EAAAA,KAAK,GAAGA,KAAK,CAAClB,OAAN,CAAc,GAAd,EAAmB,EAAnB,CAAR;AACAkB,EAAAA,KAAK,GAAGA,KAAK,CAAClB,OAAN,CAAc,GAAd,EAAmB,EAAnB,CAAR;AACAkB,EAAAA,KAAK,GAAGA,KAAK,CAACmC,KAAN,CAAY,GAAZ,CAAR;AAGA,SAAOnC,KAAK,CAACsC,cAAD,CAAZ;AAKH;;AAED,SAASQ,uBAAT,CAAiC1E,OAAjC,EAA0CoC,cAA1C,EAA0D6B,QAA1D,EAAoE1B,IAApE,EAA0E;AAEtEvC,EAAAA,OAAO,GAAGA,OAAO,CAACU,OAAR,CAAgB,GAAhB,EAAqB,EAArB,CAAV;AAEA,MAAIoD,KAAK,GAAG9D,OAAO,CAAC+D,KAAR,CAAc,GAAd,CAAZ;AAEA,MAAIG,cAAc,GAAGJ,KAAK,CAAC,CAAD,CAA1B;;AAEA,MAAIzD,QAAQ,CAAC6D,cAAD,CAAZ,EAA8B;AAG1B,QAAII,KAAK,GAAGlC,cAAc,CAACgC,IAAf,CAAoB,UAAAlB,EAAE;AAAA,aAAIA,EAAE,CAACmB,IAAH,IAAWP,KAAK,CAAC,CAAD,CAApB;AAAA,KAAtB,CAAZ;AAIA,QAAIU,KAAK,GAAGpC,cAAc,CAACmC,OAAf,CAAuBD,KAAvB,CAAZ;AAEA,QAAI1C,KAAK,GAAG0C,KAAK,CAAC1C,KAAN,CAAYuB,QAAZ,EAAZ;;AAMA,QAAImB,KAAK,CAACf,IAAN,IAAc,OAAlB,EAA2B;AAGvB3B,MAAAA,KAAK,GAAGA,KAAK,CAAClB,OAAN,CAAc,GAAd,EAAmB,EAAnB,CAAR;AACAkB,MAAAA,KAAK,GAAGA,KAAK,CAAClB,OAAN,CAAc,GAAd,EAAmB,EAAnB,CAAR;AACAkB,MAAAA,KAAK,GAAGA,KAAK,CAACmC,KAAN,CAAY,GAAZ,CAAR;;AAGA,UAAIE,QAAQ,IAAIjB,SAAhB,EAA2B;AAEvB,YAAI,CAAC3C,QAAQ,CAAC4D,QAAD,CAAb,EAAyB;AAErBA,UAAAA,QAAQ,GAAGA,QAAQ,CAACvD,OAAT,CAAiB,IAAjB,EAAuB,EAAvB,CAAX;AACAuD,UAAAA,QAAQ,GAAGA,QAAQ,CAACvD,OAAT,CAAiB,IAAjB,EAAuB,EAAvB,CAAX;AACAuD,UAAAA,QAAQ,GAAGA,QAAQ,CAACvD,OAAT,CAAiB,IAAjB,EAAuB,EAAvB,CAAX;AACAuD,UAAAA,QAAQ,GAAGA,QAAQ,CAACvD,OAAT,CAAiB,IAAjB,EAAuB,EAAvB,CAAX;AACH,SAND,MAMO;AAEHuD,UAAAA,QAAQ,GAAGA,QAAX;AACH;;AAIDrC,QAAAA,KAAK,CAACsC,cAAD,CAAL,GAAwBD,QAAxB;AAEA7B,QAAAA,cAAc,CAACoC,KAAD,CAAd,CAAsB5C,KAAtB,GAA8BA,KAA9B;AAKH,OAtBD,MAsBO;AAGHA,QAAAA,KAAK,GAAGA,KAAK,CAACsC,cAAD,CAAb,CAHG,CAIH;AACA;AAGH;AAKJ,KA3CD,MA6CK,IAAII,KAAK,CAACf,IAAN,IAAc,QAAd,IAA0Be,KAAK,CAACf,IAAN,IAAY,OAA1C,EAAoD;AAIrD3B,MAAAA,KAAK,GAAGA,KAAK,CAAC3B,MAAN,CAAaiE,cAAb,CAAR;AAIH;;AAKD,WAAOtC,KAAP;AACH;AAIJ;;AAGD,SAAS+C,0BAAT,CAAoCC,YAApC,EAAkDhB,QAAlD,EAA4DxB,cAA5D,EAA4EE,MAA5E,EAEA;AAGI,MAAIuC,cAAc,GAAG,EAArB;AAGAA,EAAAA,cAAc,GAAGD,YAAY,CAACP,IAAb,GAAoB,GAApB,GAA0BT,QAA1B,GAAqC,GAAtD,CANJ,CAOI;AACA;;AACA,MAAIkB,UAAU,GAAGJ,uBAAuB,CAACG,cAAD,EAAiBzC,cAAjB,CAAxC;AAGAE,EAAAA,MAAM,CAACyC,MAAP,GAAgBzC,MAAM,CAACyC,MAAP,GAAgBD,UAAhB,GAA6B,IAA7C;AAIH;;AAKD,SAASzE,QAAT,CAAkBL,OAAlB,EAA2B;AAGvB,MAAI,aAAaG,IAAb,CAAkBH,OAAlB,CAAJ,EAAgC;AAC5B,WAAO,IAAP;AAEH;AACJ;;AAAA;;AAID,SAAS0C,kBAAT,CAA4B1C,OAA5B,EAAqCiB,CAArC,EAIA;AAII;AACA;;AAEA;;;;;;;;;;;;;;;;AAiCA,SAAOE,kBAAkB,CAACnB,OAAD,CAAzB;AAKH;;AAID,SAAS2C,SAAT,CAAmBvB,SAAnB,EAA8BgB,cAA9B,EAIA;AAGIhB,EAAAA,SAAS,CAAC6B,OAAV,CAAkB,UAACC,EAAD,EAAKjC,CAAL,EAEd;AAEIiC,IAAAA,EAAE,GAAGA,EAAE,CAACxC,OAAH,CAAW,KAAX,EAAkB,EAAlB,CAAL;;AAIA,QAAIwC,EAAE,CAACjD,MAAH,CAAUiD,EAAE,CAAC3C,MAAH,GAAY,CAAtB,KAA4B,GAAhC,EAAqC;AACjC,UAAIyE,iBAAiB,GAAGN,uBAAuB,CAACxB,EAAD,EAAKd,cAAL,CAA/C;AAGA4C,MAAAA,iBAAiB,GAAGA,iBAAiB,CAACtE,OAAlB,CAA0B,QAA1B,EAAoC,EAApC,CAApB;AAEAU,MAAAA,SAAS,CAACH,CAAD,CAAT,GAAe+D,iBAAf;AAKH,KAjBL,CAiBM;;;AAGF,QAAIV,KAAK,GAAGlC,cAAc,CAACgC,IAAf,CAAoB,UAAApE,OAAO;AAAA,aAAIA,OAAO,CAACqE,IAAR,IAAgBnB,EAApB;AAAA,KAA3B,CAAZ,CApBJ,CAsBI;AAEA;;AAIA,QAAIoB,KAAK,IAAItB,SAAb,EAAwB;AAEpB;AACA5B,MAAAA,SAAS,CAACH,CAAD,CAAT,GAAeqD,KAAK,CAAC1C,KAArB;AAIH,KAnCL,CAqCI;;AAGH,GA1CL;AA6CA,SAAOR,SAAP;AAKH,C,CAKD;AACA;AAEA;AAEA;AACA;AACA;;;AAGA,SAAS6D,8BAAT,CAAwCC,OAAxC,EAAiDjE,CAAjD,EAAoDmB,cAApD,EAAoE;AAEhE,MAAIhB,SAAS,GAAG8D,OAAhB,CAFgE,CAOhE;;AACA,MAAI7E,QAAQ,CAACe,SAAS,CAAC,CAAD,CAAV,CAAZ,EAA4B;AAGxB,QAAIQ,KAAK,GAAGmB,IAAI,CAAC3B,SAAS,CAACyB,IAAV,CAAe,EAAf,CAAD,CAAhB;AAEA,WAAOjB,KAAP;AAEH,GAPD,MAOO,IAAIR,SAAS,CAAC,CAAD,CAAT,IAAgB,IAApB,EAA0B;AAE7B,QAAIX,CAAC,GAAGW,SAAS,CAAC,CAAD,CAAT,CAAa+B,QAAb,EAAR;AACA,QAAIxC,CAAC,GAAGS,SAAS,CAAC,CAAD,CAAT,CAAa+B,QAAb,EAAR;;AAEA,QAAIvB,OAAK,GAAGmB,IAAI,CAACtC,CAAC,IAAIE,CAAN,CAAhB;;AAEA,WAAOiB,OAAP;AAGH,GAVM,CAcP;AAdO,OAeF;AAKD,UAAIR,SAAS,CAACd,QAAV,CAAmB,GAAnB,CAAJ,EAA6B;AAEzBc,QAAAA,SAAS,CAACA,SAAS,CAACmD,OAAV,CAAkB,GAAlB,CAAD,CAAT,GAAoC,GAApC;AAGH;;AAKD,UAAI3C,OAAK,GAAGR,SAAS,CAACyB,IAAV,CAAe,EAAf,CAAZ;;AAIA,aAAOjB,OAAP;AACH;AAEJ,C,CAGD;AACA;;;AACA,SAASuD,YAAT,CAAsB1D,cAAtB,EAAsCH,CAAtC,EAAyC8D,WAAzC,EAAsD;AAGlD;AACA;AAIA,MAAIC,aAAa,GAAG,EAApB;;AAGA,SAAO,IAAP,EAGA;AAII,QAAI5D,cAAc,CAACH,CAAD,CAAd,CAAkBM,KAAlB,IAA2B,GAA/B,EAAoC;AAEhCyD,MAAAA,aAAa,CAAC9D,IAAd,CAAmB;AACfgC,QAAAA,IAAI,EAAE,GADS;AAEfiB,QAAAA,KAAK,EAAElD;AAFQ,OAAnB,EAFgC,CAMhC;;AAEA,UAAI8D,WAAW,IAAIpC,SAAnB,EAA8B;AAE1BoC,QAAAA,WAAW,CAAC7D,IAAZ,CAAiBE,cAAc,CAACH,CAAD,CAA/B;AACH;AAGJ,KAdD,MAcO,IAAIG,cAAc,CAACH,CAAD,CAAd,CAAkBM,KAAlB,IAA2B,GAA/B,EAAoC;AAEvC;AACA;AAEA,UAAI0D,CAAC,GAAGD,aAAa,CAACE,GAAd,EAAR,CALuC,CAMvC;;AACA,UAAIH,WAAW,IAAIpC,SAAnB,EAA8B;AAE1BoC,QAAAA,WAAW,CAAC7D,IAAZ,CAAiBE,cAAc,CAACH,CAAD,CAA/B;AAGAG,QAAAA,cAAc,CAAC6D,CAAC,CAACd,KAAH,CAAd,CAAwBgB,UAAxB,GAAqCF,CAAC,CAACd,KAAvC;AACA/C,QAAAA,cAAc,CAAC6D,CAAC,CAACd,KAAH,CAAd,CAAwBiB,QAAxB,GAAmCnE,CAAnC;AACH,OAdsC,CAgBvC;;;AACAG,MAAAA,cAAc,CAAC6D,CAAC,CAACd,KAAH,CAAd,CAAwBgB,UAAxB,GAAqCF,CAAC,CAACd,KAAvC;AACA/C,MAAAA,cAAc,CAAC6D,CAAC,CAACd,KAAH,CAAd,CAAwBiB,QAAxB,GAAmCnE,CAAnC;;AACA,UAAI+D,aAAa,CAAC9E,MAAd,IAAwB,CAA5B,EAA+B;AAE3B;AAGA;AAEH;AAKJ,KA/BM,MA+BA;AAEH,UAAI6E,WAAW,IAAIpC,SAAnB,EAA8B;AAE1BoC,QAAAA,WAAW,CAAC7D,IAAZ,CAAiBE,cAAc,CAACH,CAAD,CAA/B;AACH;AAGJ;;AAEDA,IAAAA,CAAC;AAKJ;;AAGD,SAAO;AACH8D,IAAAA,WAAW,EAAXA,WADG;AAEH9D,IAAAA,CAAC,EAADA;AAFG,GAAP;AAKH;;AAGD,SAASoE,gBAAT,CAA0BC,UAA1B,EAAsC1E,CAAtC,EAAyCmB,cAAzC,EAAyD;AAErD,MAAIpC,OAAO,GAAG2F,UAAU,CAAC1E,CAAD,CAAV,CAAcW,KAA5B,CAFqD,CAGrD;AACA;AAEA;;AAKA,MAAIgE,UAAU,GAAGlD,kBAAkB,CAAC1C,OAAD,EAAUiB,CAAV,CAAnC;AAGA,MAAI4E,MAAM,GAAGlD,SAAS,CAACiD,UAAD,EAAaxD,cAAb,CAAtB;AAGA,MAAI0D,qBAAqB,GAAGb,8BAA8B,CAACY,MAAD,EAASzD,cAAT,EAAyBnB,CAAzB,CAA1D;;AAKA,MAAI6E,qBAAqB,IAAI,KAA7B,EAAoC;AAKhC,WAAOH,UAAU,CAAC1E,CAAC,GAAG,CAAL,CAAV,CAAkBW,KAAlB,IAA2B,GAAlC,EAKA;AAII;AACA;AAEA;AACA;AACAX,MAAAA,CAAC;AAKJ,KAxB+B,CA2BhC;;;AACA,WAAOA,CAAP;AAIH;AAKJ;;AAID,SAAS8E,YAAT,CAAsBC,KAAtB,EAA6BjB,MAA7B,EAAqC/E,OAArC,EAA8C;AAE1CgG,EAAAA,KAAK,CAAC,CAAD,CAAL,GAAWjB,MAAX;AAEA,MAAIkB,SAAS,GAAGD,KAAK,CAACnD,IAAN,CAAW,GAAX,IAAkB,GAAlC;AACA7C,EAAAA,OAAO,GAAGiG,SAAV;AAEA,SAAOjG,OAAP;AAGH;;AAED,IAAIkG,eAAe,GAAG,EAAtB;;AAEA,SAASC,UAAT,GAAsB;AAElBD,EAAAA,eAAe,GAAG,EAAlB;AAEH;;AAID,SAASE,oBAAT,CAA8BT,UAA9B,EAA0C1E,CAA1C,EAA6CmB,cAA7C,EAA6DwB,QAA7D,EAAuEyC,gBAAvE,EAAwF/D,MAAxF,EAAgG;AAC5F;AAGA,MAAIgE,QAAQ,GAAGX,UAAU,CAAC1E,CAAC,GAAG,CAAL,CAAV,CAAkBW,KAAjC;AAIA,MAAI2E,YAAY,GAAGZ,UAAU,CAAC1E,CAAC,GAAG,CAAL,CAAV,CAAkBsC,IAArC,CAR4F,CAS5F;;AACA,MAAIiD,QAAQ,GAAGb,UAAU,CAAC1E,CAAC,GAAG,CAAL,CAAV,CAAkBW,KAAjC;;AAIA,MAAG4E,QAAQ,IAAE,GAAV,IAAeA,QAAQ,IAAE,GAA5B,EACA;AAIIA,IAAAA,QAAQ,GAAC,GAAT;AACH;;AAGD,MAAIA,QAAQ,CAAClG,QAAT,CAAkB,QAAlB,KAA+BkG,QAAQ,CAAClG,QAAT,CAAkB,MAAlB,CAA/B,IAA4DkG,QAAQ,CAAClG,QAAT,CAAkB,QAAlB,CAA5D,IAA2FkG,QAAQ,CAAClG,QAAT,CAAkB,OAAlB,CAA3F,IAAyHkG,QAAQ,CAAClG,QAAT,CAAkB,KAAlB,CAAzH,IAAqJkG,QAAQ,CAAClG,QAAT,CAAkB,QAAlB,CAArJ,IAAoLkG,QAAQ,CAAClG,QAAT,CAAkB,KAAlB,CAAxL,EAEA;AAEI,QAAIkC,KAAK,GAAE,yBAAyB,GAAzB,GAA+B8D,QAA/B,GAAyC,KAAzC,GAAgD,GAA3D;AAGRhE,IAAAA,MAAM,CAACE,KAAP,CAAajB,IAAb,CAAkBiB,KAAlB;AAGK;;AAKD,MAAIiE,YAAY,GAAGd,UAAU,CAAC1E,CAAC,GAAG,CAAL,CAAV,CAAkBsC,IAArC;AAEA,MAAI+B,CAAC,GAAGlD,cAAc,CAACgC,IAAf,CAAoB,UAAClB,EAAD,EAAKjC,CAAL;AAAA,WAAWiC,EAAE,CAACmB,IAAH,IAAWmC,QAAtB;AAAA,GAApB,CAAR;;AAGA,MAAG,CAACnG,QAAQ,CAACmG,QAAD,CAAT,IAAsBC,YAAY,IAAE,OAApC,IAA+CnB,CAAC,IAAEtC,SAAlD,IAA+DwD,QAAQ,IAAE,GAAzE,IAAgF,CAACzG,mBAAmB,CAACyG,QAAD,CAAvG,EAGA;AAIQlE,IAAAA,MAAM,CAACE,KAAP,CAAajB,IAAb,CAAkB,gBAAgB+E,QAAhB,GAA2B,gBAA3B,GAA8C,IAA9C,GAAqDE,QAArD,GAAgE,gBAAlF;AAKP,GAZD,MAeI,IAAGA,QAAQ,CAAClG,QAAT,CAAkB,QAAlB,CAAH,EAGR;AAEE,QAAIwD,MAAK,GAAC0C,QAAQ,CAACzC,KAAT,CAAe,GAAf,CAAV;;AACA2C,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BH,QAA1B;AAEA,QAAIzF,IAAI,GAAC+C,MAAK,CAAC,CAAD,CAAd;AAEA,QAAI8C,SAAS,GAACxE,cAAc,CAACgC,IAAf,CAAoB,UAAAlB,EAAE;AAAA,aAAEA,EAAE,CAACmB,IAAH,IAAStD,IAAX;AAAA,KAAtB,EAAuCa,KAArD;AAGA8E,IAAAA,OAAO,CAACC,GAAR,SAAmBC,SAAnB;;AAEA,QAAGA,SAAS,CAACtG,QAAV,CAAmB,GAAnB,CAAH,EACA;AAEEsG,MAAAA,SAAS,GAAEA,SAAS,CAACzD,QAAV,GAAqBY,KAArB,CAA2B,GAA3B,CAAX;AAED,KALD,MAMK,IAAG6C,SAAS,CAACrG,MAAV,IAAkB,CAArB,EAAuB;AAE9BqG,MAAAA,SAAS,GAACA,SAAV;AAGG,KALI,MAOD;AAEFA,MAAAA,SAAS,GAAEA,SAAS,CAACzD,QAAV,EAAX;AAED;;AAGH,QAAI0D,eAAe,GAACD,SAAS,CAACrG,MAA9B;AAGA6B,IAAAA,cAAc,CAACb,IAAf,CAAoB;AAChB8C,MAAAA,IAAI,EAAEiC,QADU;AAGhB1E,MAAAA,KAAK,EAAEiF,eAHS;AAMhBC,MAAAA,UAAU,EAAE7F,CANI;AAOhBsC,MAAAA,IAAI,EAAE;AAPU,KAApB;AAYC,GAlDO,CAoDJ;AAEA;AAEA;AAxDI,OA2DA,IAAIkD,YAAY,IAAI,oBAApB,EAEJ;AAEI,UAAIM,CAAC,GAAG3E,cAAc,CAACgC,IAAf,CAAoB,UAAClB,EAAD,EAAKjC,CAAL;AAAA,eAAWiC,EAAE,CAACmB,IAAH,IAAWiC,QAAtB;AAAA,OAApB,CAAR;AAEA,UAAI9B,KAAK,GAAGpC,cAAc,CAACmC,OAAf,CAAuBwC,CAAvB,CAAZ,CAJJ,CAMI;AAGA;;AACA,UAAI/G,OAAO,GAAGwG,QAAQ,CAAC9F,OAAT,CAAiB,GAAjB,EAAsB,EAAtB,CAAd;;AAEA,UAAGV,OAAO,CAACM,QAAR,CAAiB,GAAjB,CAAH,EACA;AAEI,YAAIwD,KAAK,GAAG9D,OAAO,CAAC+D,KAAR,CAAc,GAAd,CAAZ;AAEH,OALD,MAOM,IAAG/D,OAAO,CAACM,QAAR,CAAiB,GAAjB,CAAH,EACN;AAEI,YAAIwD,KAAK,GAAG9D,OAAO,CAAC+D,KAAR,CAAc,GAAd,CAAZ;AAGH;;AAID,UAAIxB,IAAI,GAAG,KAAX,CA7BJ,CAgCI;;AAEA,UAAIvC,OAAO,CAACM,QAAR,CAAiB,GAAjB,KAAwBN,OAAO,CAACM,QAAR,CAAiB,GAAjB,KAA0B,CAACwD,KAAK,CAAC,CAAD,CAAL,CAASxD,QAAT,CAAkB,GAAlB,CAAvD,EAA+E;AAG3EiC,QAAAA,IAAI,GAAG,IAAP;;AAMA,YAAI+B,OAAK,GAAGlC,cAAc,CAACgC,IAAf,CAAoB,UAAAlB,EAAE;AAAA,iBAAIA,EAAE,CAACmB,IAAH,IAAWP,KAAK,CAAC,CAAD,CAApB;AAAA,SAAtB,CAAZ;;AACA,YAAIU,MAAK,GAAGpC,cAAc,CAACmC,OAAf,CAAuBD,OAAvB,CAAZ;;AAGA,YAAI0C,SAAS,GAAGlD,KAAK,CAAC,CAAD,CAAL,CAASC,KAAT,CAAe,GAAf,CAAhB;AAMA,YAAIgB,MAAM,GAAG7C,eAAe,CAAC8E,SAAS,CAAC,CAAD,CAAV,EAAe/F,CAAf,EAAkBmB,cAAlB,CAA5B;;AAKA,YAAIyB,aAAY,GAAGkC,YAAY,CAACiB,SAAD,EAAYjC,MAAZ,EAAoB/E,OAApB,CAA/B,CAxB2E,CA8B3E;;;AACA,YAAI4B,OAAK,GAAG8C,uBAAuB,CAACb,aAAD,EAAezB,cAAf,CAAnC;;AAEA8D,QAAAA,eAAe,IAAItE,OAAnB;AAEAQ,QAAAA,cAAc,CAACoC,MAAD,CAAd,CAAsB5C,KAAtB,GAA8BsE,eAA9B,CAnC2E,CAqC3E;AAIH,OAzCD,MAyCO;AAEH,YAAIpC,KAAK,GAAG9D,OAAO,CAAC+D,KAAR,CAAc,GAAd,CAAZ;AAKH,OAlFL,CAsFI;;;AAKA,UAAI,CAACD,KAAK,CAAC,CAAD,CAAL,CAASxD,QAAT,CAAkB,GAAlB,KAA0BwD,KAAK,CAAC,CAAD,CAAL,CAASxD,QAAT,CAAkB,GAAlB,CAA3B,KAAsD,CAACwD,KAAK,CAAC,CAAD,CAAL,CAASxD,QAAT,CAAkB,GAAlB,CAA3D,EAAmF;AAE/E,YAAIyE,OAAM,GAAG7C,eAAe,CAAC4B,KAAK,CAAC,CAAD,CAAN,EAAW7C,CAAX,EAAcmB,cAAd,CAA5B;;AAGApC,QAAAA,OAAO,GAAG+F,YAAY,CAACjC,KAAD,EAAQiB,OAAR,EAAgB/E,OAAhB,CAAtB;AAGH;;AAGD,UAAIsE,KAAK,GAAGlC,cAAc,CAACgC,IAAf,CAAoB,UAAAlB,EAAE;AAAA,eAAIA,EAAE,CAACmB,IAAH,IAAWP,KAAK,CAAC,CAAD,CAApB;AAAA,OAAtB,CAAZ,CAtGJ,CA2GI;;AACA,UAAIQ,KAAK,IAAItB,SAAT,IAAsBqD,gBAAgB,IAAIvC,KAAK,CAAC,CAAD,CAA/C,IAAsDQ,KAAK,CAACD,IAAN,IAAY,EAAtE,EAEA;AAGIrE,QAAAA,OAAO,GAAG+F,YAAY,CAACjC,KAAD,EAAQQ,KAAK,CAAC1C,KAAd,EAAqB5B,OAArB,CAAtB;AAKH,OAVD,CAYA;AAZA,WAaK,IAAIqG,gBAAgB,IAAIvC,KAAK,CAAC,CAAD,CAA7B,EAAkC;AAGnC9D,UAAAA,OAAO,GAAG+F,YAAY,CAACjC,KAAD,EAAQF,QAAR,EAAkB5D,OAAlB,CAAtB;AAEH;;AAGD,UAAI6D,YAAY,GAAG7D,OAAnB,CAjIJ,CAwII;;AACA,UAAI4B,KAAK,GAAG8C,uBAAuB,CAACb,YAAD,EAAezB,cAAf,CAAnC;;AAIA,UAAI2E,CAAC,IAAI/D,SAAL,IAAkBT,IAAI,IAAI,KAA9B,EAAqC;AAGjCH,QAAAA,cAAc,CAACoC,KAAD,CAAd,CAAsB5C,KAAtB,GAA8BA,KAA9B;AAGH,OAND,MAMO,IAAIW,IAAI,IAAI,KAAZ,EAAmB;AAGtBH,QAAAA,cAAc,CAACb,IAAf,CAAoB;AAChB8C,UAAAA,IAAI,EAAEiC,QADU;AAGhB1E,UAAAA,KAAK,EAAEA,KAHS;AAMhBkF,UAAAA,UAAU,EAAE7F,CANI;AAOhBsC,UAAAA,IAAI,EAAEoC,UAAU,CAAC1E,CAAC,GAAG,CAAL,CAAV,CAAkBsC;AAPR,SAApB;AASH;AAEJ,KAnKG,MAmKG;AAIH,UAAI0D,CAAC,GAAG7E,cAAc,CAACgC,IAAf,CAAoB,UAAClB,EAAD,EAAKjC,CAAL;AAAA,eAAWiC,EAAE,CAACmB,IAAH,IAAWmC,QAAtB;AAAA,OAApB,CAAR;;AASA,UAAIS,CAAC,IAAIjE,SAAT,EAAoB;AAIhBwD,QAAAA,QAAQ,GAAGS,CAAC,CAACrF,KAAb,CAJgB,CAMhB;AAGH;;AAKD,UAAImF,EAAC,GAAG3E,cAAc,CAACgC,IAAf,CAAoB,UAAClB,EAAD,EAAKjC,CAAL;AAAA,eAAWiC,EAAE,CAACmB,IAAH,IAAWiC,QAAtB;AAAA,OAApB,CAAR;;AAMA,UAAIS,EAAC,IAAI/D,SAAT,EAAoB;AAKhB;AAIA,YAAI5C,aAAa,CAACoG,QAAD,CAAjB,EAIA;AAII;AACA,cAAItG,UAAU,CAACsG,QAAD,CAAd,EAKA;AAEI,gBAAI5E,OAAK,GAAGmB,IAAI,CAACyD,QAAD,CAAhB,CAFJ,CAOI;;;AACApE,YAAAA,cAAc,CAACb,IAAf,CAAoB;AAChB8C,cAAAA,IAAI,EAAEiC,QADU;AAGhB1E,cAAAA,KAAK,EAAEA,OAHS;AAKhBkF,cAAAA,UAAU,EAAE7F,CALI;AAMhBsC,cAAAA,IAAI,EAAEoC,UAAU,CAAC1E,CAAC,GAAG,CAAL,CAAV,CAAkBsC;AANR,aAApB;AAUH,WAvBD,CAyBA;AAzBA,eA0BK;AAED;AAGA,kBAAI3B,OAAK,GAAGM,eAAe,CAACsE,QAAD,EAAWvF,CAAX,EAAcmB,cAAd,EAA6BE,MAA7B,CAA3B;;AASAF,cAAAA,cAAc,CAACb,IAAf,CAAoB;AAChB8C,gBAAAA,IAAI,EAAEiC,QADU;AAGhB1E,gBAAAA,KAAK,EAAEA,OAHS;AAKhBkF,gBAAAA,UAAU,EAAE7F,CALI;AAMhBsC,gBAAAA,IAAI,EAAEoC,UAAU,CAAC1E,CAAC,GAAG,CAAL,CAAV,CAAkBsC;AANR,eAApB;AAWH;AAGJ,SA/DD,CAkEA;AAlEA,aAmEK,IAAG,CAACnD,aAAa,CAACoG,QAAD,CAAjB,EAA6B;AAM9BpE,YAAAA,cAAc,CAACb,IAAf,CAAoB;AAChB8C,cAAAA,IAAI,EAAEiC,QADU;AAGhB1E,cAAAA,KAAK,EAAE4E,QAHS;AAKhBM,cAAAA,UAAU,EAAE7F,CALI;AAMhBsC,cAAAA,IAAI,EAAEoC,UAAU,CAAC1E,CAAC,GAAG,CAAL,CAAV,CAAkBsC;AANR,aAApB;AAUH;AAGJ,OA/FD,CAoGA;AApGA,WAqGK;AAKDiD,UAAAA,QAAQ,GAAGA,QAAQ,CAACrD,QAAT,EAAX;;AAKA,cAAIqD,QAAQ,CAAClG,QAAT,CAAkB,GAAlB,KAA0BkG,QAAQ,CAAClG,QAAT,CAAkB,GAAlB,CAA1B,IAAqDkG,QAAQ,CAAClG,QAAT,CAAkB,GAAlB,CAArD,IAA+EkG,QAAQ,CAAClG,QAAT,CAAkB,GAAlB,CAA/E,IAAyGkG,QAAQ,CAAClG,QAAT,CAAkB,GAAlB,CAA7G,EAAqI;AAGjI;AAIA,gBAAI2D,QAAQ,GAAG/B,eAAe,CAACsE,QAAD,EAAWvF,CAAX,EAAcmB,cAAd,EAA6BE,MAA7B,CAA9B;AAQAyE,YAAAA,EAAC,CAACnF,KAAF,GAAUqC,QAAV;AAEH,WAjBD,MAiBO;AAGH,gBAAIO,OAAK,GAACpC,cAAc,CAACmC,OAAf,CAAuBwC,EAAvB,CAAV;;AACA3E,YAAAA,cAAc,CAACoC,OAAD,CAAd,CAAsB5C,KAAtB,GAA4B4E,QAA5B;AAGH;AAKJ;AAGJ,KAxc2F,CA2c5F;;AAGH;;AAKD,SAASU,iBAAT,CAA2BlH,OAA3B,EAAoCoC,cAApC,EAAoDd,CAApD,EAAuD;AAGnD,MAAI6F,cAAc,GAAG,KAArB;;AAEA,MAAInH,OAAO,CAACM,QAAR,CAAiB,IAAjB,KAA0BN,OAAO,CAACM,QAAR,CAAiB,IAAjB,CAA9B,EAAsD;AAIlD,QAAI8G,mBAAmB,GAAGC,QAAQ,CAACvG,KAAK,CAAC,GAAD,EAAMd,OAAN,CAAN,CAAR,GAAgCqH,QAAQ,CAACvG,KAAK,CAAC,GAAD,EAAMd,OAAN,CAAN,CAAlE,CAJkD,CASlD;AACA;;AACA,QAAIsH,2BAA2B,GAAG,EAAlC;AACA,QAAIC,UAAU,GAAG,EAAjB,CAZkD,CAelD;;AAEA,SAAK,IAAItG,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAImG,mBAArB,EAA0CnG,CAAC,EAA3C,EAEA;AAKI,UAAIA,CAAC,IAAImG,mBAAT,EAA8B;AAI1B,YAAItF,SAAS,GAAGyF,UAAU,CAACvF,cAA3B;AACAF,QAAAA,SAAS,GAAGA,SAAS,CAACpB,OAAV,CAAkB,IAAlB,EAAwB,EAAxB,CAAZ;AAGA,YAAIkF,UAAU,GAAGlD,kBAAkB,CAACZ,SAAD,EAAYR,CAAZ,CAAnC;AAEA,YAAIuE,MAAM,GAAGlD,SAAS,CAACiD,UAAD,EAAaxD,cAAb,CAAtB;AAIA+E,QAAAA,cAAc,GAAGlC,8BAA8B,CAACY,MAAD,EAASzD,cAAT,EAAyBd,CAAzB,CAA/C;AAKAgG,QAAAA,2BAA2B,GAAGA,2BAA2B,GAAGH,cAA5D;AAGH,OAtBD,MAsBO;AAGH,YAAIK,MAAM,GAAG3F,oBAAoB,CAAC7B,OAAD,CAAjC;AAEAuH,QAAAA,UAAU,GAAGC,MAAb;AAGAxH,QAAAA,OAAO,GAAGwH,MAAM,CAACxF,cAAjB;AACA,YAAIF,UAAS,GAAG0F,MAAM,CAAC1F,SAAvB;AACAA,QAAAA,UAAS,GAAGA,UAAS,CAACpB,OAAV,CAAkB,IAAlB,EAAwB,EAAxB,CAAZ;;AAKA,YAAIkF,WAAU,GAAGlD,kBAAkB,CAACZ,UAAD,EAAYR,CAAZ,CAAnC,CAfG,CAkBH;;;AAIA,YAAIuE,OAAM,GAAGlD,SAAS,CAACiD,WAAD,EAAaxD,cAAb,CAAtB,CAtBG,CAuBH;;;AAGA+E,QAAAA,cAAc,GAAGlC,8BAA8B,CAACY,OAAD,EAASzD,cAAT,EAAyBd,CAAzB,CAA/C;AAKAgG,QAAAA,2BAA2B,GAAGA,2BAA2B,GAAGH,cAA9B,GAA+CK,MAAM,CAACvF,QAApF;AAKH;AAGJ,KArFiD,CAwFlD;;;AAEAkF,IAAAA,cAAc,GAAGpE,IAAI,CAACuE,2BAAD,CAArB;AAOH,GAjGD,MAiGO;AAEH;AAEA,QAAI1B,YAAU,GAAGlD,kBAAkB,CAAC1C,OAAD,EAAUsB,CAAV,CAAnC;;AAKA,QAAIuE,QAAM,GAAGlD,SAAS,CAACiD,YAAD,EAAaxD,cAAb,CAAtB;;AACAyD,IAAAA,QAAM,GAAGA,QAAM,CAAC4B,MAAP,CAAc,UAAS1G,IAAT,EAAe;AAElC,aAAOA,IAAI,KAAK,EAAhB;AACH,KAHQ,CAAT,CAVG,CAiBH;;AAEAoG,IAAAA,cAAc,GAAGlC,8BAA8B,CAACY,QAAD,EAASzD,cAAT,EAAyBd,CAAzB,CAA/C;AAGH;;AAED,SAAO6F,cAAP;AAGH;;AAID,SAASO,kBAAT,CAA4BrE,MAA5B,EAAoCpC,CAApC,EAAuCmB,cAAvC,EAAuD;AACnD;AAIA;AAGA,MAAIuF,eAAe,GAAGtE,MAAM,CAACpC,CAAC,GAAG,CAAL,CAA5B,CARmD,CASnD;AAIA;;AACA,MAAI2C,QAAQ,GAAG+D,eAAe,CAAC/D,QAA/B;AAGA,MAAI5D,OAAO,GAAG2H,eAAe,CAAC/F,KAA9B;AACA,MAAIS,cAAc,GAAGgF,QAAQ,CAACM,eAAe,CAACC,cAAjB,CAA7B;AAEA,MAAIC,YAAY,GAAGR,QAAQ,CAACM,eAAe,CAACG,YAAjB,CAA3B,CApBmD,CAuBnD;AAEJ;;AAGA,MAAIxD,KAAK,GAAClC,cAAc,CAACgC,IAAf,CAAoB,UAAAlB,EAAE;AAAA,WAAEA,EAAE,CAACmB,IAAH,IAASsD,eAAe,CAACG,YAA3B;AAAA,GAAtB,CAAV;;AAEA,MAAGxD,KAAK,IAAEtB,SAAV,EAAoB;AAEpB6E,IAAAA,YAAY,GAACR,QAAQ,CAAC/C,KAAK,CAAC1C,KAAP,CAArB;AAGC,GAnCsD,CAuCnD;AACA;;;AAGA,MAAIgD,YAAY,GAAGxC,cAAc,CAACgC,IAAf,CAAoB,UAAAlB,EAAE;AAAA,WAAIA,EAAE,CAACmB,IAAH,IAAWrE,OAAf;AAAA,GAAtB,CAAnB;AAEA,MAAI+H,aAAa,GAAG,CAApB;AAEA,MAAIC,2BAA2B,GAAG,CAAlC;AAEA,MAAI3B,gBAAgB,GAAGsB,eAAe,CAAC/D,QAAvC,CAjDmD,CAmDnD;AAEA;AACA;;AACA,MAAI+D,eAAe,CAACG,YAAhB,IAAgC9E,SAApC,EAA+C;AAG3C;AACA,QAAI4B,YAAY,CAACrB,IAAb,IAAqB,OAAzB,EAGA;AACIwE,MAAAA,aAAa,GAAGnD,YAAY,CAAChD,KAAb,CAAmBmC,KAAnB,CAAyB,GAAzB,EAA8BxD,MAA9C;AAEA8B,MAAAA,cAAc,GAAG,CAAjB;AACAwF,MAAAA,YAAY,GAAGE,aAAa,GAAG,CAA/B;AAGH,KAVD,CAYA;AAZA,SAaK;AACDA,QAAAA,aAAa,GAAGnD,YAAY,CAAChD,KAAb,CAAmBrB,MAAnC;AACA8B,QAAAA,cAAc,GAAG,CAAjB;AACAwF,QAAAA,YAAY,GAAGE,aAAa,GAAG,CAA/B;AAGH;AAGJ;;AAMD,MAAIE,KAAK,GAAGJ,YAAZ,CAvFmD,CA2FnD;;AAGA,SAAO;AACHG,IAAAA,2BAA2B,EAA3BA,2BADG;AAEHC,IAAAA,KAAK,EAALA,KAFG;AAGH5B,IAAAA,gBAAgB,EAAhBA,gBAHG;AAIHhE,IAAAA,cAAc,EAAdA,cAJG;AAKHuB,IAAAA,QAAQ,EAARA,QALG;AAMH5D,IAAAA,OAAO,EAAPA,OANG;AAOH4E,IAAAA,YAAY,EAAZA;AAPG,GAAP;AAYH,C,CAGD;;;AAEA,SAASsD,kBAAT,CAA4BC,UAA5B,EAAuClH,CAAvC,EAAyCK,CAAzC,EAA2C8G,sBAA3C,EAAkE/E,MAAlE,EAAyEgD,gBAAzE,EAA0FzC,QAA1F,EACA;AAEI,MAAID,KAAK,GAAGwE,UAAU,CAAClH,CAAD,CAAV,CAAcW,KAA1B,CAFJ,CAGI;AACA;;AAEA,MAAI4B,UAAU,GAAG2E,UAAU,CAAClH,CAAD,CAAV,CAAcuC,UAA/B;AAGA,MAAIxD,OAAO,GAAGQ,cAAc,CAACmD,KAAD,CAA5B;AAEA,MAAIE,YAAY,GAAG,EAAnB,CAXJ,CAcI;;AAEA7D,EAAAA,OAAO,GAAGA,OAAO,CAACU,OAAR,CAAgB,GAAhB,EAAqB,EAArB,CAAV;AAIA,MAAIoD,KAAK,GAAG9D,OAAO,CAAC+D,KAAR,CAAc,GAAd,CAAZ,CApBJ,CAyBI;;AACA,MAAI1D,QAAQ,CAACyD,KAAK,CAAC,CAAD,CAAN,CAAZ,EAAwB;AAEpBA,IAAAA,KAAK,GAAGA,KAAK,CAACjB,IAAN,CAAW,GAAX,CAAR,CAFoB,CAGpB;;AAEAiB,IAAAA,KAAK,GAAGA,KAAK,GAAG,GAAhB;AAGAD,IAAAA,YAAY,GAAGC,KAAf,CARoB,CASpB;;AAEAuE,IAAAA,aAAa,GAAGnG,eAAe,CAACsB,UAAD,EAAalC,CAAb,EAAgB8G,sBAAhB,CAA/B;AAIApE,IAAAA,uBAAuB,CAACH,YAAD,EAAeuE,sBAAf,EAAuC,KAAvC,EAA8CC,aAA9C,EAA6DhF,MAA7D,CAAvB;AAKH,GApBD,CAsBA;AACA;AAvBA,OAwBK;AAGD,UAAImB,KAAK,GAAGV,KAAK,CAAC,CAAD,CAAjB,CAHC,CAOD;AACA;;AAEA,UAAIwE,YAAY,GAAG,CAAnB;AAEA,UAAIhE,KAAK,GAAG8D,sBAAsB,CAAChE,IAAvB,CAA4B,UAAAlB,EAAE;AAAA,eAAIA,EAAE,CAACmB,IAAH,IAAWG,KAAf;AAAA,OAA9B,CAAZ;;AAGA,UAAIF,KAAK,IAAItB,SAAb,EAAwB;AAEpBsF,QAAAA,YAAY,GAAGhE,KAAK,CAAC1C,KAArB;AAGH,OALD,MAKO;AAEH0G,QAAAA,YAAY,GAAG1E,QAAf;AACH;;AAIDC,MAAAA,YAAY,GAAGH,kBAAkB,CAACC,KAAD,EAAQ2E,YAAR,CAAjC;AAMH,KAnFL,CAsFI;AACA;;;AAEA,MAAIhF,IAAI,GAAGE,UAAX;AAGAF,EAAAA,IAAI,GAAGA,IAAI,CAACS,KAAL,CAAW,GAAX,EAAgBZ,QAAhB,EAAP;AACAG,EAAAA,IAAI,GAAGA,IAAI,CAACS,KAAL,CAAW,GAAX,EAAgBZ,QAAhB,EAAP;AACAG,EAAAA,IAAI,GAAGA,IAAI,CAACS,KAAL,CAAW,GAAX,EAAgBZ,QAAhB,EAAP;AACAG,EAAAA,IAAI,GAAGA,IAAI,CAACS,KAAL,CAAW,GAAX,EAAgBZ,QAAhB,EAAP;AACAG,EAAAA,IAAI,GAAGA,IAAI,CAACS,KAAL,CAAW,GAAX,CAAP,CAhGJ,CAiGI;AAKA;;AACA,MAAIsE,aAAa,GAAG,EAApB,CAvGJ,CAyGI;;AAGA,MAAI/E,IAAI,CAAChD,QAAL,CAAcwD,KAAK,CAAC,CAAD,CAAnB,KAA2BR,IAAI,CAAC/C,MAAL,GAAc,CAA7C,EAEA;AAGI;AAEA,SAAK,IAAI0G,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGzD,UAAU,CAACjD,MAA/B,EAAuC0G,CAAC,EAAxC,EAEA;AAEI,UAAIzD,UAAU,CAACyD,CAAD,CAAV,IAAiBnD,KAAK,CAAC,CAAD,CAAtB,IAA6B,CAAE,YAAY3D,IAAZ,CAAiBqD,UAAU,CAACyD,CAAC,GAAG,CAAL,CAA3B,CAAnC,EAEA;AAII;AACAoB,QAAAA,aAAa,GAAGA,aAAa,GAAGzE,QAAhC;AAEH,OATD,MASO;AAEHyE,QAAAA,aAAa,GAAGA,aAAa,GAAG7E,UAAU,CAACyD,CAAD,CAA1C;AAIH;AAIJ;;AAED,QAAIsB,MAAM,GAAG,KAAb,CA9BJ,CA+BI;;AAEAF,IAAAA,aAAa,GAAGnG,eAAe,CAACmG,aAAD,EAAgB/G,CAAhB,EAAmB8G,sBAAnB,CAA/B,CAjCJ,CAsCI;;AAEApE,IAAAA,uBAAuB,CAACH,YAAD,EAAeuE,sBAAf,EAAuCG,MAAvC,EAA+CF,aAA/C,EAA8DhF,MAA9D,CAAvB;AAKH,GA3JL,CA8JI;;;AACA,MAAIgD,gBAAgB,IAAIvC,KAAK,CAAC,CAAD,CAA7B,EAAkC;AAI9B;AAEA,QAAIA,KAAK,CAAC,CAAD,CAAL,IAAYN,UAAhB,EAA4B;AAGxB,UAAII,SAAQ,GAAG,IAAf;AAEAI,MAAAA,uBAAuB,CAACH,YAAD,EAAeuE,sBAAf,EAAuCxE,SAAvC,EAAiDJ,UAAjD,EAA6DH,MAA7D,CAAvB;AAIH,KAf6B,CAiB9B;;;AAGA,QAAI,CAACC,IAAI,CAAChD,QAAL,CAAcwD,KAAK,CAAC,CAAD,CAAnB,CAAD,IAA4BuC,gBAAgB,IAAIvC,KAAK,CAAC,CAAD,CAAzD,EAA8D;AAI1D,UAAIF,UAAQ,GAAG,KAAf;AAEAJ,MAAAA,UAAU,GAAGtB,eAAe,CAACsB,UAAD,EAAalC,CAAb,EAAgB8G,sBAAhB,CAA5B,CAN0D,CAO1D;AAEA;;AAEApE,MAAAA,uBAAuB,CAACH,YAAD,EAAeuE,sBAAf,EAAuCxE,UAAvC,EAAiDJ,UAAjD,EAA6DH,MAA7D,CAAvB;AAIH,KAnC6B,CAwC9B;;AAIH,GA5CD,CA+CA;AA/CA,OAgDK;AAED,UAAIO,UAAQ,GAAG,KAAf;AAEAJ,MAAAA,UAAU,GAAGtB,eAAe,CAACsB,UAAD,EAAalC,CAAb,EAAgB8G,sBAAhB,CAA5B,CAJC,CAKD;AAEA;;AAEApE,MAAAA,uBAAuB,CAACH,YAAD,EAAeuE,sBAAf,EAAuCxE,UAAvC,EAAiDJ,UAAjD,EAA6DH,MAA7D,CAAvB;AAKH;AAOJ;;AAKD,SACIvC,KADJ,EAEI4G,kBAFJ,EAGIlG,iBAHJ,EAII2E,UAJJ,EAKIhB,YALJ,EAMIO,gBANJ,EAOIU,oBAPJ,EAQI3C,sBARJ,EASIL,sBATJ,EAUIlC,gBAVJ,EAWIgG,iBAXJ,EAYIzC,iBAZJ,EAaIvC,eAbJ,EAcIL,oBAdJ,EAeI6B,kBAfJ,EAgBIM,uBAhBJ,EAiBIxD,cAjBJ,EAkBImE,0BAlBJ,EAmBID,uBAnBJ,EAoBIhC,kBApBJ,EAqBIC,SArBJ,EAsBIsC,8BAtBJ,EAuBIiD,kBAvBJ","sourcesContent":["import {\n    Number\n} from \"core-js\"\n\n\n\n\n//ANCHOR - Important functions to be used while parsing\n\nfunction isEmptyStringorChar(){\n\n\n     \n    return function(element){\nif(element=='\"'|| element==\"'\" || element=='*'||element=='@'||element==\"#\"||element.charAt(0)==\"'\"||element.charAt(0)=='\"')\n\n\n{\n\nreturn true\n\n}\n    }\n\n\n}\n\n\nfunction isPureEval(element){\n\n\n    if(/^([-+]?[0-9]*\\.?[0-9]+[\\/\\+\\-\\*])+([-+]?[0-9]*\\.?[0-9]+)*$/gm.test(element))\n    {\n    \n    return true\n    \n    }\n}\n    \n                \n\nfunction isCalculation(element) {\n\n    if (!isNumber(element)) {\n        \n\n        if ((element.includes(\"+\") || element.includes(\"%\") || element.includes(\"-\") || element.includes(\"*\") || element.includes(\"/\")) && ((element.includes('(') && element.includes(')')) || (!element.includes('(') && !element.includes(')'))) && element.charAt(element.length - 1) != '+') {\n\n            return true\n\n\n        }\n    }\n}\n\nfunction RemoveBrackets(element) {\n\n    let a = element.replace('(', '')\n    let b = a.replace(')', '')\n    let c = b.replace('}', '')\n    let d = c.replace('{', '')\n\n    return d\n\n}\n\nfunction Count(item, element) {\n\n    let count = 0\n\n\n    for (let i = 0; i < element.length; i++) {\n\n        if (element.charAt(i) == item && element.charAt(i + 1) == item) {\n\n            count += 1\n\n\n\n        }\n\n\n\n    }\n\n    return count;\n\n\n}\n\n\nfunction isArrayOperation(element) {\n\n\n\n    //To find Patterns like Array[2], Array[index] etc\n\n    element = RemoveBrackets(element)\n\n    if (element.charAt(element.length - 1) == ']' && element.includes('[') && element.charAt(0) != '[') {\n\n\n        return true\n    }\n\n}\n\n\nfunction FindConditionValue(element)\n\n\n\n{\n\n\n    if (element.includes('>') || element.includes('<') || element.includes('==') || element.includes('!='))\n\n    {\n\n\n        element = element.replace(/' '/g, '')\n        \n\n\n\n    }\n\n\n\n\n    // \n\n    //get index of operation from updated tokens, as a reference\n\n\n\n    var StringVar = [] // here StrVar values will get pushed\n    var StrVar = '' // its used to read var values of any type (anna,a,bad,x etc.) and push it to StringVar\n\n\n\n    for (let j = 0; j < element.length; j++) {\n\n\n\n\n        // find if element[j] is alphabet\n\n        if (/^[A-Z]+$/i.test(element[j]) || (element[j] == '[' || element[j] == ']') || isNumber(element[j])) {\n\n\n\n            StrVar = StrVar + element[j] //keep on pushing for long variable names as strings e.g anna,bad\n\n        }\n\n        if (element[j] == ')' || element[j] == '(' ) {\n\n\n            StringVar.push(element[j])\n\n        }\n\n\n        //to solve [\"Age \"] into [\"Age\"], so that it can correctly find its value in updated_tokens⁄\n\n        if (element[j] == ' ' && element[j + 1] != '+') {\n            StrVar = StrVar + element[j]\n\n            ////////\n\n\n        }\n\n\n\n        //for checking equivalency\n        if ((element[j] == '=' && element[j + 1] == '=')) {\n\n            StringVar.push(StrVar)\n            StringVar.push(element[j] + element[j + 1])\n            StrVar = ''\n            ////////\n\n\n\n        }\n        if ((element[j] == '!' && element[j + 1] == '=')) {\n\n            StringVar.push(StrVar)\n            \n            StringVar.push(element[j] + element[j + 1])\n            StrVar = ''\n            ////////\n\n\n\n        }\n        if (element[j] == \"?\" || element[j] == \"|\" || element[j] == \";\" || element[j] == \"&\" || element[j] == \"^\" || element[j] == \"%\" ||element[j] == \"$\" ||element[j] == \"#\" ||element[j] == \"@\" ||element[j] == \"!\" ||element[j] == \":\" ||element[j] == \"+\" || element[j] == \",\" || element[j] == \"%\"  || element[j] == \"-\" || element[j + 1] == ')' || element[j] == \"/\" || element[j] == \"*\" || element[j] == '>' || element[j] == '<') {\n\n\n\n\n            StringVar.push(StrVar) //push whatever string we have got because it's a string now, cant push operators with it\n\n            //finding the calculations that required brackets and adding them\n\n            if (element[j + 1] != ')') {\n\n                StringVar.push(element[j]) // fixing the bias\n\n            }\n\n\n\n            StrVar = '' // emptyig the StrVar for next variable\n\n\n        }\n        if (element[j + 1] == null) {\n\n            StringVar.push(StrVar) //fixing bias for last element\n\n            // //////\n\n\n        }\n\n\n\n    }\n\n    //\n    return StringVar\n    \n    \n\n\n\n}\n\nfunction getLoopIndexStart(mutable_tokens, j, check, setIndex)\n\n{\n\n\n    while (mutable_tokens[j].value != check)\n\n\n\n    {\n\n\n        if (mutable_tokens[j + 1].value == check) {\n\n\n\n            setIndex = j + 1\n\n\n        }\n\n\n\n        j++;\n\n    }\n    return setIndex\n\n\n\n}\n\n\nfunction handlemultConditions(element) {\n\n\n\n    for (let i = 0; i < element.length; i++) {\n\n\n\n        if ((element.charAt(i) == '&') || (element.charAt(i) == '|'))\n\n\n        {\n\n\n            let condition = element.substring(0, i + 2)\n\n            let SweepedElement = element.replace(condition, \"\")\n            let operator = ''\n\n\n\n            if ((element.charAt(i) == '&')) {\n                condition = condition.replace('&&', '')\n                operator = '&&'\n\n            } else if ((element.charAt(i) == '|')) {\n                condition = condition.replace('||', '')\n                operator = '||'\n\n            }\n\n\n            return {\n                SweepedElement,\n                condition,\n                operator\n            }\n\n\n\n\n            break;\n\n        }\n\n\n\n\n    }\n\n\n}\n\n\n\n\nfunction CalculateValues(calculation, j, updated_tokens, IterationStart, global)\n\n\n\n\n\n{\n    //\n\n    var flag=0\n    var error=''\n    var calculationArray = SplitElementsArray(calculation, j)\n    \n\n    var StringVar = SetValues(calculationArray, updated_tokens)\n    \n    let joinStringVar=StringVar.join('')\n\n    let NewStringVar=''\n    if(isNumber(joinStringVar.charAt(0))==true)\n    {\n        NewStringVar=eval(joinStringVar)\n\n    }\n    else if(isNumber(joinStringVar.charAt(0))==undefined)\n    {\n\n        StringVar.forEach(el=>{\n\n            if(el!='+')\n            {\n            el=el.toString()\n            NewStringVar=NewStringVar+el\n            }\n            \n\n        })\n        \n\n\n        \n    }\n    else{\n\n        StringVar=StringVar\n\n    }\n\n   \n\n\n        return (StringVar.length > 1 ? NewStringVar : StringVar)\n\n   \n\n\n\n}\n\n\nfunction PushSetArrayIndexValue(value, tokens, data, i) {\n\n\n\n\n    tokens.push({\n        type: \"SetArrayIndexValue\",\n        value: value,\n        ValueToSet: data[i + 2] //skipping =\n    });\n\n}\n\nfunction PushGetArrayIndexValue(value, tokens, data, i) {\n\n\n\n\n    tokens.push({\n        type: \"GetArrayIndexValue\",\n        value: value,\n    });\n\n}\n\n\nfunction CreateArrayElement(Value, iterator) {\n\n\n    let ArrayElement = RemoveBrackets(Value);\n\n    //Seprating out index identifier. xyz from Array[xyz]\n    let element = ArrayElement\n    element = element.replace(']', '')\n\n\n    let Split = element.split('[')\n    //\n\n\n\n    Split[1] = iterator\n\n\n\n\n    Split = Split.join('[')\n    //\n\n    Split = Split + ']'\n    ArrayElement = Split\n\n\n    ArrayElement = ArrayElement.replace(/' '/g, '')\n\n\n    return ArrayElement\n\n}\n\n\n//This function is used to get array or string elements. e.g Array[2], String[5] \n//Heavily used in Forloop module\n\n\n\nfunction SetArrayorStringElement(ArrayElement, updated_tokens, iterator, NewValue, tokens) {\n    //\n\n\n    ArrayElement = ArrayElement.replace(']', '')\n\n\n    let Split = ArrayElement.split('[')\n\n    let indexCollected = Split[1]\n\n\n    let Element = updated_tokens.find(el => el.name == NewValue)\n\n    //If element is an assigned variable. Find the value and set it.\n\n    if (Element) {\n        if (isCalculation(NewValue)) {\n\n            // This is to set x= y*100, Array[i]= x+ageone. \n\n            let token = tokens.find(el => el.value == NewValue)\n            let j = tokens.indexOf(token) - 1\n\n\n            let value = CalculateValues(NewValue, j, updated_tokens)\n\n            NewValue = value\n\n        }\n\n        NewValue = Element.value\n\n    }\n\n    if (iterator == true) {\n\n        //for Array[a]=a\n\n\n        if (isCalculation(NewValue)) {\n\n\n        } else {\n\n            NewValue = indexCollected\n\n        }\n    }\n\n    //if fresh newvalue is foumd. the one which doesnt yet exist in the program, then run this.\n    else {\n\n        NewValue = NewValue\n    }\n\n\n\n\n    let token = updated_tokens.find(el => el.name == Split[0])\n\n    let index = updated_tokens.indexOf(token)\n\n    //updated_tokens values will also get updated thrugh this reference\n    let value = token.value\n\n    value = value.toString()\n\n    value = value.replace(']', '')\n    value = value.replace('[', '')\n    value = value.split(',')\n\n\n\n\n    if (iterator == true) {\n\n        //This is for Array[a]=a\n\n        value[indexCollected] = indexCollected\n\n\n    } else {\n\n        //Run when iterator is not needed. iterator is present in ArrayEleMENT ALREADY. This is for Array[i]='Swanand'\n\n        value[indexCollected] = NewValue\n\n\n\n\n    }\n\n    //converting array back into the string representation of it for better printabillity\n\n    updated_tokens[index].value = '[' + value.toString() + ']'\n\n\n\n\n}\n\n\nfunction PrintArrayElement(ArrayElement, updated_tokens)\n\n{\n\n    ArrayElement = ArrayElement.replace(']', '')\n\n    let Split = ArrayElement.split('[')\n\n    let indexCollected = Split[1]\n\n    let token = updated_tokens.find(el => el.name == Split[0])\n\n\n\n    let value = token.value\n    value = value.replace(']', '')\n    value = value.replace('[', '')\n    value = value.split(',')\n\n\n    return value[indexCollected]\n\n\n\n\n}\n\nfunction GetArrayorStringElement(element, updated_tokens, NewValue, flag) {\n\n    element = element.replace(']', '')\n\n    let Split = element.split('[')\n\n    let indexCollected = Split[1]\n\n    if (isNumber(indexCollected)) {\n\n\n        let token = updated_tokens.find(el => el.name == Split[0])\n        \n\n\n        let index = updated_tokens.indexOf(token)\n\n        let value = token.value.toString()\n        \n\n\n\n\n        if (token.type == 'Array') {\n\n\n            value = value.replace(']', '')\n            value = value.replace('[', '')\n            value = value.split(',')\n\n\n            if (NewValue != undefined) {\n\n                if (!isNumber(NewValue)) {\n\n                    NewValue = NewValue.replace(/\"/g, '')\n                    NewValue = NewValue.replace(/“/g, '')\n                    NewValue = NewValue.replace(/'/g, '')\n                    NewValue = NewValue.replace(/‘/g, '')\n                } else {\n\n                    NewValue = NewValue\n                }\n\n\n\n                value[indexCollected] = NewValue\n\n                updated_tokens[index].value = value\n\n\n\n\n            } else {\n\n\n                value = value[indexCollected];\n                //////\n                //////\n\n\n            }\n\n\n\n\n        }\n\n        else if (token.type == 'string' || token.type!='Array' ) {\n\n\n\n            value = value.charAt(indexCollected);\n\n\n\n        }\n\n\n\n\n        return value\n    }\n\n\n\n}\n\n\nfunction ForLoopArrayorStringOutput(elementValue, iterator, updated_tokens, global)\n\n{\n\n\n    let CurrentElement = ''\n\n\n    CurrentElement = elementValue.name + '[' + iterator + ']'\n    //Foundvalue is decided in the function depending upon the type. \n    //if it's array run array[2], if its string run string.charAt(2)\n    let FoundValue = GetArrayorStringElement(CurrentElement, updated_tokens)\n\n\n    global.output = global.output + FoundValue + \"\\n\";\n\n\n\n}\n\n\n\n\nfunction isNumber(element) {\n\n\n    if (/^[0-9]*$/gm.test(element)) {\n        return true;\n\n    }\n};\n\n\n\nfunction SplitElementsArray(element, i)\n\n\n\n{\n\n\n\n    //removing the \"(\"\" and \")\"\n    // element = RemoveBrackets(element)\n\n    /*seperate execution\n    if(element.includes('&&') || element.includes('||'))\n        {\n\n            \n\n            element=element.replace(/ /g,'')\n\n\n\n            \n\n           let ConditionArray=element.split('&&');\n           let ConditionArraywithValues=[]\n           \n\n           ConditionArray.forEach((element,i)=>{\n               \n\n\n           ConditionArraywithValues.push(FindConditionValue(element))   \n\n\n           })\n\n         return ConditionArraywithValues\n\n        }\n    */\n\n\n\n\n    return FindConditionValue(element)\n\n\n\n\n}\n\n\n\nfunction SetValues(StringVar, updated_tokens)\n\n\n\n{\n\n\n    StringVar.forEach((el, i) =>\n\n        {\n\n            el = el.replace(/\\ /g, '');\n\n\n\n            if (el.charAt(el.length - 1) == ']') {\n                let ArrayElementValue = GetArrayorStringElement(el, updated_tokens)\n\n\n                ArrayElementValue = ArrayElementValue.replace(/['\"]+/g, '')\n\n                StringVar[i] = ArrayElementValue\n\n\n\n\n            } //finding variable values here \n\n\n            let token = updated_tokens.find(element => element.name == el);\n\n            ////////\n\n            // //////\n\n\n\n            if (token != undefined) {\n\n                // if exists set it's value \n                StringVar[i] = token.value\n\n\n\n            }\n\n            // //////\n\n\n        })\n\n\n    return StringVar\n\n\n\n\n}\n\n\n\n\n//ANCHOR \n//Now we hae converted found \"anna+bad-d\" into [anna,+,bad,-,d]\n\n//Now lets run a loops on it to convert into [5,+,6,-,7]\n\n//global is important\n//Updated_tokens is updated by replacing \"value:anna+bad-d\" with \"value:5+6-7\". \n//after eval function it will be set as \"value:2\"\n\n\nfunction UpdateUpdated_tokenswithValues(payload, i, updated_tokens) {\n\n    let StringVar = payload\n\n\n\n\n    //run if it's arithmetic operation like [\"5+6-7\"]\n    if (isNumber(StringVar[0])) {\n\n\n        let value = eval(StringVar.join(''))\n\n        return value\n\n    } else if (StringVar[1] == '==') {\n\n        let a = StringVar[0].toString()\n        let b = StringVar[2].toString()\n\n        let value = eval(a == b)\n\n        return value\n\n\n    }\n\n\n\n    //run if it's String operation like [\"swanand kadam\",\"+\", \"is goat\"]\n    else {\n\n\n\n\n        if (StringVar.includes(\"+\")) {\n\n            StringVar[StringVar.indexOf(\"+\")] = \" \"\n\n\n        }\n\n\n\n\n        let value = StringVar.join(\"\")\n\n\n\n        return value\n    }\n\n}\n\n\n//Handle Blocks is a function which takes care of nested block by taking care of nested { and } brackets\n//it uses the stack to push and pop brackets to accurately identify start and the end of the block\nfunction HandleBlocks(mutable_tokens, j, StoreResult) {\n\n\n    //StoreResult is used to push data into it in case of forloop or while loop conetext\n    //for a normal block like conditional block it might not need to be used yet\n\n\n\n    let ArrayBrackets = []\n\n\n    while (true)\n\n\n    {\n\n\n\n        if (mutable_tokens[j].value == '{') {\n\n            ArrayBrackets.push({\n                type: '{',\n                index: j\n            })\n            //\n\n            if (StoreResult != undefined) {\n\n                StoreResult.push(mutable_tokens[j])\n            }\n\n\n        } else if (mutable_tokens[j].value == '}') {\n\n            //As soon as open bracket is found, pop the last arraybracket stack value\n            //that's the match\n\n            let x = ArrayBrackets.pop()\n            //\n            if (StoreResult != undefined) {\n\n                StoreResult.push(mutable_tokens[j])\n\n\n                mutable_tokens[x.index].startIndex = x.index\n                mutable_tokens[x.index].EndIndex = j\n            }\n\n            //set start and end index value for that { } block\n            mutable_tokens[x.index].startIndex = x.index\n            mutable_tokens[x.index].EndIndex = j\n            if (ArrayBrackets.length == 0) {\n\n                //As soon as stack is empty we have finished our last lblock\n\n\n                break;\n\n            }\n\n\n\n\n        } else {\n\n            if (StoreResult != undefined) {\n\n                StoreResult.push(mutable_tokens[j])\n            }\n\n\n        }\n\n        j++;\n\n\n\n\n    }\n\n\n    return {\n        StoreResult,\n        j\n    }\n\n}\n\n\nfunction HandleConditions(sourcedata, i, updated_tokens) {\n\n    let element = sourcedata[i].value\n    //\n    //\n\n    //let token= updated_tokens.find(el=> el.originalvalue==sourcedata[i].value)\n\n\n\n\n    let SplitArray = SplitElementsArray(element, i)\n\n\n    let Values = SetValues(SplitArray, updated_tokens)\n\n\n    let ForLoopConditionValue = UpdateUpdated_tokenswithValues(Values, updated_tokens, i)\n\n\n\n\n    if (ForLoopConditionValue == false) {\n\n\n\n\n        while (sourcedata[i + 1].value != '}')\n\n\n\n\n        {\n\n\n\n            // \n            //tokens.splice(i+1, 1);\n\n            //No need to delete tokens, we are iust skipping over the values so that they won't be printed or run\n            //\n            i++;\n\n\n\n\n        }\n\n\n        // \n        return i\n\n\n\n    }\n\n\n\n\n}\n\n\n\nfunction SplitandJoin(array, output, element) {\n\n    array[1] = output\n\n    let Joinarray = array.join('[') + ']'\n    element = Joinarray\n\n    return element\n\n\n}\n\nvar AccumulateValue = ''\n\nfunction ResetValue() {\n\n    AccumulateValue = ''\n\n}\n\n\n\nfunction AssignorUpdateValues(sourcedata, i, updated_tokens, iterator, OriginalIterator,global) {\n    //\n\n\n    let variable = sourcedata[i - 1].value\n    \n    \n\n    let variableType = sourcedata[i - 1].type\n    //\n    let varvalue = sourcedata[i + 1].value\n    \n    \n\n    if(varvalue=='\"'||varvalue==\"'\")\n    {\n\n\n\n        varvalue=' '\n    }\n    \n    \n    if (varvalue.includes('दुहराओ') || varvalue.includes('रचना') || varvalue.includes('अन्यथा') || varvalue.includes('इनपुट') || varvalue.includes('पुश') || varvalue.includes('प्रिंट') || varvalue.includes('अगर')) \n    \n    {\n\n        let error= 'Assignment error in ' + '\"' + variable +' = '+ '\"' \n\n\nglobal.error.push(error)\n\n\n    }\n    \n\n\n\n    let varvalueType = sourcedata[i + 1].type\n\n    let x = updated_tokens.find((el, i) => el.name == varvalue)\n\n    \n    if(!isNumber(varvalue)&& varvalueType=='value' && x==undefined && varvalue!=' ' && !isEmptyStringorChar(varvalue))\n    \n    \n    {\n\n       \n\n            global.error.push('Cannot set ' + variable + ' to undefined ' + ': ' + varvalue + ' is undefined ' )\n\n\n\n\n    }\n\n\n   else if(varvalue.includes('संख्या'))\n   \n   \n{\n\n  let Split=varvalue.split('.')\n  console.log('varvalue: ', varvalue);\n  \n  let item=Split[0]\n \n  let Itemvalue=updated_tokens.find(el=>el.name==item).value\n  \n  \n  console.log(typeof Itemvalue);\n\n  if(Itemvalue.includes('['))\n  {\n\n    Itemvalue= Itemvalue.toString().split(',')\n\n  }\n  else if(Itemvalue.length==1){\n      \nItemvalue=Itemvalue\n\n\n  }\n\n  else{\n\n    Itemvalue= Itemvalue.toString()\n\n  }\n\n\nlet ItemvalueLength=Itemvalue.length\n\n\nupdated_tokens.push({\n    name: variable,\n\n    value: ItemvalueLength,\n\n\n    identifier: i,\n    type: 'CalLength'\n})\n\n\n    \n}\n\n    //\n\n    //\n\n    //this runs only for operations like x=Numbers[a]\n\n\n   else if (varvalueType == 'GetArrayIndexValue')\n\n    {\n\n        let n = updated_tokens.find((el, i) => el.name == variable)\n\n        let index = updated_tokens.indexOf(n)\n\n        //Numbers[a ] Numbers [3]\n\n\n        //Iterator is used only when we are looping over provided index not for the index that needs to be calculated\n        let element = varvalue.replace(']', '')\n\n        if(element.includes('+'))\n        {\n\n            var Split = element.split('+')\n            \n        }\n\n        else  if(element.includes('-'))\n        {\n\n            var Split = element.split('-')\n            \n            \n        }\n\n\n\n        var flag = false\n\n\n        //For operations like Name=Name+ Array[i]\n\n        if (element.includes('+') ||element.includes('-')  && !Split[0].includes('[')) {\n\n\n            flag = true\n            \n\n\n\n\n            let token = updated_tokens.find(el => el.name == Split[0])\n            let index = updated_tokens.indexOf(token)\n\n\n            let ArrayItem = Split[1].split('[')\n            \n\n\n\n\n            let output = CalculateValues(ArrayItem[1], i, updated_tokens)\n            \n\n\n\n            let ArrayElement = SplitandJoin(ArrayItem, output, element)\n            \n\n\n\n\n            //Get Numbers[3] value and now set it to our variable x\n            let value = GetArrayorStringElement(ArrayElement, updated_tokens)\n            \n            AccumulateValue += value\n\n            updated_tokens[index].value = AccumulateValue\n\n            //\n\n\n\n        } else {\n\n            var Split = element.split('[')\n            \n\n\n\n        }\n\n\n\n        //for operations like x= Array[i+1] etc\n\n\n\n\n        if ((Split[1].includes('-') || Split[1].includes('+')) && !Split[1].includes('[')) {\n\n            let output = CalculateValues(Split[1], i, updated_tokens)\n\n\n            element = SplitandJoin(Split, output, element)\n\n\n        }\n\n\n        let token = updated_tokens.find(el => el.name == Split[1])\n        \n        \n        \n\n        //for operations like Array[Age]. Here index is an already defined variable\n        if (token != undefined && OriginalIterator != Split[1] && token.name!='')\n\n        {\n\n          \n            element = SplitandJoin(Split, token.value, element)\n            \n            \n\n\n        }\n\n        //for operations like Array[i]: Looping over original index value\n        else if (OriginalIterator == Split[1]) {\n\n\n            element = SplitandJoin(Split, iterator, element)\n\n        }\n\n\n        let ArrayElement = element\n        \n        \n\n\n\n\n        //Get Numbers[3] value and now set it to our variable x\n        let value = GetArrayorStringElement(ArrayElement, updated_tokens)\n        \n\n\n        if (n != undefined && flag == false) {\n\n\n            updated_tokens[index].value = value\n\n\n        } else if (flag == false) {\n\n\n            updated_tokens.push({\n                name: variable,\n\n                value: value,\n\n\n                identifier: i,\n                type: sourcedata[i + 1].type\n            })\n        }\n\n    } else {\n\n\n\n        let m = updated_tokens.find((el, i) => el.name == varvalue)\n        \n        \n        \n        \n        \n\n\n\n        if (m != undefined) {\n\n\n\n            varvalue = m.value\n            \n            // \n\n\n        }\n\n        \n\n\n        let n = updated_tokens.find((el, i) => el.name == variable)\n        \n        \n\n\n\n        if (n == undefined) {\n\n\n\n\n            //to check if the assigned value needs to be calculated. this is futher diveded in two types\n\n\n\n            if (isCalculation(varvalue))\n            \n            \n\n            {\n\n\n\n                //type 1- Age= 2020-2000 \n                if (isPureEval(varvalue))\n                \n\n\n\n                {\n\n                    let value = eval(varvalue)\n                    \n                    \n                    \n\n                    //write function for this, so repeatable\n                    updated_tokens.push({\n                        name: variable,\n\n                        value: value,\n\n                        identifier: i,\n                        type: sourcedata[i + 1].type\n                    })\n\n\n                }\n\n                //type 2- X= ageone+agetwo\n                else {\n\n                    //performing the calculation\n\n\n                    let value = CalculateValues(varvalue, i, updated_tokens,global)\n                    \n                    \n                    \n                    \n                    \n                    \n\n\n                    updated_tokens.push({\n                        name: variable,\n\n                        value: value,\n\n                        identifier: i,\n                        type: sourcedata[i + 1].type\n                    })\n\n\n\n                }\n\n\n            }\n\n\n            //if there is no need to calculate, push values as it is\n            else if(!isCalculation(varvalue)) {\n                \n                \n\n\n\n                updated_tokens.push({\n                    name: variable,\n\n                    value: varvalue,\n\n                    identifier: i,\n                    type: sourcedata[i + 1].type\n                })\n\n\n            }\n\n\n        }\n\n\n\n\n        //if it's already assgined, reassign it with updated value\n        else {\n\n\n\n\n            varvalue = varvalue.toString()\n            \n\n\n\n            if (varvalue.includes('-') || varvalue.includes('%')  || varvalue.includes('+') || varvalue.includes('/') || varvalue.includes('*')) {\n\n\n                // \n\n\n\n                let NewValue = CalculateValues(varvalue, i, updated_tokens,global)\n                \n                \n                \n                \n                \n                \n\n                n.value = NewValue\n\n            } else {\n\n\n                let index=updated_tokens.indexOf(n)\n                updated_tokens[index].value=varvalue\n\n\n            }\n\n\n\n\n        }\n\n\n    }\n\n\n    // \n\n\n}\n\n\n\n\nfunction GetConditionValue(element, updated_tokens, j) {\n\n\n    var ConditionValue = false\n\n    if (element.includes('&&') || element.includes('||')) {\n\n\n\n        let MultConditionsCount = parseInt(Count('&', element)) + parseInt(Count('|', element))\n        \n\n\n\n        //this will be our final values\n        //converted as true&&false&&true||true\n        let BuiltMultConditonWithValues = ''\n        let LastResult = {}\n\n\n        //running for loop on original condition to calculates each individual condition and adding its value in BuiltMultConditonWithValues\n\n        for (let i = 0; i <= MultConditionsCount; i++)\n\n        {\n\n\n\n\n            if (i == MultConditionsCount) {\n\n\n\n                let condition = LastResult.SweepedElement\n                condition = condition.replace(/ /g, '')\n\n\n                let SplitArray = SplitElementsArray(condition, j)\n\n                let Values = SetValues(SplitArray, updated_tokens)\n                \n\n\n                ConditionValue = UpdateUpdated_tokenswithValues(Values, updated_tokens, j)\n\n\n\n\n                BuiltMultConditonWithValues = BuiltMultConditonWithValues + ConditionValue\n\n\n            } else {\n\n\n                let result = handlemultConditions(element)\n\n                LastResult = result\n\n\n                element = result.SweepedElement\n                let condition = result.condition\n                condition = condition.replace(/ /g, '')\n\n\n\n\n                let SplitArray = SplitElementsArray(condition, j)\n                \n\n                //\n\n\n\n                let Values = SetValues(SplitArray, updated_tokens)\n                // \n\n\n                ConditionValue = UpdateUpdated_tokenswithValues(Values, updated_tokens, j)\n\n\n\n\n                BuiltMultConditonWithValues = BuiltMultConditonWithValues + ConditionValue + result.operator\n                \n\n\n\n            }\n\n\n        }\n\n\n        //setting the final condition value in cases like अगर (ageone==10 && AverageAge<1000 && agetwo>100 || ageone==10) \n        \n        ConditionValue = eval(BuiltMultConditonWithValues);\n        \n        \n\n\n\n\n    } else {\n\n        //let token= updated_tokens.find(el=> el.originalvalue==mutable_tokens[j].value)\n\n        let SplitArray = SplitElementsArray(element, j)\n\n\n\n\n        let Values = SetValues(SplitArray, updated_tokens)\n        Values = Values.filter(function(item) {\n\n            return item !== \"\"\n        })\n\n\n\n        //Setting the final condition value in cases like अगर (ageone==10) \n\n        ConditionValue = UpdateUpdated_tokenswithValues(Values, updated_tokens, j)\n\n\n    }\n\n    return ConditionValue\n\n\n}\n\n\n\nfunction ForLoopSetMetadata(tokens, i, updated_tokens) {\n    //\n\n\n\n    //Getting evry information about for loop \n\n\n    var ForLoopMetaData = tokens[i + 1]\n    // \n\n\n\n    //Splitting the forloopmetadat values individually\n    var iterator = ForLoopMetaData.iterator\n\n\n    var element = ForLoopMetaData.value\n    var IterationStart = parseInt(ForLoopMetaData.iterationStart)\n\n    var IterationEnd = parseInt(ForLoopMetaData.iterationEnd)\n\n\n    //pushing index \n\n//checking if iteration end is an predefined variable\n\n\nlet token=updated_tokens.find(el=>el.name==ForLoopMetaData.iterationEnd)\n\nif(token!=undefined){\n\nIterationEnd=parseInt(token.value)\n\n\n}\n    \n\n    \n    // var ForLoopSourcedata = ForLoopMetaData.ForLoopSourcedata\n    //\n\n\n    var elementValue = updated_tokens.find(el => el.name == element)\n\n    var elementLength = 0\n\n    var ForLoopSourcedataIndexStart = 0\n\n    var OriginalIterator = ForLoopMetaData.iterator\n\n    //\n\n    // Run if start and end parameters are not given e.g दुहराओ a को  Name मे \n    // This is ran just to get Start and End parameters as they are not provided\n    if (ForLoopMetaData.iterationEnd == undefined) {\n\n\n        //run if element is array\n        if (elementValue.type == 'Array')\n\n\n        {\n            elementLength = elementValue.value.split(',').length\n\n            IterationStart = 0\n            IterationEnd = elementLength - 1\n\n\n        }\n\n        //run if element is String\n        else {\n            elementLength = elementValue.value.length\n            IterationStart = 0\n            IterationEnd = elementLength - 1\n\n\n        }\n\n\n    }\n\n\n\n\n\n    var Cycle = IterationEnd\n    \n\n\n    //\n\n\n    return {\n        ForLoopSourcedataIndexStart,\n        Cycle,\n        OriginalIterator,\n        IterationStart,\n        iterator,\n        element,\n        elementValue\n    }\n\n\n\n}\n\n\n//To resolve operations like Array[a]=a+2 in loops and in plain context\n\nfunction SetArrayIndexValue(SourceData,i,j,CompleteTokenValueList,tokens,OriginalIterator,iterator)\n{\n\n    let Value = SourceData[i].value\n    //\n    //                              \n\n    let ValueToSet = SourceData[i].ValueToSet\n    \n\n    let element = RemoveBrackets(Value);\n\n    var ArrayElement = ''\n\n\n    //Seprating out index identifier. xyz from Array[xyz]\n\n    element = element.replace(']', '')\n    \n\n\n    let Split = element.split('[')\n    \n\n\n\n    // run if we need to set direct Array element value. like Array[2]= xyx                    \n    if (isNumber(Split[1])) {\n\n        Split = Split.join('[')\n        //\n\n        Split = Split + ']'\n\n\n        ArrayElement = Split\n        // \n\n        NewValueToSet = CalculateValues(ValueToSet, j, CompleteTokenValueList)\n\n\n\n        SetArrayorStringElement(ArrayElement, CompleteTokenValueList, false, NewValueToSet, tokens)\n\n\n\n\n    }\n\n    // run if we need to dynamically set Array element value. like Array[i]= xyx\n    //CreateArrayElement function will create dynamic Array values. like Array[0], Array[1] etc.                    \n    else {\n\n\n        let index = Split[1]\n        \n\n\n        // setting iterator as per user input \n        //for iterator like count=count + 1, Array[count]\n\n        let newInterator = 0\n        \n        let token = CompleteTokenValueList.find(el => el.name == index)\n        \n\n        if (token != undefined) {\n\n            newInterator = token.value\n            \n\n        } else {\n\n            newInterator = iterator\n        }\n\n\n\n        ArrayElement = CreateArrayElement(Value, newInterator)\n        \n\n\n\n\n    }\n\n\n    // this code is written to find operations like Array[a]= a*100+age*a. notice a\n    //find a way to simplify this in long term\n\n    let data = ValueToSet\n\n\n    data = data.split('*').toString();\n    data = data.split('+').toString();\n    data = data.split('-').toString();\n    data = data.split('/').toString();\n    data = data.split(',')\n    //\n\n\n\n\n    //building a new value to convert a*100+age*a into 5*100+age*a and then sending it to CalculateValues()\n    let NewValueToSet = ''\n\n    // \n\n\n    if (data.includes(Split[1]) && data.length > 1)\n\n    {\n\n\n        //we have operations like Array[a]= a*100+age*a. notice a\n\n        for (let m = 0; m < ValueToSet.length; m++)\n\n        {\n\n            if (ValueToSet[m] == Split[1] && !(/^[a-z]+$/i.test(ValueToSet[m + 1])))\n\n            {\n\n\n\n                // value is been set . replacing index value a with iteartor value 0,1,2, etc.   \n                NewValueToSet = NewValueToSet + iterator\n\n            } else {\n\n                NewValueToSet = NewValueToSet + ValueToSet[m]\n\n\n\n            }\n\n\n\n        }\n\n        let iterat = false\n        //gave it a different name so it would not fuck up with for loop iterator\n\n        NewValueToSet = CalculateValues(NewValueToSet, j, CompleteTokenValueList, )\n\n\n\n\n        // \n\n        SetArrayorStringElement(ArrayElement, CompleteTokenValueList, iterat, NewValueToSet, tokens)\n\n\n\n\n    }\n\n\n    // this condition enables program to only run  Array[a]= xyz when iterator is a. It disallows running Array[blablabla]=xyz\n    if (OriginalIterator == Split[1]) {\n\n\n\n        //  \n\n        if (Split[1] == ValueToSet) {\n\n\n            let iterator = true\n\n            SetArrayorStringElement(ArrayElement, CompleteTokenValueList, iterator, ValueToSet, tokens)\n\n\n\n        }\n\n        // for operations like Array[a]=ageone*100\n\n\n        if (!data.includes(Split[1]) && OriginalIterator == Split[1]) {\n\n\n\n            let iterator = false\n\n            ValueToSet = CalculateValues(ValueToSet, j, CompleteTokenValueList)\n            // \n\n            // \n\n            SetArrayorStringElement(ArrayElement, CompleteTokenValueList, iterator, ValueToSet, tokens)\n\n\n\n        }\n\n\n\n\n        //SetArrayorStringElement(ArrayElement,CompleteTokenValueList, iterator, ValueToSet, tokens)\n\n\n\n    }\n\n\n    //might have to add more conditions in the future\n    else {\n\n        let iterator = false\n\n        ValueToSet = CalculateValues(ValueToSet, j, CompleteTokenValueList)\n        //   \n\n        // \n\n        SetArrayorStringElement(ArrayElement, CompleteTokenValueList, iterator, ValueToSet, tokens)\n\n\n\n\n    }\n\n\n\n\n\n    \n}\n\n\n\n\nexport {\n    Count,\n    ForLoopSetMetadata,\n    getLoopIndexStart,\n    ResetValue,\n    HandleBlocks,\n    HandleConditions,\n    AssignorUpdateValues,\n    PushGetArrayIndexValue,\n    PushSetArrayIndexValue,\n    isArrayOperation,\n    GetConditionValue,\n    PrintArrayElement,\n    CalculateValues,\n    handlemultConditions,\n    CreateArrayElement,\n    SetArrayorStringElement,\n    RemoveBrackets,\n    ForLoopArrayorStringOutput,\n    GetArrayorStringElement,\n    SplitElementsArray,\n    SetValues,\n    UpdateUpdated_tokenswithValues,\n    SetArrayIndexValue\n}"]}]}